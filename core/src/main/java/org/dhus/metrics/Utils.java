/*
 * Data Hub Service (DHuS) - For Space data distribution.
 * Copyright (C) 2019 GAEL Systems
 *
 * This file is part of DHuS software sources.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.dhus.metrics;

import java.net.URI;

/**
 * Utility methods used when dealing with metrics.
 */
public final class Utils
{
   /**
    * To generate the ItemClass part of metric names.
    */
   public static class ItemClass
   {
      /**
       * Precision of the ItemClass name generated by the {@link #toMetricNamePart} method.
       */
      public static enum Precision
      {
         FINE,
         COARSE
      }

      /**
       * Returns the product type string extracted from the Item Class.
       *
       * @param itemClass item class URI, not null
       * @param precision precision of the name to generate
       * @return the product type or {@code "unknown"}
       */
      public static String toMetricNamePart(String itemClass, Precision precision)
      {
         try
         {
            URI uri = URI.create(itemClass);
            String path = uri.getPath();
            String fragment = uri.getFragment();
            if (path != null && !path.isEmpty() && !path.equals("/"))
            {
               path = path.substring(1); // remove first slash
               path = path.replace('/', '_');
               if (precision == Precision.FINE && fragment != null && !fragment.isEmpty())
               {
                  path = path + '_' + fragment;
               }
               return path;
            }
         }
         catch (RuntimeException suppressed) {}
         return "unknown";
      }
   }
}
