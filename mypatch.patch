diff --git a/.gitignore b/.gitignore
index d7184948c..d5bd1ff09 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,6 +4,7 @@
 /*/*/target/
 /core/local_dhus_test/
 /core/test-output/
+/core/etc/
 
 # IDE files
 .~lock.*
@@ -47,4 +48,4 @@ nb-configuration.xml
 .Spotlight-V100
 .Trashes
 ehthumbs.db
-Thumbs.db
\ No newline at end of file
+Thumbs.db
diff --git a/api/pom.xml b/api/pom.xml
index c25aba30c..145ef0abc 100644
--- a/api/pom.xml
+++ b/api/pom.xml
@@ -27,7 +27,7 @@
    <parent>
       <groupId>fr.gael.dhus</groupId>
       <artifactId>dhus-core-suite</artifactId>
-      <version>1.11.2-osf</version>
+      <version>2.0.8</version>
       <relativePath>../pom.xml</relativePath>
    </parent>
 
@@ -41,7 +41,7 @@
       <dependency>
          <groupId>fr.gael.odata</groupId>
          <artifactId>odata-engine</artifactId>
-         <version>1.1.5</version>
+         <version>1.3.9</version>
          <exclusions>
             <exclusion>
                <groupId>io.netty</groupId>
diff --git a/core/pom.xml b/core/pom.xml
index fc2dbe11e..7a2aee388 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -32,8 +32,8 @@
       <solr.version>5.5.3</solr.version>
       <spring.version>5.2.1.RELEASE</spring.version>
       <spring_security.version>5.2.1.RELEASE</spring_security.version>
-      <log4j.version>2.16.0</log4j.version>
-      <tomcat.version>8.0.53</tomcat.version>
+      <log4j.version>2.17.1</log4j.version>
+      <tomcat.version>8.5.42</tomcat.version>
       <skipUTs>${skipTests}</skipUTs>
       <testing.argline></testing.argline>
       <argLine></argLine>
@@ -42,7 +42,7 @@
    <parent>
       <groupId>fr.gael.dhus</groupId>
       <artifactId>dhus-core-suite</artifactId>
-      <version>1.11.2-osf</version>
+      <version>2.0.8</version>
       <relativePath>../pom.xml</relativePath>
    </parent>
 
@@ -86,7 +86,7 @@
             </exclusion>
          </exclusions>
       </dependency>
-
+      
       <!-- Commons -->
       <dependency>
          <groupId>commons-io</groupId>
@@ -167,7 +167,7 @@
       <dependency>
          <groupId>fr.gael.drb</groupId>
          <artifactId>drb</artifactId>
-         <version>2.5.10</version>
+         <version>2.5.13</version>
          <exclusions>
             <exclusion>
                <groupId>log4j</groupId>
@@ -182,7 +182,7 @@
       <dependency>
          <groupId>fr.gael.drb</groupId>
          <artifactId>drbx-cortex</artifactId>
-         <version>1.0.5</version>
+         <version>1.0.8</version>
          <exclusions>
             <exclusion>
                <groupId>fr.gael.drb</groupId>
@@ -220,9 +220,9 @@
                <groupId>javax.media</groupId>
                <artifactId>jai_imageio</artifactId><!-- contains bugged jp2k support provided by JJ2000 -->
             </exclusion>
-            <exclusion>
-            	<groupId>fr.gael.drb</groupId>
-            	<artifactId>drb</artifactId>
+			<exclusion>
+               <groupId>fr.gael.drb</groupId>
+               <artifactId>drb</artifactId>
             </exclusion>
          </exclusions>
       </dependency>
@@ -231,7 +231,7 @@
       <dependency>
          <groupId>fr.gael.streams</groupId>
          <artifactId>streams</artifactId>
-         <version>1.0.11</version>
+         <version>1.0.14</version>
       </dependency>
 
       <!-- DRB Implementations -->
@@ -248,7 +248,7 @@
       <dependency>
          <groupId>fr.gael.drb</groupId>
          <artifactId>drbx-impl-tar</artifactId>
-         <version>1.0.13</version>
+         <version>1.0.17</version>
          <exclusions>
             <exclusion>
                <groupId>fr.gael.drb</groupId>
@@ -268,23 +268,23 @@
       <dependency>
          <groupId>fr.gael.drb</groupId>
          <artifactId>drbx-impl-tiff</artifactId>
-         <version>1.2.4</version>
+         <version>1.2.7</version>
          <exclusions>
             <!-- replaced by GPL compatible com.github.jai-imageio:jai-imageio-core -->
-            <exclusion>
+			<exclusion>
                <groupId>javax.media</groupId>
                <artifactId>jai_imageio</artifactId><!-- contains bugged jp2k support provided by JJ2000 -->
             </exclusion>
             <exclusion>
-            	<groupId>fr.gael.drb</groupId>
-            	<artifactId>drb</artifactId>
+               <groupId>fr.gael.drb</groupId>
+               <artifactId>drb</artifactId>
             </exclusion>
          </exclusions>
       </dependency>
       <dependency>
          <groupId>fr.gael.drb</groupId>
          <artifactId>drbx-impl-zip</artifactId>
-         <version>1.1.26</version>
+         <version>1.1.28</version>
          <exclusions>
             <exclusion>
                <groupId>fr.gael.drb</groupId>
@@ -300,7 +300,7 @@
       <dependency>
          <groupId>fr.gael.drb</groupId>
          <artifactId>drbx-impl-swift</artifactId>
-         <version>1.0.22</version>
+         <version>1.0.25</version>
          <exclusions>
             <exclusion>
                <groupId>fr.gael.drb</groupId>
@@ -599,7 +599,19 @@
       <dependency>
          <groupId>org.springframework.security.extensions</groupId>
          <artifactId>spring-security-saml2-core</artifactId>
-         <version>1.0.2.RELEASE</version>
+         <version>1.0.10.RELEASE</version>
+      </dependency>
+
+      <!-- Keycloak adapter, imported for internal checks in KeycloakLogoutAll handler (saml webapp) -->
+      <dependency>
+         <groupId>org.keycloak</groupId>
+         <artifactId>keycloak-adapter-core</artifactId>
+         <version>12.0.4</version>
+      </dependency>
+      <dependency>
+         <groupId>org.keycloak</groupId>
+         <artifactId>keycloak-core</artifactId>
+         <version>12.0.4</version>
       </dependency>
 
       <!-- Jackson + databind required by Spring 5 -->
@@ -837,6 +849,11 @@
             </exclusion>
          </exclusions>
       </dependency>
+		<dependency>
+         <groupId>com.google.guava</groupId>
+         <artifactId>guava</artifactId>
+			<version>18.0</version>
+		</dependency>
    </dependencies>
 
    <profiles>
@@ -1101,6 +1118,13 @@
    </build>
 
    <repositories>
+      <repository><!--  to get opensaml 2.6.6 (dependency of spring saml) -->
+          <id>Shibbolet</id>
+          <name>Shibbolet</name>
+          <url>https://build.shibboleth.net/nexus/content/repositories/releases/</url>
+          <releases><enabled>true</enabled></releases>
+          <snapshots><enabled>false</enabled></snapshots>
+      </repository>
       <repository>
          <id>osgeo</id><!-- repository providing the geotools dependency -->
          <name>Open Source Geospatial Foundation Repository</name>
@@ -1116,5 +1140,4 @@
           <snapshots><enabled>false</enabled></snapshots>
       </repository>
    </repositories>
-
 </project>
diff --git a/core/src/main/java/fr/gael/dhus/ConfigurationConverter.java b/core/src/main/java/fr/gael/dhus/ConfigurationConverter.java
index 1e5b2e418..5f4139c1d 100644
--- a/core/src/main/java/fr/gael/dhus/ConfigurationConverter.java
+++ b/core/src/main/java/fr/gael/dhus/ConfigurationConverter.java
@@ -71,6 +71,7 @@ import org.xml.sax.SAXParseException;
  */
 public class ConfigurationConverter
 {
+   public static final String HFS_CACHE_NAME = "HfsCache";
    /**
     * Converts XML config file from previous releases.
     *
@@ -107,6 +108,7 @@ public class ConfigurationConverter
       convertOldAsyncDataStoreMaxQueuedRequest(loadedConfig, doc);
       convertAsyncQuotas(loadedConfig, doc);
       convertDataStoreReadOnly(loadedConfig, doc);
+      convertOldAsyncDataStoreCacheToHFS(loadedConfig, doc);
 
       if (backup != null)
       {
@@ -540,6 +542,86 @@ public class ConfigurationConverter
       });
    }
 
+   /**
+    * Converts old property of AsyncDataStores "hfsLocation" into new HfsDataStore
+    *
+    * @param conf configuration to update
+    * @param doc  source document containing the deprecated configuration
+    */
+   public static void convertOldAsyncDataStoreCacheToHFS(Configuration conf, Document doc)
+   {
+      Objects.requireNonNull(conf);
+      Objects.requireNonNull(doc);
+
+      NodeList nodes = doc.getElementsByTagNameNS("*", "dataStore");
+      List<DataStoreConf> dataStoreConfList = conf.getDataStores().getDataStore();
+
+      for (int i = 0; i < nodes.getLength(); i++)
+      {
+         Node node = nodes.item(i);
+         if (node != null && Element.class.isAssignableFrom(node.getClass()))
+         {
+            Element element = Element.class.cast(node);
+            String name = element.getAttribute("name");
+
+            for (DataStoreConf dataStoreConf : dataStoreConfList)
+            {
+               if (dataStoreConf instanceof AsyncDataStoreConf)
+               {
+                  AsyncDataStoreConf async = (AsyncDataStoreConf) dataStoreConf;
+
+                  if (name.equals(async.getName()))
+                  {
+                     Element hfsElement = firstElementByName(element.getChildNodes(), "hfsLocation");
+                     if (hfsElement == null)
+                     {
+                        continue;
+                     }
+                     
+                     long maximumSize = 0;
+                     long currentSize = 0;                     
+
+                     String hfsLocation = hfsElement.getTextContent();
+                     String elementMaxSize = element.getAttribute("maximumSize");
+                     if (!elementMaxSize.isEmpty())
+                     {
+                        maximumSize = Long.parseLong(elementMaxSize);
+                     }
+                     String elementCurrentSize = element.getAttribute("currentSize");
+                     if (!elementCurrentSize.isEmpty())
+                     {
+                        currentSize = Long.parseLong(elementCurrentSize);
+                     }
+                     boolean autoEviction = Boolean.valueOf(element.getAttribute("autoEviction"));
+                     Element evictElement = firstElementByName(element.getChildNodes(), "evictionName");
+                     
+                     HfsDataStoreConf hfsCache = new HfsDataStoreConf();
+                     hfsCache.setName(name + "-" + HFS_CACHE_NAME);
+                     hfsCache.setPath(hfsLocation);
+                     hfsCache.setRestriction(DataStoreRestriction.NONE);
+                     hfsCache.setMaximumSize(maximumSize);
+                     hfsCache.setCurrentSize(currentSize);
+                     hfsCache.setAutoEviction(autoEviction);
+                     hfsCache.setMaxFileNo(10);
+                     hfsCache.setMaxItems(1024);
+                     if (evictElement != null)
+                     {
+                        String evictionName = evictElement.getTextContent();
+                        hfsCache.setEvictionName(evictionName);
+                     }
+
+                     async.setDataStore(hfsCache);
+                     async.setAutoEviction(false);
+                     async.setEvictionName(null);
+                     async.setMaximumSize(null);
+                     async.setCurrentSize(null);
+                  }
+               }
+            }
+         }
+      }
+   }
+
    /* Returns a stream of Elements from the given NodeList. */
    private static Stream<Element> streamableElementList(final NodeList nodes)
    {
diff --git a/core/src/main/java/fr/gael/dhus/DHuS.java b/core/src/main/java/fr/gael/dhus/DHuS.java
index 20688e061..cb80a903f 100644
--- a/core/src/main/java/fr/gael/dhus/DHuS.java
+++ b/core/src/main/java/fr/gael/dhus/DHuS.java
@@ -40,6 +40,7 @@ import java.io.File;
 import java.io.IOException;
 import java.util.Map;
 import java.util.Scanner;
+import java.util.ServiceConfigurationError;
 import java.util.TimeZone;
 
 import org.apache.logging.log4j.Level;
@@ -207,8 +208,15 @@ public class DHuS
 
          context.getBean(DatabasePostInit.class).init();
          context.getBean(ISynchronizerService.class).init();
-         context.getBean(TransformationManager.class).init();
-
+         try
+         {
+            context.getBean(TransformationManager.class).init();
+         }
+         catch (ServiceConfigurationError e)
+         {
+            LOGGER.error ("Error while loading Transformer", e);
+            // avoid not fully starting DHuS if Transformer is not found
+         }
          LOGGER.info ("Server is ready...");
          started = true;
 
diff --git a/core/src/main/java/fr/gael/dhus/database/dao/CollectionDao.java b/core/src/main/java/fr/gael/dhus/database/dao/CollectionDao.java
index 13f3c1646..9da9881ec 100644
--- a/core/src/main/java/fr/gael/dhus/database/dao/CollectionDao.java
+++ b/core/src/main/java/fr/gael/dhus/database/dao/CollectionDao.java
@@ -104,9 +104,8 @@ public class CollectionDao extends HibernateDao<Collection, String>
     *
     * @param cid the collection id where remove product.
     * @param pid the product id to remove.
-    * @param user unused parameter.
     */
-   public void removeProduct (final String cid, final Long pid, User user)
+   public void removeProduct (final String cid, final Long pid)
    {
       Collection collection = read(cid);
       if (collection == null)
@@ -133,12 +132,11 @@ public class CollectionDao extends HibernateDao<Collection, String>
     * database.
     * @param cid the collection id where remove product.
     * @param pids the product id to remove.
-    * @param user unused parameter.
     */
-   public void removeProducts (final String cid, final Long[] pids, User user)
+   public void removeProducts (final String cid, final Long[] pids)
    {
       for (Long pid : pids)
-         removeProduct (cid, pid, user);
+         removeProduct (cid, pid);
    }
 
    // Not filtered by user, only called by ProductDao.delete, which must delete
diff --git a/core/src/main/java/fr/gael/dhus/database/dao/KeyStoreEntryDao.java b/core/src/main/java/fr/gael/dhus/database/dao/KeyStoreEntryDao.java
index cc32f9821..9acc3810a 100644
--- a/core/src/main/java/fr/gael/dhus/database/dao/KeyStoreEntryDao.java
+++ b/core/src/main/java/fr/gael/dhus/database/dao/KeyStoreEntryDao.java
@@ -19,14 +19,10 @@
  */
 package fr.gael.dhus.database.dao;
 
-import fr.gael.dhus.database.dao.interfaces.HibernateDao;
-import fr.gael.dhus.database.object.KeyStoreEntry;
-import fr.gael.dhus.database.object.KeyStoreEntry.Key;
-
+import java.util.Iterator;
 import java.util.List;
 
 import org.dhus.store.datastore.DataStore;
-
 import org.hibernate.Criteria;
 import org.hibernate.HibernateException;
 import org.hibernate.ScrollMode;
@@ -38,6 +34,10 @@ import org.hibernate.query.Query;
 import org.springframework.orm.hibernate5.HibernateCallback;
 import org.springframework.stereotype.Repository;
 
+import fr.gael.dhus.database.dao.interfaces.HibernateDao;
+import fr.gael.dhus.database.object.KeyStoreEntry;
+import fr.gael.dhus.database.object.KeyStoreEntry.Key;
+
 @Repository
 public class KeyStoreEntryDao extends HibernateDao<KeyStoreEntry, Key>
 {
@@ -119,6 +119,22 @@ public class KeyStoreEntryDao extends HibernateDao<KeyStoreEntry, Key>
       });
    }
 
+   public Iterator<KeyStoreEntry> getUnalteredScrollableProductEntries(final String keyStoreName, Integer skip,
+         Integer top)
+   {
+      StringBuilder sb = new StringBuilder("FROM KeyStoreEntry WHERE keyStore='");
+      sb.append(keyStoreName).append("' AND tag='").append(DataStore.UNALTERED_PRODUCT_TAG).append("'");
+      if (skip == null)
+      {
+         skip = 0;
+      }
+      if (top == null)
+      {
+         top = -1;
+      }
+      return new PagedIterator<>(this, sb.toString(), skip, PagedIterator.DEFAULT_PAGE_SIZE, top);
+   }
+
    public List<KeyStoreEntry> getUnalteredProductEntries(final String keyStoreName, Integer skip, Integer top)
    {
       return getHibernateTemplate().execute(new HibernateCallback<List<KeyStoreEntry>>()
diff --git a/core/src/main/java/fr/gael/dhus/database/dao/OrderDao.java b/core/src/main/java/fr/gael/dhus/database/dao/OrderDao.java
index 94155a6ff..02dd0d0fa 100644
--- a/core/src/main/java/fr/gael/dhus/database/dao/OrderDao.java
+++ b/core/src/main/java/fr/gael/dhus/database/dao/OrderDao.java
@@ -154,4 +154,17 @@ public class OrderDao extends HibernateDao<Order, String>
          return "";
       }
    }
+
+   @SuppressWarnings("unchecked")
+   public Order getOrderByJobId(final String jobId)
+   {
+      String hql = "FROM Order WHERE job_id=?1";
+      return getHibernateTemplate().execute(session ->
+      {
+         Query query = session.createQuery(hql);
+         query.setParameter(1, jobId, StandardBasicTypes.STRING);
+         List<?> list = query.list();
+         return (Order) (list.isEmpty() ? null : list.get(0));
+      });
+   }
 }
diff --git a/core/src/main/java/fr/gael/dhus/database/dao/PagedIterator.java b/core/src/main/java/fr/gael/dhus/database/dao/PagedIterator.java
index c4958077f..2a327ea1a 100644
--- a/core/src/main/java/fr/gael/dhus/database/dao/PagedIterator.java
+++ b/core/src/main/java/fr/gael/dhus/database/dao/PagedIterator.java
@@ -19,13 +19,15 @@
  */
 package fr.gael.dhus.database.dao;
 
-import fr.gael.dhus.database.dao.interfaces.Pageable;
-
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.NoSuchElementException;
 
+import fr.gael.dhus.database.dao.interfaces.HibernateDao;
+import fr.gael.dhus.database.dao.interfaces.Pageable;
+
+import org.dhus.olingo.v2.visitor.SQLVisitorParameter;
 /**
  * This class implements an iterator over Pageable items. All the database dao
  * implements Pageable to retrieve the list of their entities. This class helps
@@ -67,17 +69,20 @@ import java.util.NoSuchElementException;
  * @see {@link java.lang.Iterable}, {@link java.lang.Iterator}, 
  *    {@link Pageable}
  */
-final class PagedIterator<E> implements Iterator<E>, Iterable<E>
+final public class PagedIterator<E> implements Iterator<E>, Iterable<E>
 {
-   private static final int DEFAULT_PAGE_SIZE = 30;
+   public static final int DEFAULT_PAGE_SIZE = 30;
 
    private final Pageable<E> pageable;
    private final String query;
+   private final List<SQLVisitorParameter> parameters;
    private List<E> result;
    private E currentElement;
    private int index;
+   private int globalIndex;
    private int skip;
    private final int pageSize;
+   private final int count;
 
    PagedIterator (Pageable<E> pageable, String query)
    {
@@ -90,18 +95,44 @@ final class PagedIterator<E> implements Iterator<E>, Iterable<E>
    }
 
    PagedIterator (Pageable<E> pageable, String query, int skip, int page_size)
+   {
+      this (pageable, query, skip, page_size, -1);
+   }
+
+   PagedIterator (Pageable<E> pageable, String query, int skip, int page_size, int count)
+   {
+      this (pageable, query, null, skip, page_size, count);
+   }
+
+   PagedIterator (Pageable<E> pageable, String query, List<SQLVisitorParameter> parameters, int skip, int page_size, int count)
    {
       if (pageable == null || query == null || query.trim ().isEmpty ()
-            || skip < 0 || page_size < 1)
+            || skip < 0 || page_size < 1 || count < -1)
       {
          throw new IllegalArgumentException ();
       }
 
       this.pageable = pageable;
       this.query = query;
+      this.parameters = parameters;
       this.pageSize = page_size;
       this.index = 0;
+      this.globalIndex = 0;
       this.skip = skip;
+      this.count = count;
+   }
+
+   /**
+    * @return total query count when possible, otherwise -1
+    *         skip and top are not taken into account
+    */
+   public Integer getCount()
+   {
+      if(pageable instanceof HibernateDao<?, ?>)
+      {
+         return ((HibernateDao<?, ?>)pageable).count();
+      }
+      return -1;
    }
 
    /**
@@ -112,7 +143,7 @@ final class PagedIterator<E> implements Iterator<E>, Iterable<E>
     */
    private boolean loadNextPage ()
    {
-      result = pageable.getPage (query, skip, pageSize);
+      result = pageable.getPage (query, parameters, skip, pageSize);
       index = 0;
 
       if (result == null || result.isEmpty ())
@@ -125,6 +156,10 @@ final class PagedIterator<E> implements Iterator<E>, Iterable<E>
    @Override
    public boolean hasNext ()
    {
+      if(count > 0 && globalIndex >= count)
+      {
+         return false;
+      }
       if (result == null || result.isEmpty () || index == result.size ())
       {
          return loadNextPage ();
@@ -140,6 +175,7 @@ final class PagedIterator<E> implements Iterator<E>, Iterable<E>
          currentElement = result.get (index);
          index++;
          skip++;
+         globalIndex++;
          return currentElement;
       }
       throw new NoSuchElementException ();
@@ -168,6 +204,7 @@ final class PagedIterator<E> implements Iterator<E>, Iterable<E>
       pageable.delete (currentElement);
       currentElement = null;
       skip--;
+      globalIndex--;
    }
 
    /**
diff --git a/core/src/main/java/fr/gael/dhus/database/dao/ProductDao.java b/core/src/main/java/fr/gael/dhus/database/dao/ProductDao.java
index 579cde1b6..ad2c51342 100644
--- a/core/src/main/java/fr/gael/dhus/database/dao/ProductDao.java
+++ b/core/src/main/java/fr/gael/dhus/database/dao/ProductDao.java
@@ -19,12 +19,6 @@
  */
 package fr.gael.dhus.database.dao;
 
-import fr.gael.dhus.database.dao.interfaces.HibernateDao;
-import fr.gael.dhus.database.object.Collection;
-import fr.gael.dhus.database.object.MetadataIndex;
-import fr.gael.dhus.database.object.Product;
-import fr.gael.dhus.database.object.User;
-
 import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
@@ -34,16 +28,20 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.dhus.olingo.v2.visitor.SQLVisitorParameter;
 import org.dhus.store.LoggableProduct;
-
 import org.hibernate.FetchMode;
-import org.hibernate.query.Query;
 import org.hibernate.Session;
 import org.hibernate.criterion.DetachedCriteria;
-
+import org.hibernate.query.Query;
 import org.hibernate.type.StandardBasicTypes;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Repository;
 
+import fr.gael.dhus.database.dao.interfaces.HibernateDao;
+import fr.gael.dhus.database.object.Collection;
+import fr.gael.dhus.database.object.MetadataIndex;
+import fr.gael.dhus.database.object.Product;
+import fr.gael.dhus.database.object.User;
+
 /**
  * Product Data Access Object provides interface to Product Table into the
  * database.
@@ -133,15 +131,12 @@ public class ProductDao extends HibernateDao<Product, Long>
       Product p = read (product.getId ());
       List<Collection>cls = collectionDao.getCollectionsOfProduct (p.getId ());
       // Remove collection references
-      // Must use rootUser to remove every reference of this product
-      // (or maybe a new non usable user ?)
-      User user = userDao.getRootUser();
       if (cls!=null)
       {
          for (Collection c: cls)
          {
             LOGGER.info("deconnect product from collection " + c.getName ());
-            collectionDao.removeProduct (c.getUUID (), p.getId (), user);
+            collectionDao.removeProduct (c.getUUID (), p.getId ());
          }
       }
       // Remove references
@@ -218,8 +213,8 @@ public class ProductDao extends HibernateDao<Product, Long>
       p.getUuid();
       p.setCreated(new Date());
       p.setUpdated(p.getCreated());
-      p.setOnline(true);
       p.setOnDemand(p.isOnDemand());
+      p.setOnline(p.isOnline() != null ? p.isOnline() : true);
       return super.create(p);
    }
 
@@ -238,6 +233,23 @@ public class ProductDao extends HibernateDao<Product, Long>
       return super.executeHQLQuery (hql, parameters, skip, top);
    }
 
+   /**
+    * Returns an iterator over results. Results are retrieved by page (page size
+    * = PagedIterator.DEFAULT_PAGE_SIZE).
+    *
+    * @param hql : core query
+    * @param parameters : query parameters
+    * @param skip : results to skip
+    * @param top : results count
+    * @return an iterator on results
+    */
+   public PagedIterator<Product> executeHQLQueryAndIterate(final String hql, final List<SQLVisitorParameter> parameters,
+         final int skip, final int top)
+   {
+      checkProductNumber(top);
+      return new PagedIterator<>(this, hql, parameters, skip, PagedIterator.DEFAULT_PAGE_SIZE, top);
+   }
+
    /**
     * Returns a list of LoggableProducts that match the given HQL String and HQL parameters.
     * LoggableProduct contain the UUID, Identifier and Size of a Product.
diff --git a/core/src/main/java/fr/gael/dhus/database/dao/UserDao.java b/core/src/main/java/fr/gael/dhus/database/dao/UserDao.java
index fe7ae88d0..651ccd748 100644
--- a/core/src/main/java/fr/gael/dhus/database/dao/UserDao.java
+++ b/core/src/main/java/fr/gael/dhus/database/dao/UserDao.java
@@ -29,7 +29,6 @@ import fr.gael.dhus.database.object.Role;
 import fr.gael.dhus.database.object.Search;
 import fr.gael.dhus.database.object.User;
 import fr.gael.dhus.database.object.restriction.AccessRestriction;
-import fr.gael.dhus.database.object.restriction.LockedAccessRestriction;
 import fr.gael.dhus.database.object.restriction.TmpUserLockedAccessRestriction;
 import fr.gael.dhus.service.exception.UserAlreadyExistingException;
 import fr.gael.dhus.system.config.ConfigurationManager;
@@ -215,35 +214,27 @@ public class UserDao extends HibernateDao<User, String>
       return user;
    }
 
-   public void lockUser (User user, String reason)
+   public void unlockUser(User user, Class<? extends AccessRestriction> car)
    {
-      LockedAccessRestriction ar = new LockedAccessRestriction ();
-      ar.setBlockingReason (reason);
+      if (user.getRestrictions() == null)
+         return;
 
-      user.addRestriction (ar);
-      update (user);
-   }
-
-   public void unlockUser (User user, Class<? extends AccessRestriction> car)
-   {
-      if (user.getRestrictions () == null) return;
-
-      Iterator<AccessRestriction> iter = user.getRestrictions ().iterator ();
-      HashSet<AccessRestriction> toDelete = new HashSet<AccessRestriction> ();
-      while (iter.hasNext ())
+      Iterator<AccessRestriction> iter = user.getRestrictions().iterator();
+      HashSet<AccessRestriction> toDelete = new HashSet<AccessRestriction>();
+      while (iter.hasNext())
       {
-         AccessRestriction lar = iter.next ();
-         if (lar.getClass ().equals (car))
+         AccessRestriction lar = iter.next();
+         if (lar.getClass().equals(car))
          {
-            iter.remove ();
-            toDelete.add (lar);
+            iter.remove();
+            toDelete.add(lar);
          }
       }
-      update (user);
+      update(user);
 
       for (AccessRestriction restriction : toDelete)
       {
-         accessRestrictionDao.delete (restriction);
+         accessRestrictionDao.delete(restriction);
       }
    }
 
@@ -253,61 +244,29 @@ public class UserDao extends HibernateDao<User, String>
     * @param temporary user.
     * @return the updated user.
     */
-   public void createTmpUser (User user)
+   public void createTmpUser(User user)
    {
-      TmpUserLockedAccessRestriction tuar =
-         new TmpUserLockedAccessRestriction ();
-      user.addRestriction (tuar);
-      create (user);
+      TmpUserLockedAccessRestriction tuar = new TmpUserLockedAccessRestriction();
+      user.addRestriction(tuar);
+      create(user);
    }
 
    @Override
-   public User create (User u)
+   public User create(User u)
    {
-      User user = getByName (u.getUsername ());
+      User user = getByName(u.getUsername());
       if (user != null)
       {
-         throw new UserAlreadyExistingException (
-            "An user is already registered with name '" + u.getUsername () +
-               "'.");
+         throw new UserAlreadyExistingException(
+               "An user is already registered with name '" + u.getUsername() + "'.");
       }
       // Default new user come with at least search access role.
-      if (u.getRoles ().isEmpty ())
+      if (u.getRoles().isEmpty())
       {
-         u.addRole (Role.SEARCH);
-         u.addRole (Role.DOWNLOAD);
+         u.addRole(Role.SEARCH);
+         u.addRole(Role.DOWNLOAD);
       }
-      return super.create (u);
-   }
-
-   /**
-    * Create a row in database for the given user, do not fail if user has no email.
-    *
-    * @param user a User to store (non null)
-    * @return stored user
-    */
-   public User createWithoutMail(User user)
-   {
-      User test_exists = getByName(user.getUsername());
-      if (test_exists != null)
-      {
-         throw new UserAlreadyExistingException("An user is already registered with name '"
-               + user.getUsername() + "'.");
-      }
-      // Default new user come with at least search access role.
-      if (user.getRoles().isEmpty())
-      {
-         user.addRole(Role.SEARCH);
-         user.addRole(Role.DOWNLOAD);
-      }
-
-      long start = System.currentTimeMillis();
-      String id = (String) getHibernateTemplate().save(user);
-      user = getHibernateTemplate().<User>get(User.class, id);
-      long end = System.currentTimeMillis();
-      LOGGER.info("Create/save {} ({}) spent {}ms", entityClass.getSimpleName(), id, (end - start));
-
-      return user;
+      return super.create(u);
    }
 
    public void registerTmpUser (User u)
@@ -405,7 +364,7 @@ public class UserDao extends HibernateDao<User, String>
       getHibernateTemplate ().update (user);
    }
 
-   public void storeUserSearch (User user, String request, String footprint,
+   public Search storeUserSearch (User user, String request, String footprint,
          HashMap<String, String> advanced, String complete)
    {
       Preference pref = user.getPreferences ();
@@ -418,6 +377,7 @@ public class UserDao extends HibernateDao<User, String>
       search = searchDao.create (search);
       pref.getSearches ().add (search);
       updateUserPreference (user);
+      return search;
    }
 
    public void removeUserSearch (User user, String uuid)
@@ -436,8 +396,8 @@ public class UserDao extends HibernateDao<User, String>
             }
          }
          updateUserPreference (user);
+         searchDao.delete (search);
       }
-      searchDao.delete (search);
    }
 
    public void activateUserSearchNotification (String uuid, boolean notify)
diff --git a/core/src/main/java/fr/gael/dhus/database/dao/interfaces/HibernateDao.java b/core/src/main/java/fr/gael/dhus/database/dao/interfaces/HibernateDao.java
index 208246eb5..91795b904 100644
--- a/core/src/main/java/fr/gael/dhus/database/dao/interfaces/HibernateDao.java
+++ b/core/src/main/java/fr/gael/dhus/database/dao/interfaces/HibernateDao.java
@@ -22,22 +22,20 @@ package fr.gael.dhus.database.dao.interfaces;
 import java.io.Serializable;
 import java.lang.reflect.ParameterizedType;
 import java.util.List;
+
 import javax.swing.event.EventListenerList;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
 import org.dhus.olingo.v2.visitor.SQLVisitorParameter;
-
 import org.hibernate.Criteria;
 import org.hibernate.HibernateException;
-import org.hibernate.query.Query;
-import org.hibernate.query.NativeQuery;
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
 import org.hibernate.criterion.DetachedCriteria;
 import org.hibernate.criterion.Projections;
-
+import org.hibernate.query.NativeQuery;
+import org.hibernate.query.Query;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.dao.DataAccessException;
 import org.springframework.dao.support.DataAccessUtils;
@@ -302,7 +300,7 @@ public class HibernateDao<T, PK extends Serializable>
     * @see org.hibernate.Query
     */
    @Override
-   public List<T> getPage(final String query, final int skip, final int top)
+   public List<T> getPage(final String query, final List<SQLVisitorParameter> parameters, final int skip, final int top)
    {
       return getHibernateTemplate().execute(new HibernateCallback<List<T>>()
       {
@@ -314,6 +312,11 @@ public class HibernateDao<T, PK extends Serializable>
             Query hql_query = session.createQuery(query);
             hql_query.setFirstResult(skip);
             hql_query.setMaxResults(top);
+
+            if (parameters != null && !parameters.isEmpty())
+            {
+              parameters.forEach((t) -> hql_query.setParameter(t.getPosition(), t.getValue(), t.getType()));
+            }
             return hql_query.list();
          }
       });
@@ -359,6 +362,21 @@ public class HibernateDao<T, PK extends Serializable>
    @SuppressWarnings("unchecked")
    public List<T> executeHQLQuery(final String hql,
          final List<SQLVisitorParameter> parameters, final int skip, final int top)
+   {
+      return getQuery(hql, parameters, skip, top).list();
+   }
+
+   /**
+    * Build query using arguments passed.
+    *
+    * @param hql : core query
+    * @param parameters : query parameters
+    * @param skip : results to skip
+    * @param top : results count
+    * @return the built query
+    */
+   @SuppressWarnings("rawtypes")
+   protected Query getQuery(final String hql, final List<SQLVisitorParameter> parameters, final int skip, final int top)
    {
       Session session = getSessionFactory().getCurrentSession();
       Query query = session.createQuery(hql);
@@ -376,7 +394,7 @@ public class HibernateDao<T, PK extends Serializable>
          query.setMaxResults(top);
       }
       query.setReadOnly(true);
-      return query.list();
+      return query;
    }
 
    public int countHQLQuery(String hql, List<SQLVisitorParameter> parameters)
diff --git a/core/src/main/java/fr/gael/dhus/database/dao/interfaces/Pageable.java b/core/src/main/java/fr/gael/dhus/database/dao/interfaces/Pageable.java
index 317a86217..a8ab34d4a 100644
--- a/core/src/main/java/fr/gael/dhus/database/dao/interfaces/Pageable.java
+++ b/core/src/main/java/fr/gael/dhus/database/dao/interfaces/Pageable.java
@@ -22,6 +22,7 @@ package fr.gael.dhus.database.dao.interfaces;
 import java.util.List;
 
 import org.hibernate.query.Query;
+import org.dhus.olingo.v2.visitor.SQLVisitorParameter;
 
 /**
  * This interface represents a list that can be accessed by limited blocks of 
@@ -43,7 +44,7 @@ public interface Pageable<E>
     * @param top max element under the result page.
     * @return a list of {@code E} elements representing the asked page.
     */
-   List<E> getPage (final String query, final int skip, final int top);
+   List<E> getPage (final String query, final List<SQLVisitorParameter> parameters, final int skip, final int top);
 
    /**
     * Deletes the {@code element} from underlying list.
diff --git a/core/src/main/java/fr/gael/dhus/database/liquibase/CleanUsersForGDPR.java b/core/src/main/java/fr/gael/dhus/database/liquibase/CleanUsersForGDPR.java
new file mode 100644
index 000000000..7c8a8dc2b
--- /dev/null
+++ b/core/src/main/java/fr/gael/dhus/database/liquibase/CleanUsersForGDPR.java
@@ -0,0 +1,312 @@
+package fr.gael.dhus.database.liquibase;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import liquibase.change.custom.CustomTaskChange;
+import liquibase.database.Database;
+import liquibase.database.jvm.JdbcConnection;
+import liquibase.exception.CustomChangeException;
+import liquibase.exception.DatabaseException;
+import liquibase.exception.SetupException;
+import liquibase.exception.ValidationErrors;
+import liquibase.resource.ResourceAccessor;
+
+public class CleanUsersForGDPR implements CustomTaskChange
+{
+   private static final Logger LOGGER = LogManager.getLogger();
+   private static final String MD5_PATTERN = "^[a-fA-F0-9]{32}$";
+   private static final int BATCH_COUNT = 10_000;
+
+   private static final String UUID = "UUID";
+   private static final String PREFERENCES_UUID = "PREFERENCES_UUID";
+   private static final String SEARCHES_UUID = "SEARCHES_UUID";
+   private static final String LOGIN = "LOGIN";
+   private static final String TOTAL = "TOTAL";
+
+   // User
+   private static final String USERS_SEL_QUERY = "select UUID,PREFERENCES_UUID,LOGIN from USERS where UUID > ? ORDER BY UUID LIMIT ?";
+   private static final String USERS_SEL_COUNT_QUERY = "select count(*) as TOTAL from USERS";
+
+   private static final String USER_ROLES_DEL_QUERY = "delete from USER_ROLES where USER_UUID = ?";
+   private static final String USER_RESTRICTIONS_DEL_QUERY = "delete from USER_RESTRICTIONS where USER_UUID = ?";
+   private static final String USER_TRANSFORMATIONS_DEL_QUERY = "delete from USER_TRANSFORMATIONS where USER_UUID = ?";
+   private static final String USERS_DEL_QUERY = "delete from USERS where UUID = ?";
+
+   private static final String ORDER_OWNERS_DEL_QUERY = "delete from ORDER_OWNERS where USER_UUID = ?";
+   private static final String STORE_QUOTAS_DEL_QUERY = "delete from STORE_QUOTAS where USER_UUID = ?";
+   private static final String NETWORK_USAGE_DEL_QUERY = "delete from NETWORK_USAGE where USER_UUID = ?";
+
+   // Cart products
+   private static final String PRODUCTCARTS_SEL_QUERY = "select UUID from PRODUCTCARTS where USER_UUID = ?";
+   private static final String CART_PRODUCTS_DEL_QUERY = "delete from CART_PRODUCTS where CART_UUID = ?";
+   private static final String PRODUCTCARTS_DEL_QUERY = "delete from PRODUCTCARTS where USER_UUID = ?";
+
+   // Search Preferences
+   private static final String SEARCH_PREFERENCES_SEL_QUERY = "select SEARCHES_UUID from SEARCH_PREFERENCES where PREFERENCE_UUID = ?";
+   private static final String SEARCH_ADVANCED_DEL_QUERY = "delete from SEARCH_ADVANCED where SEARCH_UUID = ?";
+   private static final String SEARCHES_DEL_QUERY = "delete from SEARCHES where UUID = ?";
+   private static final String SEARCH_PREFERENCES_DEL_QUERY = "delete from SEARCH_PREFERENCES where PREFERENCE_UUID = ?";
+   private static final String PREFERENCES_DEL_QUERY = "delete from PREFERENCES where UUID = ?";
+
+   private PreparedStatement usersStmt, delUserRolesStmt, delUserRestrictionsStmt, delUserTransformationsStmt, delUserStmt,
+         delOrderOwnersStmt, delStoreQuotasStmt, delNetworkUsageStmt, selProductCartsStmt, delCartProductsStmt,
+         delProductCartsStmt, selSearchPreferencesStmt, delSearchAdvancedStmt, delSearchesStmt,
+         delSearchPreferencesStmt, delPreferencesStmt;
+   private boolean delSearchAdvancedStmtExec, delSearchesStmtExec, delCartProductsStmtExec;
+   private int batchCount = 0;
+   private int totalUsers = 0;
+
+   @Override
+   public String getConfirmationMessage()
+   {
+      return "Users and all their data are purged for GDPR use context";
+   }
+
+   @Override
+   public void setUp() throws SetupException
+   {
+   }
+
+   @Override
+   public void setFileOpener(ResourceAccessor resourceAccessor)
+   {
+   }
+
+   @Override
+   public ValidationErrors validate(Database database)
+   {
+      return null;
+   }
+
+   @Override
+   public void execute(Database database) throws CustomChangeException
+   {
+      JdbcConnection con = (JdbcConnection) database.getConnection();
+      LOGGER.info("Start cleaning users for GDPR...");
+      boolean statementsInit = false;
+      try (final PreparedStatement usersCountStmt = con.prepareStatement(USERS_SEL_COUNT_QUERY))
+      {
+         final ResultSet rsUsersCount = usersCountStmt.executeQuery();
+         if(rsUsersCount.next())
+         {
+            totalUsers = rsUsersCount.getInt(TOTAL);
+         }
+         rsUsersCount.close();
+         if(totalUsers <= 0)
+         {
+            LOGGER.info("No users found in the database, Exit.");
+            return;
+         }
+         usersStmt = con.prepareStatement(USERS_SEL_QUERY);
+         delUserRolesStmt = con.prepareStatement(USER_ROLES_DEL_QUERY);
+         delUserRestrictionsStmt = con.prepareStatement(USER_RESTRICTIONS_DEL_QUERY);
+         delUserTransformationsStmt = con.prepareStatement(USER_TRANSFORMATIONS_DEL_QUERY);
+         delUserStmt = con.prepareStatement(USERS_DEL_QUERY);
+
+         delOrderOwnersStmt = con.prepareStatement(ORDER_OWNERS_DEL_QUERY);
+         delStoreQuotasStmt = con.prepareStatement(STORE_QUOTAS_DEL_QUERY);
+         delNetworkUsageStmt = con.prepareStatement(NETWORK_USAGE_DEL_QUERY);
+
+         selProductCartsStmt = con.prepareStatement(PRODUCTCARTS_SEL_QUERY);
+         delCartProductsStmt = con.prepareStatement(CART_PRODUCTS_DEL_QUERY);
+         delProductCartsStmt = con.prepareStatement(PRODUCTCARTS_DEL_QUERY);
+
+         selSearchPreferencesStmt = con.prepareStatement(SEARCH_PREFERENCES_SEL_QUERY);
+         delSearchAdvancedStmt = con.prepareStatement(SEARCH_ADVANCED_DEL_QUERY);
+         delSearchesStmt = con.prepareStatement(SEARCHES_DEL_QUERY);
+         delSearchPreferencesStmt = con.prepareStatement(SEARCH_PREFERENCES_DEL_QUERY);
+         delPreferencesStmt = con.prepareStatement(PREFERENCES_DEL_QUERY);
+         statementsInit = true;
+         boolean loop = true;
+         String userId = "0";
+         while(loop)
+         {
+            usersStmt.setString(1, userId);
+            usersStmt.setInt(2, BATCH_COUNT);
+            delSearchAdvancedStmtExec = delSearchesStmtExec = delCartProductsStmtExec = false;
+
+            String prefId, login;
+            ResultSet rsSearchPreferences, rsProductCarts;
+            // USERS
+            final ResultSet rsUsers = usersStmt.executeQuery();
+            int counter = 0;
+            int lastBatchCount = batchCount;
+            while (rsUsers.next())
+            {
+               counter++;
+               userId = rsUsers.getString(UUID);
+               prefId = rsUsers.getString(PREFERENCES_UUID);
+               login = rsUsers.getString(LOGIN);
+
+               // if MD5 login then it is in GDPR format, go next, no processing needed
+               if(login.matches(MD5_PATTERN))
+               {
+                  continue;
+               }
+
+               // SEARCHES
+               selSearchPreferencesStmt.setString(1, prefId);
+               rsSearchPreferences = selSearchPreferencesStmt.executeQuery();
+               while(rsSearchPreferences.next())
+               {
+                  final String searchId = rsSearchPreferences.getString(SEARCHES_UUID);
+                  delSearchAdvancedStmt.setString(1, searchId);
+                  delSearchAdvancedStmt.addBatch();
+                  delSearchAdvancedStmtExec = true;
+                  delSearchesStmt.setString(1, searchId);
+                  delSearchesStmt.addBatch();
+                  delSearchesStmtExec = true;
+               }
+
+               delSearchPreferencesStmt.setString(1, prefId);
+               delSearchPreferencesStmt.addBatch();
+
+               delPreferencesStmt.setString(1, prefId);
+               delPreferencesStmt.addBatch();
+
+               // PRODUCT CARTS
+               selProductCartsStmt.setString(1, userId);
+               rsProductCarts = selProductCartsStmt.executeQuery();
+               while(rsProductCarts.next())
+               {
+                  final String productCartId = rsProductCarts.getString(UUID);
+                  delCartProductsStmt.setString(1, productCartId);
+                  delCartProductsStmt.addBatch();
+                  delCartProductsStmtExec = true;
+               }
+
+               delProductCartsStmt.setString(1, userId);
+               delProductCartsStmt.addBatch();
+
+               // USER ROLES
+               delUserRolesStmt.setString(1, userId);
+               delUserRolesStmt.addBatch();
+
+               // USER RESTRICTIONS
+               delUserRestrictionsStmt.setString(1, userId);
+               delUserRestrictionsStmt.addBatch();
+
+               // USER TRANSFORMATIONS
+               delUserTransformationsStmt.setString(1, userId);
+               delUserTransformationsStmt.addBatch();
+
+               // ORDER OWNERS
+               delOrderOwnersStmt.setString(1, userId);
+               delOrderOwnersStmt.addBatch();
+
+               // STORE QUOTAS
+               delStoreQuotasStmt.setString(1, userId);
+               delStoreQuotasStmt.addBatch();
+
+               // NETWORK USAGE
+               delNetworkUsageStmt.setString(1, userId);
+               delNetworkUsageStmt.addBatch();
+
+               // --- USER ---
+               delUserStmt.setString(1, userId);
+               delUserStmt.addBatch();
+
+               batchCount++;
+            }
+            if(lastBatchCount < batchCount)
+            {
+               executeBatch();
+               con.commit();
+            }
+            loop = counter == BATCH_COUNT;
+         }
+      }
+      catch (DatabaseException | SQLException e)
+      {
+          throw new CustomChangeException(e);
+      }
+      finally
+      {
+         if(statementsInit)
+         {
+            closeStatements();
+         }
+      }
+      LOGGER.info("End cleaning users for GDPR : deleted={} / total={}", batchCount, totalUsers);
+   }
+
+   private void executeBatch() throws SQLException
+   {
+      // DEL BATCH_COUNT x USER DATA
+      if (delSearchAdvancedStmtExec)
+      {
+         delSearchAdvancedStmt.executeBatch();
+      }
+      delSearchPreferencesStmt.executeBatch();
+      if (delSearchesStmtExec)
+      {
+         delSearchesStmt.executeBatch();
+      }
+      if (delCartProductsStmtExec)
+      {
+         delCartProductsStmt.executeBatch();
+      }
+      delProductCartsStmt.executeBatch();
+
+      delUserRolesStmt.executeBatch();
+      delUserRestrictionsStmt.executeBatch();
+      delUserTransformationsStmt.executeBatch();
+      delOrderOwnersStmt.executeBatch();
+      delStoreQuotasStmt.executeBatch();
+      delNetworkUsageStmt.executeBatch();
+
+      // DEL BATCH_COUNT x USER
+      delUserStmt.executeBatch();
+      delPreferencesStmt.executeBatch();
+      LOGGER.info("{} Users deleted from database (GDPR) / Total Users : {}", batchCount, totalUsers);
+      // DEL USER
+
+      // CLEAN
+      delSearchAdvancedStmtExec = delSearchesStmtExec = delCartProductsStmtExec = false;
+      delUserRolesStmt.clearBatch();
+      delUserRestrictionsStmt.clearBatch();
+      delUserTransformationsStmt.clearBatch();
+      delOrderOwnersStmt.clearBatch();
+      delStoreQuotasStmt.clearBatch();
+      delNetworkUsageStmt.clearBatch();
+      delUserStmt.clearBatch();
+      delSearchAdvancedStmt.clearBatch();
+      delSearchPreferencesStmt.clearBatch();
+      delSearchesStmt.clearBatch();
+      delPreferencesStmt.clearBatch();
+      delCartProductsStmt.clearBatch();
+      delProductCartsStmt.clearBatch();
+   }
+
+   private void closeStatements()
+   {
+      try
+      {
+         usersStmt.close();
+         selProductCartsStmt.close();
+         selSearchPreferencesStmt.close();
+         delUserRolesStmt.close();
+         delUserRestrictionsStmt.close();
+         delUserTransformationsStmt.close();
+         delOrderOwnersStmt.close();
+         delStoreQuotasStmt.close();
+         delNetworkUsageStmt.close();
+         delUserStmt.close();
+         delSearchAdvancedStmt.close();
+         delSearchPreferencesStmt.close();
+         delSearchesStmt.close();
+         delPreferencesStmt.close();
+         delCartProductsStmt.close();
+         delProductCartsStmt.close();
+      }
+      catch (SQLException e)
+      {
+         LOGGER.error("Error closing the prepared statements after deletion.", e);
+      }
+   }
+}
diff --git a/core/src/main/java/fr/gael/dhus/database/object/Role.java b/core/src/main/java/fr/gael/dhus/database/object/Role.java
index ca9d73842..59db8e80f 100644
--- a/core/src/main/java/fr/gael/dhus/database/object/Role.java
+++ b/core/src/main/java/fr/gael/dhus/database/object/Role.java
@@ -36,7 +36,8 @@ public enum Role implements Serializable
    SYSTEM_MANAGER("ROLE_SYSTEM_MANAGER", "System manager"),
    ARCHIVE_MANAGER("ROLE_ARCHIVE_MANAGER", "Archive manager"),
    STATISTICS("ROLE_STATS", "Statistics"),
-   EVENT_MANAGER("ROLE_EVENT_MANAGER", "Event manager");
+   EVENT_MANAGER("ROLE_EVENT_MANAGER", "Event manager"),
+   FEDERATION_USER("ROLE_FEDERATION_USER", "Federation user");
 
    private static final long serialVersionUID = -3552817193045379891L;
    private static List<Role> displayableRoles;
diff --git a/core/src/main/java/fr/gael/dhus/database/object/User.java b/core/src/main/java/fr/gael/dhus/database/object/User.java
index 975230391..fb5a2da74 100644
--- a/core/src/main/java/fr/gael/dhus/database/object/User.java
+++ b/core/src/main/java/fr/gael/dhus/database/object/User.java
@@ -206,6 +206,10 @@ public class User extends AbstractTimestampEntity implements Serializable,
    @OnDelete(action = OnDeleteAction.CASCADE)
    private Set<UserTransformation> userTransformations = new HashSet<UserTransformation>();
 
+   // GDPR : extended roles loaded from keycloak, no persistance in database
+   @Transient
+   private List<String> extendedRoles;
+
    public String getUsername ()
    {
       return username;
@@ -257,6 +261,16 @@ public class User extends AbstractTimestampEntity implements Serializable,
       this.roles = roles;
    }
 
+   public void setExtendedRoles(List<String> roles)
+   {
+      this.extendedRoles = roles;
+   }
+
+   public List<String> getExtendedRoles()
+   {
+      return extendedRoles;
+   }
+
    public List<Role> getRoles ()
    {
       if (roles != null)
@@ -360,6 +374,14 @@ public class User extends AbstractTimestampEntity implements Serializable,
       {
          authorities.add (new SimpleGrantedAuthority(role.getAuthority ()));
       }
+      if(extendedRoles == null)
+      {
+         return authorities;
+      }
+      for(String extendedRole : extendedRoles)
+      {
+         authorities.add (new SimpleGrantedAuthority(extendedRole));
+      }
       return authorities;
    }
 
diff --git a/core/src/main/java/fr/gael/dhus/database/object/config/synchronizer/SynchronizerManager.java b/core/src/main/java/fr/gael/dhus/database/object/config/synchronizer/SynchronizerManager.java
index bc3f7de49..503d2f41e 100644
--- a/core/src/main/java/fr/gael/dhus/database/object/config/synchronizer/SynchronizerManager.java
+++ b/core/src/main/java/fr/gael/dhus/database/object/config/synchronizer/SynchronizerManager.java
@@ -48,11 +48,11 @@ public class SynchronizerManager extends Synchronizers
    {
       if (nextId < 0)
       {
-         for (SynchronizerConfiguration scan: getSynchronizer())
+         for (SynchronizerConfiguration sync: getSynchronizer())
          {
-            if (scan.getId() > nextId)
+            if (sync.getId() > nextId)
             {
-               nextId = scan.getId();
+               nextId = sync.getId();
             }
          }
       }
@@ -91,8 +91,8 @@ public class SynchronizerManager extends Synchronizers
 
          for (int i = 0; i < getSynchronizer().size(); i++)
          {
-            SynchronizerConfiguration scan = getSynchronizer().get(i);
-            if (scan != null && scan.getId() == update.getId())
+            SynchronizerConfiguration sync = getSynchronizer().get(i);
+            if (sync != null && sync.getId() == update.getId())
             {
                getSynchronizer().set(i, update);
                break;
@@ -110,11 +110,11 @@ public class SynchronizerManager extends Synchronizers
    public List<SynchronizerConfiguration> getActiveSynchronizers()
    {
       List<SynchronizerConfiguration> result = new ArrayList<>();
-      for (SynchronizerConfiguration scan: getSynchronizer())
+      for (SynchronizerConfiguration sync: getSynchronizer())
       {
-         if (scan != null && scan.isActive())
+         if (sync != null && sync.isActive())
          {
-            result.add(scan);
+            result.add(sync);
          }
       }
       return result;
@@ -122,23 +122,40 @@ public class SynchronizerManager extends Synchronizers
 
    public SynchronizerConfiguration get(Long id)
    {
-      for (SynchronizerConfiguration scan: getSynchronizer())
+      for (SynchronizerConfiguration sync: getSynchronizer())
       {
-         if (scan != null && scan.getId() == id)
+         if (sync != null && sync.getId() == id)
          {
-            return (SynchronizerConfiguration) scan;
+            return (SynchronizerConfiguration) sync;
+         }
+      }
+      return null;
+   }
+   
+   /**
+    * Get a synchronize by its label
+    * @param label
+    * @return
+    */
+   public SynchronizerConfiguration get(String label)
+   {
+      for (SynchronizerConfiguration sync: getSynchronizer())
+      {
+         if (sync != null && sync.getLabel().equalsIgnoreCase(label))
+         {
+            return (SynchronizerConfiguration) sync;
          }
       }
       return null;
    }
 
-   public void delete(SynchronizerConfiguration scan)
+   public void delete(SynchronizerConfiguration syncConf)
    {
       synchronized(this)
       {
-         if (scan != null)
+         if (syncConf != null)
          {
-            getSynchronizer().remove(scan);
+            getSynchronizer().remove(syncConf);
             save();
          }
       }
diff --git a/core/src/main/java/fr/gael/dhus/network/ChannelClassifierRules.java b/core/src/main/java/fr/gael/dhus/network/ChannelClassifierRules.java
index 4395ae440..e41b83340 100644
--- a/core/src/main/java/fr/gael/dhus/network/ChannelClassifierRules.java
+++ b/core/src/main/java/fr/gael/dhus/network/ChannelClassifierRules.java
@@ -19,12 +19,25 @@
  */
 package fr.gael.dhus.network;
 
+import java.util.Collection;
+import java.util.Optional;
+
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.context.SecurityContext;
+import org.springframework.security.core.context.SecurityContextHolder;
+
 import fr.gael.dhus.database.object.User;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.system.config.ConfigurationManager;
 
 class ChannelClassifierRules
 {
    private String emailPattern = null;
    private String serviceName = null;
+   private String rolePattern = null;
+   
+   private ConfigurationManager cfgManager = ApplicationContextProvider.getBean(ConfigurationManager.class);
 
    boolean complyWith(ConnectionParameters parameters)
          throws IllegalArgumentException
@@ -36,24 +49,77 @@ class ChannelClassifierRules
                + " a null set of connextion parameters.");
       }
 
-      // Check email pattern (if any)
-      if (this.emailPattern != null)
+      if (!cfgManager.isGDPREnabled())
       {
+         // Check email pattern (if any)
+         if (this.emailPattern != null)
+         {
+            User user = parameters.getUser();
+            if (user == null)
+            {
+               return false;
+            }
+            String email = user.getEmail();
+
+            if (email == null)
+            {
+               return false;
+            }
+
+            if (!email.matches(this.emailPattern))
+            {
+               return false;
+            }
+         }
+      }
+         
+      // check role pattern (if any)
+      if (this.rolePattern != null)
+      {
+         boolean found = false;
          User user = parameters.getUser();
          if (user == null)
          {
-            return false;
+            return found;
          }
-         String email = user.getEmail();
-
-         if (email == null)
+         String[] roles = rolePattern.split(",");
+         if(roles.length <= 0)
          {
-            return false;
+            return found;
          }
-
-         if (!email.matches(this.emailPattern))
+         SecurityContext context = SecurityContextHolder.getContext();
+         if(context == null)
          {
-            return false;
+            return found;
+         }
+         Authentication authentication = context.getAuthentication();
+         if(authentication == null)
+         {
+            return found;
+         }
+         if(!((User)authentication.getPrincipal()).getUsername().equalsIgnoreCase(user.getUsername()))
+         {
+            return found;
+         }
+         Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
+         if(authorities == null || authorities.isEmpty())
+         {
+            return found;
+         }
+         for (String role : roles)
+         {
+            Optional<? extends GrantedAuthority> optional = authorities.stream()
+                                                                       .filter(authority -> authority != null && authority.getAuthority().equalsIgnoreCase(role))
+                                                                       .findFirst();
+            if(optional.isPresent())
+            {
+               found = true;
+               break;
+            }
+         }
+         if (!found)
+         {
+           return found;
          }
       }
 
@@ -108,11 +174,29 @@ class ChannelClassifierRules
       this.serviceName = service_name;
    }
 
+   public String getRolePattern()
+   {
+      return rolePattern;
+   }
+
+   public void setRolePattern(String rolePattern)
+   {
+      this.rolePattern = rolePattern;
+   }
+
    @Override
    public String toString()
    {
-      return "EmailPattern='" + this.emailPattern + "', Service='"
-            + this.serviceName + "'";
+      if (!cfgManager.isGDPREnabled())
+      {
+         return "EmailPattern='" + this.emailPattern + "', Service='"
+               + this.serviceName + "'";
+      }
+      else
+      {
+         return "RolePattern='" + this.rolePattern + "', Service='"
+               + this.serviceName + "'";
+      }
    }
 
 } // End ChannelClassifierRules class
diff --git a/core/src/main/java/fr/gael/dhus/network/Regulator.java b/core/src/main/java/fr/gael/dhus/network/Regulator.java
index b87a71a50..ab5124e5b 100644
--- a/core/src/main/java/fr/gael/dhus/network/Regulator.java
+++ b/core/src/main/java/fr/gael/dhus/network/Regulator.java
@@ -23,6 +23,7 @@ import java.util.concurrent.TimeUnit;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.apache.tomcat.util.digester.Rules;
 
 import fr.gael.dhus.database.object.User;
 import fr.gael.dhus.database.object.config.network.ChannelType;
@@ -205,6 +206,7 @@ class Regulator
 
                rules.setEmailPattern(include_type.getUserEmailPattern());
                rules.setServiceName(include_type.getService());
+               rules.setRolePattern(include_type.getRolePattern());
 
                classifier.addIncludeRules(rules);
             }
@@ -220,6 +222,7 @@ class Regulator
 
                rules.setEmailPattern(exclude_type.getUserEmailPattern());
                rules.setServiceName(exclude_type.getService());
+               rules.setRolePattern(exclude_type.getRolePattern());
 
                classifier.addExcludeRules(rules);
             }
diff --git a/core/src/main/java/fr/gael/dhus/olingo/ODataClient.java b/core/src/main/java/fr/gael/dhus/olingo/ODataClient.java
index b0930f848..7b2a3fab8 100755
--- a/core/src/main/java/fr/gael/dhus/olingo/ODataClient.java
+++ b/core/src/main/java/fr/gael/dhus/olingo/ODataClient.java
@@ -35,6 +35,9 @@ import java.util.List;
 import java.util.Map;
 import java.util.StringTokenizer;
 
+import java.nio.charset.StandardCharsets;
+import org.apache.commons.net.util.Base64;
+import org.apache.http.HttpHeaders;
 import org.apache.http.HttpResponse;
 import org.apache.http.auth.AuthScope;
 import org.apache.http.auth.UsernamePasswordCredentials;
@@ -584,6 +587,12 @@ public class ODataClient
       // `Accept` for GET, `Content-Type` for POST and PUT.
       get.addHeader("Accept", content_type.type ());
 
+      // Force basic auth in request
+      String auth = username + ":" + password;
+      byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
+      String authHeader = "Basic " + new String(encodedAuth);
+      get.setHeader(HttpHeaders.AUTHORIZATION, authHeader);
+
       InterruptibleHttpClient.MemoryIWC mem_iwc = new InterruptibleHttpClient.MemoryIWC();
 
       HttpResponse resp = httpClient.interruptibleRequest(get, mem_iwc, null);
diff --git a/core/src/main/java/fr/gael/dhus/olingo/v1/Model.java b/core/src/main/java/fr/gael/dhus/olingo/v1/Model.java
index 2978b28d0..c6eedd0e0 100644
--- a/core/src/main/java/fr/gael/dhus/olingo/v1/Model.java
+++ b/core/src/main/java/fr/gael/dhus/olingo/v1/Model.java
@@ -19,13 +19,38 @@
  */
 package fr.gael.dhus.olingo.v1;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;
+import org.apache.olingo.odata2.api.edm.FullQualifiedName;
+import org.apache.olingo.odata2.api.edm.provider.Association;
+import org.apache.olingo.odata2.api.edm.provider.AssociationSet;
+import org.apache.olingo.odata2.api.edm.provider.ComplexType;
+import org.apache.olingo.odata2.api.edm.provider.EdmProvider;
+import org.apache.olingo.odata2.api.edm.provider.EntityContainer;
+import org.apache.olingo.odata2.api.edm.provider.EntityContainerInfo;
+import org.apache.olingo.odata2.api.edm.provider.EntitySet;
+import org.apache.olingo.odata2.api.edm.provider.EntityType;
+import org.apache.olingo.odata2.api.edm.provider.Facets;
+import org.apache.olingo.odata2.api.edm.provider.FunctionImport;
+import org.apache.olingo.odata2.api.edm.provider.Property;
+import org.apache.olingo.odata2.api.edm.provider.Schema;
+import org.apache.olingo.odata2.api.edm.provider.SimpleProperty;
+import org.apache.olingo.odata2.api.exception.ODataException;
+
 import fr.gael.dhus.olingo.Security;
+import fr.gael.dhus.olingo.v1.entityset.AbstractEntitySet;
 import fr.gael.dhus.olingo.v1.entityset.AttributeEntitySet;
 import fr.gael.dhus.olingo.v1.entityset.ClassEntitySet;
 import fr.gael.dhus.olingo.v1.entityset.CollectionEntitySet;
 import fr.gael.dhus.olingo.v1.entityset.ConnectionEntitySet;
 import fr.gael.dhus.olingo.v1.entityset.DeletedProductEntitySet;
 import fr.gael.dhus.olingo.v1.entityset.EventEntitySet;
+import fr.gael.dhus.olingo.v1.entityset.EventSynchronizerEntitySet;
 import fr.gael.dhus.olingo.v1.entityset.IngestEntitySet;
 import fr.gael.dhus.olingo.v1.entityset.ItemEntitySet;
 import fr.gael.dhus.olingo.v1.entityset.NetworkEntitySet;
@@ -38,43 +63,22 @@ import fr.gael.dhus.olingo.v1.entityset.SynchronizerEntitySet;
 import fr.gael.dhus.olingo.v1.entityset.SystemRoleEntitySet;
 import fr.gael.dhus.olingo.v1.entityset.UserEntitySet;
 import fr.gael.dhus.olingo.v1.entityset.UserSynchronizerEntitySet;
-import fr.gael.dhus.olingo.v1.entityset.AbstractEntitySet;
-import fr.gael.dhus.olingo.v1.entityset.EventSynchronizerEntitySet;
 import fr.gael.dhus.olingo.v1.operations.AbstractOperation;
 import fr.gael.dhus.olingo.v1.operations.LockUser;
 import fr.gael.dhus.olingo.v1.operations.Sparql;
 import fr.gael.dhus.olingo.v1.operations.StartScanner;
 import fr.gael.dhus.olingo.v1.operations.StopScanner;
 import fr.gael.dhus.olingo.v1.operations.UnlockUser;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;
-import org.apache.olingo.odata2.api.edm.FullQualifiedName;
-import org.apache.olingo.odata2.api.edm.provider.Association;
-import org.apache.olingo.odata2.api.edm.provider.AssociationSet;
-import org.apache.olingo.odata2.api.edm.provider.ComplexType;
-import org.apache.olingo.odata2.api.edm.provider.EdmProvider;
-import org.apache.olingo.odata2.api.edm.provider.EntityContainer;
-import org.apache.olingo.odata2.api.edm.provider.EntityContainerInfo;
-import org.apache.olingo.odata2.api.edm.provider.EntitySet;
-import org.apache.olingo.odata2.api.edm.provider.EntityType;
-import org.apache.olingo.odata2.api.edm.provider.Facets;
-import org.apache.olingo.odata2.api.edm.provider.FunctionImport;
-import org.apache.olingo.odata2.api.edm.provider.Property;
-import org.apache.olingo.odata2.api.edm.provider.Schema;
-import org.apache.olingo.odata2.api.edm.provider.SimpleProperty;
-import org.apache.olingo.odata2.api.exception.ODataException;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.system.config.ConfigurationManager;
 
 /**
  * Builds an Entity Data Model (schema).
  */
 public class Model extends EdmProvider
 {
+   private static final ConfigurationManager CONFIG_MANAGER = ApplicationContextProvider.getBean(ConfigurationManager.class);
+   
    /** The namespace prefixes each entity in the Schema */
    public static final String NAMESPACE = "DHuS";
 
@@ -141,7 +145,10 @@ public class Model extends EdmProvider
       addEntitySet(NETWORKSTATISTIC);
       addEntitySet(RESTRICTION);
       addEntitySet(SYSTEM_ROLE);
-      addEntitySet(USER_SYNCHRONIZER);
+      if (!CONFIG_MANAGER.isGDPREnabled())
+      {
+         addEntitySet(USER_SYNCHRONIZER);
+      }
       addEntitySet(INGEST);
       addEntitySet(SCANNER);
       addEntitySet(EVENT);
@@ -157,8 +164,12 @@ public class Model extends EdmProvider
       OPERATIONS.put(SPARQL.getName(), SPARQL);
       OPERATIONS.put(START_SCANNER.getName(), START_SCANNER);
       OPERATIONS.put(STOP_SCANNER.getName(), STOP_SCANNER);
-      OPERATIONS.put(LOCK_USER.getName(), LOCK_USER);
-      OPERATIONS.put(UNLOCK_USER.getName(), UNLOCK_USER);
+
+      if (!CONFIG_MANAGER.isGDPREnabled())
+      {
+         OPERATIONS.put(LOCK_USER.getName(), LOCK_USER);
+         OPERATIONS.put(UNLOCK_USER.getName(), UNLOCK_USER);
+      }
    }
 
    private static void addEntitySet(AbstractEntitySet<?> entity_set)
diff --git a/core/src/main/java/fr/gael/dhus/olingo/v1/OlingoManager.java b/core/src/main/java/fr/gael/dhus/olingo/v1/OlingoManager.java
index 000f6e56b..711135b1d 100644
--- a/core/src/main/java/fr/gael/dhus/olingo/v1/OlingoManager.java
+++ b/core/src/main/java/fr/gael/dhus/olingo/v1/OlingoManager.java
@@ -146,13 +146,13 @@ public class OlingoManager
          int top) throws ExceptionVisitExpression, ODataApplicationException
    {
       UserSQLVisitor expV = new UserSQLVisitor(filter_expr, order_expr);
-      return userService.getUsers(expV, skip, top);
+      return userService.getUsers(expV.getHqlQuery(), expV.getHqlParameters(), skip, top);
    }
 
    public int getUsersNumber(FilterExpression filter_expr)
          throws ExceptionVisitExpression, ODataApplicationException
    {
       UserSQLVisitor expV = new UserSQLVisitor(filter_expr, null);
-      return userService.countUsers(expV);
+      return userService.countUsers(expV.getHqlQuery(), expV.getHqlParameters());
    }
 }
diff --git a/core/src/main/java/fr/gael/dhus/olingo/v1/Processor.java b/core/src/main/java/fr/gael/dhus/olingo/v1/Processor.java
index 08f5860d6..db406211f 100644
--- a/core/src/main/java/fr/gael/dhus/olingo/v1/Processor.java
+++ b/core/src/main/java/fr/gael/dhus/olingo/v1/Processor.java
@@ -610,7 +610,7 @@ public class Processor extends ODataSingleProcessor
          }
          else if (target_et.getName().equals(Model.USER_SYNCHRONIZER.getEntityName()))
          {
-            if (Model.USER_SYNCHRONIZER.isAuthorized(current_user))
+            if (!CONFIGURATION_MANAGER.isGDPREnabled() && Model.USER_SYNCHRONIZER.isAuthorized(current_user))
             {
                UserSynchronizer sync = new UserSynchronizer(entry);
                res = sync.toEntityResponse(makeLink().toString());
@@ -812,7 +812,7 @@ public class Processor extends ODataSingleProcessor
          }
          else if (target_entity.equals(Model.USER_SYNCHRONIZER.getEntityName()))
          {
-            if (Model.USER_SYNCHRONIZER.isAuthorized(current_user))
+            if (!CONFIGURATION_MANAGER.isGDPREnabled() && Model.USER_SYNCHRONIZER.isAuthorized(current_user))
             {
                long key = Long.decode(uri_info.getKeyPredicates().get(0).getLiteral());
                UserSynchronizer s = new UserSynchronizer(key);
@@ -893,7 +893,7 @@ public class Processor extends ODataSingleProcessor
       }
       else if (target_name.equals(Model.USER_SYNCHRONIZER.getEntityName()))
       {
-         if (Model.USER_SYNCHRONIZER.isAuthorized(current_user))
+         if (!CONFIGURATION_MANAGER.isGDPREnabled() && Model.USER_SYNCHRONIZER.isAuthorized(current_user))
          {
             long key = Long.decode(uri_info.getKeyPredicates().get(0).getLiteral());
             Synchronizer.delete(key); // using the same method to delete
diff --git a/core/src/main/java/fr/gael/dhus/olingo/v1/entity/Product.java b/core/src/main/java/fr/gael/dhus/olingo/v1/entity/Product.java
index 9bac062ea..d6b6c2292 100644
--- a/core/src/main/java/fr/gael/dhus/olingo/v1/entity/Product.java
+++ b/core/src/main/java/fr/gael/dhus/olingo/v1/entity/Product.java
@@ -77,8 +77,10 @@ import org.apache.olingo.odata2.api.processor.ODataSingleProcessor;
 import org.apache.olingo.odata2.api.uri.NavigationSegment;
 
 import org.dhus.store.datastore.async.AsyncDataStoreException;
+import org.dhus.ProductConstants;
 import org.dhus.metrics.DownloadMetrics;
 import org.dhus.store.datastore.async.AsyncProduct;
+import org.dhus.store.datastore.openstack.OpenStackProduct;
 import org.dhus.store.derived.DerivedProductStore;
 import org.dhus.store.derived.DerivedProductStoreService;
 import org.dhus.store.StoreException;
@@ -562,6 +564,15 @@ public class Product extends Node implements Closeable
          String user_name = (u == null ? null : u.getUsername());
          DownloadMetrics.DownloadActionListener metrics = null;
 
+         long length = getContentLength();
+         DataStoreProduct data = getPhysicalProduct();
+         // particular case of MOST scenario (product no more available in DHuS format but in uuid.zip format)
+         if (data instanceof OpenStackProduct && ((OpenStackProduct)data).getUUID() != null)
+         {
+            ((OpenStackProduct)data).prepareDownloadInformation();
+            length = (Long) data.getProperty(ProductConstants.DATA_SIZE);
+         }
+         
          InputStream is = null;
          if (attach_stream)
          {
@@ -580,7 +591,7 @@ public class Product extends Node implements Closeable
                      new RegulatedInputStream.Builder(is, TrafficDirection.OUTBOUND);
                builder.userName(user_name);
                builder.copyStreamListener(adapter);
-               builder.streamSize(getContentLength());
+               builder.streamSize(length);
 
                is = builder.build();
             }
@@ -597,20 +608,20 @@ public class Product extends Node implements Closeable
          {
             etag = getId();
          }
-
+         
          // Prepare the HTTP header for stream transfer.
          rsp = MediaResponseBuilder.prepareMediaResponse(
                etag, getPhysicalProduct().getName(),
                getContentType(),
                getCreationDate().getTime(),
-               getContentLength(),
+               length,
                processor.getContext(),
                is);
          if (metrics != null)
          {
             DL_METRICS.get().recordDownloadStart(getItemClass().getUri(), user_name);
             String contentLength = rsp.getHeader("Content-Length");
-            metrics.setRequestedBytes(contentLength != null ? Long.decode(contentLength) : getContentLength());
+            metrics.setRequestedBytes(contentLength != null ? Long.decode(contentLength) : length);
          }
       }
       // RegulationException must be handled separately as they are
diff --git a/core/src/main/java/fr/gael/dhus/olingo/v1/entity/Synchronizer.java b/core/src/main/java/fr/gael/dhus/olingo/v1/entity/Synchronizer.java
index 036501994..f911da3c0 100644
--- a/core/src/main/java/fr/gael/dhus/olingo/v1/entity/Synchronizer.java
+++ b/core/src/main/java/fr/gael/dhus/olingo/v1/entity/Synchronizer.java
@@ -177,6 +177,23 @@ public final class Synchronizer extends AbstractEntity
       {
          this.syncConf.setSkipOnError(Boolean.TRUE);
       }
+      
+      Boolean syncOfllineProducts = (Boolean) props.get(SynchronizerEntitySet.SYNC_OFFLINE_PRODUCTS);
+      if (syncOfllineProducts == null)
+      {
+         this.syncConf.setSyncOfflineProducts(Boolean.FALSE);
+      }
+      Integer retries = (Integer) props.get(SynchronizerEntitySet.RETRIES_SKIPPED_PRODUCTS);
+      if (retries == null)
+      {
+         this.syncConf.setRetriesForSkippedProducts(3);
+      }
+      //Timeout for skipped products in milliseconds
+      Integer timeout = (Integer) props.get(SynchronizerEntitySet.TIMEOUT_SKIPPED_PRODUCTS);
+      if (timeout == null)
+      {
+         this.syncConf.setTimeoutSkippedProducts(Long.valueOf(60000));
+      }
    }
 
    /**
@@ -224,6 +241,8 @@ public final class Synchronizer extends AbstractEntity
       Integer page_size = (Integer) props.remove(SynchronizerEntitySet.PAGE_SIZE);
       Boolean copy_product = (Boolean) props.remove(SynchronizerEntitySet.COPY_PRODUCT);
       Boolean skipOnError = (Boolean) props.remove(SynchronizerEntitySet.SKIP_ON_ERROR);
+      Integer retries = (Integer) props.remove(SynchronizerEntitySet.RETRIES_SKIPPED_PRODUCTS);
+      Integer timeout = (Integer) props.remove(SynchronizerEntitySet.TIMEOUT_SKIPPED_PRODUCTS);
 
       // Nullable fields
       boolean has_label = props.containsKey(SynchronizerEntitySet.LABEL);
@@ -245,6 +264,7 @@ public final class Synchronizer extends AbstractEntity
       GregorianCalendar last_ingestion_date =
             (GregorianCalendar) props.remove(SynchronizerEntitySet.LAST_CREATION_DATE);
       String geo_filter = (String) props.remove(SynchronizerEntitySet.GEO_FILTER);
+      Boolean syncOfflineProd = (Boolean) props.remove (SynchronizerEntitySet.SYNC_OFFLINE_PRODUCTS);
 
       // Navigation
       Collection target_collection = getTargetCollection(odata_entry);
@@ -359,6 +379,19 @@ public final class Synchronizer extends AbstractEntity
       {
          this.syncConf.setSkipOnError(skipOnError);
       }
+      if (syncOfflineProd != null)
+      {
+         this.syncConf.setSyncOfflineProducts(syncOfflineProd);
+      }
+      if(retries != null)
+      {
+         this.syncConf.setRetriesForSkippedProducts(retries);
+      }
+
+      if(timeout != null)
+      {
+         this.syncConf.setTimeoutSkippedProducts(Long.valueOf(timeout.longValue()));
+      }
 
       try
       {
@@ -394,6 +427,9 @@ public final class Synchronizer extends AbstractEntity
       res.put(SynchronizerEntitySet.SOURCE_COLLECTION, this.syncConf.getSourceCollection ());
       res.put(SynchronizerEntitySet.GEO_FILTER, getGeoFilter());
       res.put(SynchronizerEntitySet.SKIP_ON_ERROR, this.syncConf.isSkipOnError());
+      res.put(SynchronizerEntitySet.SYNC_OFFLINE_PRODUCTS, this.syncConf.isSyncOfflineProducts());
+      res.put(SynchronizerEntitySet.RETRIES_SKIPPED_PRODUCTS, this.syncConf.getRetriesForSkippedProducts());
+      res.put(SynchronizerEntitySet.TIMEOUT_SKIPPED_PRODUCTS, this.syncConf.getTimeoutSkippedProducts());
 
       XMLGregorianCalendar last_created = this.syncConf.getLastCreated();
       if (last_created != null)
@@ -491,6 +527,18 @@ public final class Synchronizer extends AbstractEntity
       {
          return this.syncConf.isSkipOnError();
       }
+      if (prop_name.equals(SynchronizerEntitySet.SYNC_OFFLINE_PRODUCTS))
+      {
+         return this.syncConf.isSyncOfflineProducts();
+      }
+      if (prop_name.equals(SynchronizerEntitySet.RETRIES_SKIPPED_PRODUCTS))
+      {
+         return this.syncConf.getRetriesForSkippedProducts();
+      }
+      if (prop_name.equals(SynchronizerEntitySet.TIMEOUT_SKIPPED_PRODUCTS))
+      {
+         return this.syncConf.getTimeoutSkippedProducts();
+      }
 
       throw new ODataException ("Unknown property " + prop_name);
    }
diff --git a/core/src/main/java/fr/gael/dhus/olingo/v1/entity/User.java b/core/src/main/java/fr/gael/dhus/olingo/v1/entity/User.java
index 25c05288b..80f2d5d60 100644
--- a/core/src/main/java/fr/gael/dhus/olingo/v1/entity/User.java
+++ b/core/src/main/java/fr/gael/dhus/olingo/v1/entity/User.java
@@ -37,17 +37,22 @@ import fr.gael.dhus.olingo.v1.map.impl.UserCartMap;
 import fr.gael.dhus.service.ProductCartService;
 import fr.gael.dhus.service.ProductService;
 import fr.gael.dhus.service.UserService;
+import fr.gael.dhus.service.exception.GDPREnabledException;
 import fr.gael.dhus.service.exception.RequiredFieldMissingException;
 import fr.gael.dhus.service.exception.RootNotModifiableException;
 import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.system.config.ConfigurationManager;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.StringTokenizer;
 
+import org.apache.olingo.commons.api.http.HttpStatusCode;
+import org.apache.olingo.odata2.api.commons.HttpStatusCodes;
 import org.apache.olingo.odata2.api.edm.Edm;
 import org.apache.olingo.odata2.api.edm.EdmEntitySet;
 import org.apache.olingo.odata2.api.ep.entry.ODataEntry;
@@ -59,6 +64,7 @@ import org.apache.olingo.odata2.api.uri.PathSegment;
 import org.apache.olingo.odata2.api.uri.UriInfo;
 import org.apache.olingo.odata2.api.uri.UriParser;
 import org.apache.olingo.odata2.api.uri.info.DeleteUriInfo;
+import org.apache.olingo.server.api.ODataApplicationException;
 
 /**
  * User Bean. A user on the DHuS.
@@ -75,6 +81,9 @@ public class User extends AbstractEntity
 
    private static final UserService USER_SERVICE =
          ApplicationContextProvider.getBean (UserService.class);
+   
+   private static ConfigurationManager CONFIG_MANAGER = 
+         ApplicationContextProvider.getBean(ConfigurationManager.class);
 
    protected final fr.gael.dhus.database.object.User user;
 
@@ -226,6 +235,10 @@ public class User extends AbstractEntity
       {
          USER_SERVICE.createUser(user);
       }
+      catch (GDPREnabledException ex)
+      {
+         throw new ExpectedException(ex.getMessage(), HttpStatusCodes.BAD_REQUEST);
+      }
       catch (RootNotModifiableException ex)
       {
          throw new ExpectedException("Root user cannot be updated");
@@ -287,21 +300,25 @@ public class User extends AbstractEntity
    @Override
    public Map<String, Object> toEntityResponse (String root_url)
    {
-      Map<String, Object> res = new HashMap<> ();
-      res.put (UserEntitySet.USERNAME, user.getUsername ());
-      res.put (UserEntitySet.EMAIL, user.getEmail ());
-      res.put (UserEntitySet.FIRSTNAME, user.getFirstname ());
-      res.put (UserEntitySet.LASTNAME, user.getLastname ());
-      res.put (UserEntitySet.COUNTRY, user.getCountry ());
-      res.put (UserEntitySet.PHONE, user.getPhone ());
-      res.put (UserEntitySet.ADDRESS, user.getAddress ());
-      res.put (UserEntitySet.DOMAIN, user.getDomain ());
-      res.put (UserEntitySet.SUBDOMAIN, user.getSubDomain ());
-      res.put (UserEntitySet.USAGE, user.getUsage ());
-      res.put (UserEntitySet.SUBUSAGE, user.getSubUsage ());
-      res.put(UserEntitySet.HASH, user.getPasswordEncryption().getAlgorithmKey());
-      res.put(UserEntitySet.PASSWORD, user.getPassword());
+      Map<String, Object> res = new HashMap<>();
+      res.put(UserEntitySet.USERNAME, user.getUsername());
       res.put(UserEntitySet.CREATED, user.getCreated());
+      
+      if (!CONFIG_MANAGER.isGDPREnabled())
+      {
+         res.put(UserEntitySet.HASH, user.getPasswordEncryption().getAlgorithmKey());
+         res.put(UserEntitySet.PASSWORD, user.getPassword());
+         res.put(UserEntitySet.EMAIL, user.getEmail());
+         res.put(UserEntitySet.FIRSTNAME, user.getFirstname());
+         res.put(UserEntitySet.LASTNAME, user.getLastname());
+         res.put(UserEntitySet.COUNTRY, user.getCountry());
+         res.put(UserEntitySet.PHONE, user.getPhone());
+         res.put(UserEntitySet.ADDRESS, user.getAddress());
+         res.put(UserEntitySet.DOMAIN, user.getDomain());
+         res.put(UserEntitySet.SUBDOMAIN, user.getSubDomain());
+         res.put(UserEntitySet.USAGE, user.getUsage());
+         res.put(UserEntitySet.SUBUSAGE, user.getSubUsage());
+      }
       return res;
    }
 
@@ -342,44 +359,47 @@ public class User extends AbstractEntity
    @Override
    public void updateFromEntry (ODataEntry entry) throws ODataException
    {
-      Map<String, Object> properties = entry.getProperties ();
+      Map<String, Object> properties = entry.getProperties();
 
+      if (CONFIG_MANAGER.isGDPREnabled())
+      {
+         throw new ODataException("GDPR enabled. User management not done by DHuS. Cannot update User.");
+      }
       // update email
-      String email = (String) properties.get (UserEntitySet.EMAIL);
-      if (email != null && !email.isEmpty ())
+      String email = (String) properties.get(UserEntitySet.EMAIL);
+      if (email != null && !email.isEmpty())
       {
          if (UserService.EMAIL_PATTERN.matcher(email).matches())
          {
-            this.user.setEmail (email);
+            this.user.setEmail(email);
          }
          else
          {
             throw new InvalidValueException(UserEntitySet.EMAIL, email);
          }
       }
-
       // update first name
-      String first_name = (String) properties.get (UserEntitySet.FIRSTNAME);
-      if (first_name != null && !first_name.isEmpty ())
+      String first_name = (String) properties.get(UserEntitySet.FIRSTNAME);
+      if (first_name != null && !first_name.isEmpty())
       {
-         this.user.setFirstname (first_name);
+         this.user.setFirstname(first_name);
       }
 
       // update last name
-      String last_name = (String) properties.get (UserEntitySet.LASTNAME);
-      if (last_name != null && !last_name.isEmpty ())
+      String last_name = (String) properties.get(UserEntitySet.LASTNAME);
+      if (last_name != null && !last_name.isEmpty())
       {
-         this.user.setLastname (last_name);
+         this.user.setLastname(last_name);
       }
 
       // update country
-      String country = (String) properties.get (UserEntitySet.COUNTRY);
-      if (country != null && !country.isEmpty ())
+      String country = (String) properties.get(UserEntitySet.COUNTRY);
+      if (country != null && !country.isEmpty())
       {
-         Country iso_country = USER_SERVICE.getCountry (country);
+         Country iso_country = USER_SERVICE.getCountry(country);
          if (iso_country != null)
          {
-            this.user.setCountry (iso_country.getName ());
+            this.user.setCountry(iso_country.getName());
          }
          else
          {
@@ -388,45 +408,45 @@ public class User extends AbstractEntity
       }
 
       // update phone
-      String phone = (String) properties.get (UserEntitySet.PHONE);
-      if (phone != null && !phone.isEmpty ())
+      String phone = (String) properties.get(UserEntitySet.PHONE);
+      if (phone != null && !phone.isEmpty())
       {
-         this.user.setPhone (phone);
+         this.user.setPhone(phone);
       }
 
       // update address
-      String address = (String) properties.get (UserEntitySet.ADDRESS);
-      if (address != null && !address.isEmpty ())
+      String address = (String) properties.get(UserEntitySet.ADDRESS);
+      if (address != null && !address.isEmpty())
       {
-         this.user.setAddress (address);
+         this.user.setAddress(address);
       }
 
       // update domain
-      String domain = (String) properties.get (UserEntitySet.DOMAIN);
-      if (domain != null && !domain.isEmpty ())
+      String domain = (String) properties.get(UserEntitySet.DOMAIN);
+      if (domain != null && !domain.isEmpty())
       {
-         this.user.setDomain (domain);
+         this.user.setDomain(domain);
       }
 
       // update sub-domain
-      String sub_domain = (String) properties.get (UserEntitySet.SUBDOMAIN);
-      if (sub_domain != null && !sub_domain.isEmpty ())
+      String sub_domain = (String) properties.get(UserEntitySet.SUBDOMAIN);
+      if (sub_domain != null && !sub_domain.isEmpty())
       {
-         this.user.setSubDomain (sub_domain);
+         this.user.setSubDomain(sub_domain);
       }
 
       // update usage
-      String usage = (String) properties.get (UserEntitySet.USAGE);
-      if (usage != null && !usage.isEmpty ())
+      String usage = (String) properties.get(UserEntitySet.USAGE);
+      if (usage != null && !usage.isEmpty())
       {
-         this.user.setUsage (usage);
+         this.user.setUsage(usage);
       }
 
       // update sub-usage
-      String sub_usage = (String) properties.get (UserEntitySet.SUBUSAGE);
-      if (sub_usage != null && !sub_usage.isEmpty ())
+      String sub_usage = (String) properties.get(UserEntitySet.SUBUSAGE);
+      if (sub_usage != null && !sub_usage.isEmpty())
       {
-         this.user.setSubUsage (sub_usage);
+         this.user.setSubUsage(sub_usage);
       }
 
       // update password
@@ -457,12 +477,17 @@ public class User extends AbstractEntity
       {
          if (Security.getCurrentUser().equals(this.user))
          {
-            USER_SERVICE.selfUpdateUser (this.user);
-         } else
+            USER_SERVICE.selfUpdateUser(this.user);
+         }
+         else
          {
-            USER_SERVICE.updateUser (this.user);
+            USER_SERVICE.updateUser(this.user);
          }
       }
+      catch (GDPREnabledException ex)
+      {
+         throw new ExpectedException(ex.getMessage(), HttpStatusCodes.BAD_REQUEST);
+      }
       catch (RootNotModifiableException e)
       {
          throw new ExpectedException("Cannot update root user !");
@@ -475,6 +500,10 @@ public class User extends AbstractEntity
 
    public static void delete(String username) throws ODataException
    {
+      if (CONFIG_MANAGER.isGDPREnabled())
+      {
+         throw new ODataException("GDPR enabled. User management not done by DHuS. Cannot delete User.");
+      }
       try
       {
          fr.gael.dhus.database.object.User user = USER_SERVICE.getUserByName(username);
@@ -483,6 +512,10 @@ public class User extends AbstractEntity
             USER_SERVICE.deleteUser(user.getUUID());
          }
       }
+      catch (GDPREnabledException ex)
+      {
+         throw new ExpectedException(ex.getMessage(), HttpStatusCodes.BAD_REQUEST);
+      }
       catch (RootNotModifiableException e)
       {
          throw new ExpectedException("Cannot delete root user");
diff --git a/core/src/main/java/fr/gael/dhus/olingo/v1/entityset/SynchronizerEntitySet.java b/core/src/main/java/fr/gael/dhus/olingo/v1/entityset/SynchronizerEntitySet.java
index e9f33cf55..c1ff4ef93 100755
--- a/core/src/main/java/fr/gael/dhus/olingo/v1/entityset/SynchronizerEntitySet.java
+++ b/core/src/main/java/fr/gael/dhus/olingo/v1/entityset/SynchronizerEntitySet.java
@@ -76,6 +76,9 @@ public class SynchronizerEntitySet extends AbstractEntitySet<Synchronizer>
    public static final String SOURCE_COLLECTION = "SourceCollection";
    public static final String GEO_FILTER = "GeoFilter";
    public static final String SKIP_ON_ERROR = "SkipOnError";
+   public static final String SYNC_OFFLINE_PRODUCTS = "SyncOfflineProducts";
+   public static final String RETRIES_SKIPPED_PRODUCTS = "RetriesForSkippedProducts";
+   public static final String TIMEOUT_SKIPPED_PRODUCTS = "TimeoutSkippedProducts";
 
    // Association (Navigation link)
    public static final FullQualifiedName ASSO_SYNC_COLLECTION =
@@ -171,6 +174,10 @@ public class SynchronizerEntitySet extends AbstractEntitySet<Synchronizer>
       properties.add(new SimpleProperty().setName(SKIP_ON_ERROR)
             .setType(EdmSimpleTypeKind.Boolean)
             .setFacets(new Facets().setNullable(false).setDefaultValue("true")));
+      
+      properties.add(new SimpleProperty().setName(SYNC_OFFLINE_PRODUCTS)
+            .setType(EdmSimpleTypeKind.Boolean)
+            .setFacets(new Facets().setNullable(false).setDefaultValue("false")));
 
       properties.add (new SimpleProperty ().setName (STATUS)
             .setType (EdmSimpleTypeKind.String)
@@ -182,6 +189,22 @@ public class SynchronizerEntitySet extends AbstractEntitySet<Synchronizer>
 
       properties.add (new SimpleProperty ().setName (STATUS_MESSAGE)
             .setType (EdmSimpleTypeKind.String));
+      
+      properties.add(new SimpleProperty().setName(RETRIES_SKIPPED_PRODUCTS)
+            .setType(EdmSimpleTypeKind.Int32)
+            .setFacets (
+                  new Facets ()
+                        .setNullable (false)
+                        .setDefaultValue ("3")
+            ));
+      
+      properties.add(new SimpleProperty().setName(TIMEOUT_SKIPPED_PRODUCTS)
+            .setType(EdmSimpleTypeKind.Int32)
+            .setFacets (
+                  new Facets ()
+                        .setNullable (false)
+                        .setDefaultValue ("60000")
+            ));
 
       // Navigation Properties
       List<NavigationProperty> navigationProperties = Collections.singletonList (
diff --git a/core/src/main/java/fr/gael/dhus/olingo/v1/map/impl/UserMap.java b/core/src/main/java/fr/gael/dhus/olingo/v1/map/impl/UserMap.java
index a4183ecd4..a695f307d 100644
--- a/core/src/main/java/fr/gael/dhus/olingo/v1/map/impl/UserMap.java
+++ b/core/src/main/java/fr/gael/dhus/olingo/v1/map/impl/UserMap.java
@@ -30,6 +30,8 @@ import fr.gael.dhus.service.UserService;
 import fr.gael.dhus.spring.context.ApplicationContextProvider;
 import fr.gael.dhus.util.functional.IteratorAdapter;
 
+import fr.gael.dhus.system.config.ConfigurationManager;
+
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.Map;
@@ -54,7 +56,8 @@ public class UserMap extends AbstractDelegatingMap<String, User>
       .getBean (OlingoManager.class);
    private final UserService userService = ApplicationContextProvider
       .getBean (UserService.class);
-
+   private ConfigurationManager CONFIG_MANAGER = 
+         ApplicationContextProvider.getBean(ConfigurationManager.class);
     private final FilterExpression filter;
     private final OrderByExpression orderBy;
     private final int skip;
@@ -86,7 +89,7 @@ public class UserMap extends AbstractDelegatingMap<String, User>
    {
       try
       {
-         if (!hasRole)
+         if (!hasRole || CONFIG_MANAGER.isGDPREnabled())
          {
             fr.gael.dhus.database.object.User u = Security.getCurrentUser();
             fr.gael.dhus.database.object.User user = userService.getUserNoCheck(u.getUsername());
@@ -106,7 +109,7 @@ public class UserMap extends AbstractDelegatingMap<String, User>
    @Override
    protected int serviceCount ()
    {
-      if (!hasRole)
+      if (!hasRole || CONFIG_MANAGER.isGDPREnabled())
       {
          return 1;
       }
diff --git a/core/src/main/java/fr/gael/dhus/olingo/v1/operations/LockUser.java b/core/src/main/java/fr/gael/dhus/olingo/v1/operations/LockUser.java
index 33402644a..225549b33 100644
--- a/core/src/main/java/fr/gael/dhus/olingo/v1/operations/LockUser.java
+++ b/core/src/main/java/fr/gael/dhus/olingo/v1/operations/LockUser.java
@@ -23,6 +23,7 @@ import fr.gael.dhus.database.object.Role;
 import fr.gael.dhus.database.object.User;
 import fr.gael.dhus.olingo.v1.ExpectedException;
 import fr.gael.dhus.service.UserService;
+import fr.gael.dhus.service.exception.GDPREnabledException;
 import fr.gael.dhus.service.exception.RootNotModifiableException;
 import fr.gael.dhus.spring.context.ApplicationContextProvider;
 
@@ -108,6 +109,10 @@ public class LockUser extends AbstractOperation
          }
          USER_SERVICE.lockUser(user, reason);
       }
+      catch (GDPREnabledException ex)
+      {
+         throw new ExpectedException(ex.getMessage(), HttpStatusCodes.BAD_REQUEST);
+      }
       catch (RootNotModifiableException ex)
       {
          throw new ExpectedException(ex.getMessage(), HttpStatusCodes.FORBIDDEN);
diff --git a/core/src/main/java/fr/gael/dhus/olingo/v1/operations/UnlockUser.java b/core/src/main/java/fr/gael/dhus/olingo/v1/operations/UnlockUser.java
index 28aa4e342..0ca01b206 100644
--- a/core/src/main/java/fr/gael/dhus/olingo/v1/operations/UnlockUser.java
+++ b/core/src/main/java/fr/gael/dhus/olingo/v1/operations/UnlockUser.java
@@ -23,6 +23,7 @@ import fr.gael.dhus.database.object.Role;
 import fr.gael.dhus.database.object.User;
 import fr.gael.dhus.olingo.v1.ExpectedException;
 import fr.gael.dhus.service.UserService;
+import fr.gael.dhus.service.exception.GDPREnabledException;
 import fr.gael.dhus.service.exception.RootNotModifiableException;
 import fr.gael.dhus.spring.context.ApplicationContextProvider;
 
@@ -112,6 +113,10 @@ public class UnlockUser extends AbstractOperation
             throw new ExpectedException("No restriction corresponding to given UUID '" + restriction + "' was found", HttpStatusCodes.BAD_REQUEST);
          }
       }
+      catch (GDPREnabledException ex)
+      {
+         throw new ExpectedException(ex.getMessage(), HttpStatusCodes.BAD_REQUEST);
+      }
       catch (RootNotModifiableException e)
       {
          throw new ExpectedException(e.getMessage(), HttpStatusCodes.FORBIDDEN);
diff --git a/core/src/main/java/fr/gael/dhus/olingo/v1/visitor/ProductFunctionalVisitor.java b/core/src/main/java/fr/gael/dhus/olingo/v1/visitor/ProductFunctionalVisitor.java
index 1d1cdbefa..2cbaef117 100644
--- a/core/src/main/java/fr/gael/dhus/olingo/v1/visitor/ProductFunctionalVisitor.java
+++ b/core/src/main/java/fr/gael/dhus/olingo/v1/visitor/ProductFunctionalVisitor.java
@@ -1,6 +1,6 @@
 /*
  * Data Hub Service (DHuS) - For Space data distribution.
- * Copyright (C) 2018,2019 GAEL Systems
+ * Copyright (C) 2018-2020 GAEL Systems
  *
  * This file is part of DHuS software sources.
  *
@@ -111,6 +111,12 @@ public class ProductFunctionalVisitor extends FunctionalVisitor
             throw new IllegalArgumentException("Property \"" + uri_literal + "\" is not filterable");
          }
 
+         case ProductEntitySet.ON_DEMAND:
+         {
+            res = (prod) -> prod.isOnDemand();
+            break;
+         }
+
          // Unsupported or invalid properties
          default:
          {
diff --git a/core/src/main/java/fr/gael/dhus/server/http/valve/AccessValve.java b/core/src/main/java/fr/gael/dhus/server/http/valve/AccessValve.java
index 9bbbca5c8..451569211 100644
--- a/core/src/main/java/fr/gael/dhus/server/http/valve/AccessValve.java
+++ b/core/src/main/java/fr/gael/dhus/server/http/valve/AccessValve.java
@@ -28,6 +28,8 @@ import fr.gael.dhus.spring.context.ApplicationContextProvider;
 import fr.gael.dhus.spring.context.SecurityContextProvider;
 import fr.gael.dhus.spring.security.CookieKey;
 import fr.gael.dhus.spring.security.authentication.ProxyWebAuthenticationDetails;
+import fr.gael.dhus.spring.security.saml.SAMLUtil;
+import fr.gael.dhus.system.config.ConfigurationManager;
 
 import java.io.IOException;
 import java.net.InetAddress;
@@ -65,6 +67,8 @@ public class AccessValve extends ValveBase
    private static final SecurityContextProvider SEC_CTX_PROVIDER =
          ApplicationContextProvider.getBean(SecurityContextProvider.class);
 
+   private static final ConfigurationManager cfg =
+         ApplicationContextProvider.getBean(ConfigurationManager.class);
    /**
     * Filter pattern is passed as Tomcat parameter.
     * It allows to focus on a specific path: i.e "^.*(/odata/v1/).*$"(odata only)
@@ -156,6 +160,14 @@ public class AccessValve extends ValveBase
             // Log of the pending request command.
             if (isUseLogger()) LOGGER.info ("Access " + ai);
 
+            // in case of GDPR + external_path (e.g. /dhus) + keycloak redirect
+            // this flag set to true will avoid creating a new session
+            // if a new session is created, then we lose the initial request url
+            // see JIRA [CEISM-245] [SD-4005] Wrong redirect URL to KeyCloak
+            if(cfg.isGDPREnabled())
+            {
+               request.setRequestedSessionSSL(true);
+            }
             getNext().invoke(request, response);
          }
          catch (Throwable e)
@@ -231,12 +243,19 @@ public class AccessValve extends ValveBase
          ai.setUsername(ctx.getAuthentication().getName());
       }
       else
-      {
-         String[] basicAuth = extractAndDecodeHeader(
-            request.getHeader("Authorization"));
+      {   
+         String[] basicAuth = extractAndDecodeHeader(request.getHeader("Authorization"));
          if (basicAuth!=null)
-            ai.setUsername(basicAuth[0]);
-      }
+         {
+            if (cfg.isGDPREnabled())
+            {
+               ai.setUsername(SAMLUtil.hash(basicAuth[0]));
+            }
+            else
+            {
+               ai.setUsername(basicAuth[0]);
+            }
+         }}
 
       if (request.getQueryString()!=null)
       {
diff --git a/core/src/main/java/fr/gael/dhus/server/http/webapp/saml/SamlWebapp.java b/core/src/main/java/fr/gael/dhus/server/http/webapp/saml/SamlWebapp.java
index 4d6cfa498..afaf8ed6e 100644
--- a/core/src/main/java/fr/gael/dhus/server/http/webapp/saml/SamlWebapp.java
+++ b/core/src/main/java/fr/gael/dhus/server/http/webapp/saml/SamlWebapp.java
@@ -19,8 +19,10 @@
  */
 package fr.gael.dhus.server.http.webapp.saml;
 
+import fr.gael.dhus.DHuS;
 import fr.gael.dhus.server.http.webapp.WebApp;
 import fr.gael.dhus.server.http.webapp.WebApplication;
+import fr.gael.dhus.system.config.ConfigurationManager;
 
 import java.io.File;
 import java.io.IOException;
@@ -30,7 +32,7 @@ import java.net.URL;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
 @Component
@@ -39,6 +41,9 @@ public class SamlWebapp extends WebApplication
 {
    private static final Logger LOGGER = LogManager.getLogger(SamlWebapp.class);
 
+   @Autowired
+   private ConfigurationManager cfgManager;
+   
    @Override
    public void configure(String dest_folder) throws IOException
    {
@@ -62,6 +67,13 @@ public class SamlWebapp extends WebApplication
       if (idPName == null || idPName.isEmpty())
       {
          LOGGER.warn("SamlWebapp can not be started as the 'dhus.saml.idp.name' is missing.");
+
+         // if GDPR is enabled, stop DHuS start as SSO is required.
+         if (cfgManager.isGDPREnabled())
+         {
+             LOGGER.error ("GDPR enabled without valid SSO configuration. DHuS cannot start.");
+             DHuS.stop(2);
+         }
          return false;
       }
 
@@ -76,10 +88,22 @@ public class SamlWebapp extends WebApplication
       catch (MalformedURLException e)
       {
          LOGGER.warn("SamlWebapp can not be started as the 'dhus.saml.idp.url' is not well formed.");
+         // if GDPR is enabled, stop DHuS start as SSO is required.
+         if (cfgManager.isGDPREnabled())
+         {
+             LOGGER.error ("GDPR enabled without valid SSO configuration. DHuS cannot start.");
+             DHuS.stop(2);
+         }
          return false;
       }
       if ((idpF == null || !idpF.exists()) && idpU == null)
       {
+         // if GDPR is enabled, stop DHuS start as SSO is required.
+         if (cfgManager.isGDPREnabled())
+         {
+             LOGGER.error ("GDPR enabled without valid SSO configuration. DHuS cannot start.");
+             DHuS.stop(2);
+         }
          LOGGER.warn("SamlWebapp can not be started as the metadata place is not defined (dhus.saml.idp.file/url).");
          return false;
       }
@@ -88,6 +112,12 @@ public class SamlWebapp extends WebApplication
       if (spId == null || spId.isEmpty())
       {
          LOGGER.warn("SamlWebapp can not be started as the 'dhus.saml.sp.id' is missing.");
+         // if GDPR is enabled, stop DHuS start as SSO is required.
+         if (cfgManager.isGDPREnabled())
+         {
+             LOGGER.error ("GDPR enabled without valid SSO configuration. DHuS cannot start.");
+             DHuS.stop(2);
+         }
          return false;
       }
 
@@ -96,6 +126,12 @@ public class SamlWebapp extends WebApplication
       if (ksF == null || !ksF.exists())
       {
          LOGGER.warn("SamlWebapp can not be started as the 'dhus.saml.keystore.file' is missing.");
+         // if GDPR is enabled, stop DHuS start as SSO is required.
+         if (cfgManager.isGDPREnabled())
+         {
+             LOGGER.error ("GDPR enabled without valid SSO configuration. DHuS cannot start.");
+             DHuS.stop(2);
+         }
          return false;
       }
 
@@ -103,6 +139,12 @@ public class SamlWebapp extends WebApplication
       if (keystorePass == null || keystorePass.isEmpty())
       {
          LOGGER.warn("SamlWebapp can not be started as the 'dhus.saml.keystore.storePass' is missing.");
+         // if GDPR is enabled, stop DHuS start as SSO is required.
+         if (cfgManager.isGDPREnabled())
+         {
+             LOGGER.error ("GDPR enabled without valid SSO configuration. DHuS cannot start.");
+             DHuS.stop(2);
+         }
          return false;
       }
 
@@ -110,6 +152,12 @@ public class SamlWebapp extends WebApplication
       if (keystoreDef == null || keystoreDef.isEmpty())
       {
          LOGGER.warn("SamlWebapp can not be started as the 'dhus.saml.keystore.defaultKey' is missing.");
+         // if GDPR is enabled, stop DHuS start as SSO is required.
+         if (cfgManager.isGDPREnabled())
+         {
+             LOGGER.error ("GDPR enabled without valid SSO configuration. DHuS cannot start.");
+             DHuS.stop(2);
+         }
          return false;
       }
 
@@ -117,6 +165,12 @@ public class SamlWebapp extends WebApplication
       if (keystoreDefPass == null || keystoreDefPass.isEmpty())
       {
          LOGGER.warn("SamlWebapp can not be started as the 'dhus.saml.keystore.defaultPassword' is missing.");
+         // if GDPR is enabled, stop DHuS start as SSO is required.
+         if (cfgManager.isGDPREnabled())
+         {
+             LOGGER.error ("GDPR enabled without valid SSO configuration. DHuS cannot start.");
+             DHuS.stop(2);
+         }
          return false;
       }
 
diff --git a/core/src/main/java/fr/gael/dhus/server/http/webapp/saml/controller/AuthController.java b/core/src/main/java/fr/gael/dhus/server/http/webapp/saml/controller/AuthController.java
index 6abaa3fcc..3aba4aa8e 100644
--- a/core/src/main/java/fr/gael/dhus/server/http/webapp/saml/controller/AuthController.java
+++ b/core/src/main/java/fr/gael/dhus/server/http/webapp/saml/controller/AuthController.java
@@ -20,6 +20,7 @@
 package fr.gael.dhus.server.http.webapp.saml.controller;
 
 import java.io.IOException;
+
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
@@ -30,6 +31,13 @@ import org.springframework.web.bind.annotation.RequestMethod;
 @Controller
 public class AuthController
 {
+   @RequestMapping(value = "/**", method = {RequestMethod.GET})
+   public void slashRedirect(HttpServletRequest req, HttpServletResponse res)
+         throws IOException
+   {
+      res.sendRedirect("../");
+   }
+   
    @RequestMapping(value = "/auth", method = {RequestMethod.POST})
    public void auth(String returnUrl, HttpServletRequest req, HttpServletResponse res)
          throws IOException
diff --git a/core/src/main/java/fr/gael/dhus/server/http/webapp/validation/ValidationWebapp.java b/core/src/main/java/fr/gael/dhus/server/http/webapp/validation/ValidationWebapp.java
index c18af9095..780df5587 100644
--- a/core/src/main/java/fr/gael/dhus/server/http/webapp/validation/ValidationWebapp.java
+++ b/core/src/main/java/fr/gael/dhus/server/http/webapp/validation/ValidationWebapp.java
@@ -24,15 +24,21 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.net.URL;
 
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 import org.springframework.stereotype.Component;
 
 import fr.gael.dhus.server.http.webapp.WebApp;
 import fr.gael.dhus.server.http.webapp.WebApplication;
+import fr.gael.dhus.server.http.webapp.saml.SamlWebapp;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.system.config.ConfigurationManager;
 
 @Component
 @WebApp(name = "validation")
 public class ValidationWebapp extends WebApplication
 {
+   private static final Logger LOGGER = LogManager.getLogger(ValidationWebapp.class);
    
    @Override
    public void configure(String dest_folder) throws IOException
@@ -50,6 +56,18 @@ public class ValidationWebapp extends WebApplication
          copyFolder(new File(u.getFile ()), webAppFolder);
       }
    }
+
+   @Override
+   public boolean isActive()
+   {
+      ConfigurationManager CONFIG_MANAGER = ApplicationContextProvider.getBean(ConfigurationManager.class);
+      if (CONFIG_MANAGER.isGDPREnabled())
+      {
+         LOGGER.info ("GDPR enabled. User management not done by DHuS. Validation web app disabled.");
+         return false;
+      }
+      return true;
+   }
    
    @Override
    public boolean hasWarStream ()
diff --git a/core/src/main/java/fr/gael/dhus/service/CollectionService.java b/core/src/main/java/fr/gael/dhus/service/CollectionService.java
index d0b5257a3..ac0a93b52 100644
--- a/core/src/main/java/fr/gael/dhus/service/CollectionService.java
+++ b/core/src/main/java/fr/gael/dhus/service/CollectionService.java
@@ -154,7 +154,7 @@ public class CollectionService extends WebService
    @CacheEvict (value = "products", allEntries = true)
    public void removeProducts (String uuid, Long[] pids)
    {
-      collectionDao.removeProducts (uuid, pids, null);
+      collectionDao.removeProducts (uuid, pids);
       long start = new Date ().getTime ();
       for (Long pid: pids)
       {
diff --git a/core/src/main/java/fr/gael/dhus/service/DeletedProductService.java b/core/src/main/java/fr/gael/dhus/service/DeletedProductService.java
index 46c3cb10b..671ff622a 100644
--- a/core/src/main/java/fr/gael/dhus/service/DeletedProductService.java
+++ b/core/src/main/java/fr/gael/dhus/service/DeletedProductService.java
@@ -30,7 +30,8 @@ import java.util.List;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
+import org.apache.olingo.server.api.ODataApplicationException;
+import org.dhus.olingo.v2.visitor.DeletedProductSqlVisitor;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Propagation;
@@ -61,6 +62,21 @@ public class DeletedProductService extends WebService
    {
       return deletedProductDao.executeHQLQuery(visitor.getHqlQuery(), visitor.getHqlParameters(), skip, top);
    }
+   
+   /**
+    * OData dedicated Services.
+    *
+    * @param visitor OData expression visitor
+    * @param skip $skip parameter
+    * @param top $top parameter
+    * @return a list of results
+    * @throws ODataApplicationException 
+    */
+   @Transactional(readOnly = true, propagation = Propagation.REQUIRED)
+   public List<DeletedProduct> getProducts(DeletedProductSqlVisitor visitor, int skip, int top) throws ODataApplicationException
+   {
+      return deletedProductDao.executeHQLQuery(visitor.getHqlQuery(), visitor.getHqlParameters(), skip, top);
+   }
 
    /**
     * OData dedicated Services.
diff --git a/core/src/main/java/fr/gael/dhus/service/EvictionService.java b/core/src/main/java/fr/gael/dhus/service/EvictionService.java
index 4e309444b..337f67928 100644
--- a/core/src/main/java/fr/gael/dhus/service/EvictionService.java
+++ b/core/src/main/java/fr/gael/dhus/service/EvictionService.java
@@ -19,18 +19,6 @@
  */
 package fr.gael.dhus.service;
 
-import com.codahale.metrics.MetricRegistry;
-import com.codahale.metrics.Timer;
-
-import fr.gael.dhus.database.object.DeletedProduct;
-import fr.gael.dhus.database.object.Product;
-import fr.gael.dhus.database.object.config.eviction.Eviction;
-import fr.gael.dhus.database.object.config.eviction.EvictionManager;
-import fr.gael.dhus.database.object.config.eviction.EvictionStatusEnum;
-import fr.gael.dhus.datastore.Destination;
-import fr.gael.dhus.service.eviction.EvictionScheduler;
-import fr.gael.dhus.system.config.ConfigurationManager;
-
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.List;
@@ -43,6 +31,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.dhus.store.StoreException;
 import org.dhus.store.StoreService;
+import org.dhus.store.datastore.DataStoreManager;
 import org.quartz.SchedulerException;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.access.prepost.PreAuthorize;
@@ -50,6 +39,19 @@ import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Propagation;
 import org.springframework.transaction.annotation.Transactional;
 
+import com.codahale.metrics.MetricRegistry;
+import com.codahale.metrics.Timer;
+
+import fr.gael.dhus.database.object.DeletedProduct;
+import fr.gael.dhus.database.object.Product;
+import fr.gael.dhus.database.object.config.eviction.Eviction;
+import fr.gael.dhus.database.object.config.eviction.EvictionBaseDate;
+import fr.gael.dhus.database.object.config.eviction.EvictionManager;
+import fr.gael.dhus.database.object.config.eviction.EvictionStatusEnum;
+import fr.gael.dhus.datastore.Destination;
+import fr.gael.dhus.service.eviction.EvictionScheduler;
+import fr.gael.dhus.system.config.ConfigurationManager;
+
 @Service
 public class EvictionService extends WebService
 {
@@ -63,6 +65,9 @@ public class EvictionService extends WebService
    /** DataStore Service called to delete data. */
    @Autowired
    private StoreService storeService;
+   
+   @Autowired
+   private DataStoreManager dataStoreManager;
 
    /* Monitoring. */
    @Autowired
@@ -134,6 +139,10 @@ public class EvictionService extends WebService
       return true;
    }
 
+   /**
+    * Called by OData v2 action
+    * Using defined targetDataStore and safeMode, ignoring default defined in specified Eviction.
+    */
    public void doEvict(String evictionName, String targetDataStore, Boolean safeMode)
    {
       if (queueEvict(evictionName))
@@ -143,18 +152,25 @@ public class EvictionService extends WebService
       }
    }
 
+   /**
+    * Called by Eviction Job
+    * Using default targetDataStore and safeMode defined in specified Eviction.
+    */
    public void doEvict(String evictionName)
    {
       if (queueEvict(evictionName))
       {
+         Eviction eviction = getEviction(evictionName);
          // queue eviction in the executor
-         executor.execute(() -> performTimedEviction(evictionName, null, Long.MAX_VALUE, false));
+         executor.execute(() -> performTimedEviction(evictionName, eviction.getTargetDataStore(), Long.MAX_VALUE, eviction.isSafeMode()));
       }
    }
 
    /**
     * Run customizable automatic eviction.
-    *
+    * Using defined dataStoreName as targetDatastore and forcing safeMode to false.
+    * Ignoring default values defined in specified Eviction.
+    * 
     * @param evictionName  name of the eviction that is in the configuration of the DataStore
     * @param dataStoreName name of the DataStore
     * @param dataSize      size to evict (in bytes) from the DataStore
@@ -198,6 +214,15 @@ public class EvictionService extends WebService
          LOGGER.warn("Eviction '{}' has been deleted, skipping", eviction);
          return 0L;
       }
+      if (dataStoreName != null && dataStoreManager.getDataStoreByName(dataStoreName) == null)
+      {
+         LOGGER.error("DataStore '{}' is unknown. Cannot perform an eviction on it.", dataStoreName);
+
+         // mark eviction as STOPPED
+         eviction.setStatus(EvictionStatusEnum.STOPPED);
+         evictionManager.save();
+         return 0L;
+      }
 
       String metric = MetricRegistry.name("eviction",
             evictionName,
@@ -226,20 +251,23 @@ public class EvictionService extends WebService
             // If a trashPath is present in the conf (dhus.xml), evicted products will be saved in the
             // trash folder before being removed
             String trashPath = cfgManager.getTrashPath();
-            final Destination destination =
-                  (trashPath != null && !"".equals(trashPath)) ? Destination.TRASH : Destination.NONE;
+            final Destination destination = (trashPath != null && !"".equals(trashPath)) ? Destination.TRASH : Destination.NONE;
 
             // mark eviction as STARTED
             eviction.setStatus(EvictionStatusEnum.STARTED);
             evictionManager.save();
 
-            // eviction triggered by datastore's autoeviction
+            String filter = eviction.getBaseDate() == EvictionBaseDate.CREATION_DATE ? 
+                buildFilterBasedOnCreationDate(eviction.getFilter(), getKeepPeriod(eviction.computeKeepPeriod())) :
+                buildFilter(eviction.getFilter(), getKeepPeriod(eviction.computeKeepPeriod()));
+            
+            // eviction targetting a specific datastore
             if (dataStoreName != null) // && dataSize > 0 ?
             {
                evictAtLeast = storeService.evictAtLeast(
                      dataSize,
                      dataStoreName,
-                     buildFilter(eviction.getFilter(), getKeepPeriod(eviction.computeKeepPeriod())),
+                     filter,
                      eviction.getOrderBy(),
                      eviction.getTargetCollection(),
                      eviction.getMaxEvictedProducts(),
@@ -252,13 +280,14 @@ public class EvictionService extends WebService
             else
             {
                storeService.evictProducts(
-                     buildFilter(eviction.getFilter(), getKeepPeriod(eviction.computeKeepPeriod())),
+                     filter,
                      eviction.getOrderBy(),
                      eviction.getTargetCollection(),
                      eviction.getMaxEvictedProducts(),
                      eviction.isSoftEviction(),
                      destination,
-                     DeletedProduct.AUTO_EVICTION);
+                     DeletedProduct.AUTO_EVICTION,
+                     safeMode);
             }
          }
       }
@@ -269,7 +298,10 @@ public class EvictionService extends WebService
       finally
       {
          // mark eviction as STOPPED
-         eviction.setStatus(EvictionStatusEnum.STOPPED);
+         if (eviction.getStatus().equals(EvictionStatusEnum.STARTED))
+         {
+            eviction.setStatus(EvictionStatusEnum.STOPPED);
+         }
          evictionManager.save();
       }
       return evictAtLeast;
@@ -301,6 +333,33 @@ public class EvictionService extends WebService
       }
       return newFilter;
    }
+   
+   /**
+    * Add the minimal keeping period for the evicted products to the OData filter.
+    *
+    * @param filter          optional additional filter
+    * @param maxCreationDate threshold date to filter products
+    * @return an OData filter
+    */
+   private String buildFilterBasedOnCreationDate(String filter, Date maxCreationDate)
+   {
+      if (filter == null && maxCreationDate == null)
+      {
+         return null;
+      }
+      if (maxCreationDate == null)
+      {
+         return filter;
+      }
+
+      String maxDate = DATE_FORMATTER.format(maxCreationDate);
+      String newFilter = "CreationDate lt datetime'" + maxDate + "'";
+      if (filter != null && !filter.trim().isEmpty())
+      {
+         newFilter += " and " + filter;
+      }
+      return newFilter;
+   }
 
    /**
     * Computes the date <i>span</i> ms ago.
diff --git a/core/src/main/java/fr/gael/dhus/service/ISynchronizerService.java b/core/src/main/java/fr/gael/dhus/service/ISynchronizerService.java
index 41b847f4a..992194989 100644
--- a/core/src/main/java/fr/gael/dhus/service/ISynchronizerService.java
+++ b/core/src/main/java/fr/gael/dhus/service/ISynchronizerService.java
@@ -188,4 +188,5 @@ public interface ISynchronizerService extends
     * <b>YOU MUST NOT CALL THIS METHOD!</b>
     */
    void init ();
+
 }
diff --git a/core/src/main/java/fr/gael/dhus/service/KeyStoreService.java b/core/src/main/java/fr/gael/dhus/service/KeyStoreService.java
index eb744fa27..c86620895 100644
--- a/core/src/main/java/fr/gael/dhus/service/KeyStoreService.java
+++ b/core/src/main/java/fr/gael/dhus/service/KeyStoreService.java
@@ -168,6 +168,19 @@ public class KeyStoreService
       return keyStoreEntryDao.getByUuid(uuid);
    }
 
+   /**
+    * Returns a non-null iterator of unaltered products KeyStoreEntries known to
+    * given KeyStore.
+    *
+    * @param keyStoreName name of KeyStore to query
+    * @return iterator of KeyStoreEntry
+    */
+   @Transactional(readOnly = true)
+   public Iterator<KeyStoreEntry> getUnalteredScrollableProductEntries(String keyStoreName)
+   {
+      return keyStoreEntryDao.getUnalteredScrollableProductEntries(keyStoreName, null, null);
+   }
+
    /**
     * Returns a non-null list of unaltered products KeyStoreEntries known to given KeyStore.
     *
diff --git a/core/src/main/java/fr/gael/dhus/service/OrderService.java b/core/src/main/java/fr/gael/dhus/service/OrderService.java
index 9717cc093..a71a1d52d 100644
--- a/core/src/main/java/fr/gael/dhus/service/OrderService.java
+++ b/core/src/main/java/fr/gael/dhus/service/OrderService.java
@@ -163,6 +163,18 @@ public class OrderService
       return orderDao.getOrdersByDataStore(dataStoreName, JobStatus.PENDING);
    }
 
+   /**
+    * Returns the list of product orders that are RUNNING in a specific DataStore.
+    *
+    * @param dataStoreName
+    * @return
+    */
+   @Transactional(readOnly = true)
+   public List<Order> getRunningOrdersByDataStore(String dataStoreName)
+   {
+      return orderDao.getOrdersByDataStore(dataStoreName, JobStatus.RUNNING);
+   }
+
    /**
     * Returns the number of product orders whose status is RUNNING from a specific DataStore.
     *
@@ -322,4 +334,16 @@ public class OrderService
    {
       return orderDao.getOrderByOrderId(orderId);
    }
+
+   /**
+    * Get an Order by its JobId.
+    *
+    * @param jobId a non null JobId
+    * @return an Order or null if not found
+    */
+   @Transactional(readOnly = true)
+   public Order getOrderByJobId(String jobId)
+   {
+      return orderDao.getOrderByJobId(jobId);
+   }
 }
diff --git a/core/src/main/java/fr/gael/dhus/service/ProductCartService.java b/core/src/main/java/fr/gael/dhus/service/ProductCartService.java
index 0f00f4399..9f7dcf63f 100644
--- a/core/src/main/java/fr/gael/dhus/service/ProductCartService.java
+++ b/core/src/main/java/fr/gael/dhus/service/ProductCartService.java
@@ -34,6 +34,8 @@ import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 
+import org.apache.olingo.server.api.ODataApplicationException;
+import org.dhus.olingo.v2.visitor.ProductSQLVisitor;
 import org.hibernate.Hibernate;
 
 import org.springframework.beans.factory.annotation.Autowired;
@@ -287,7 +289,7 @@ public class ProductCartService extends WebService
    }
 
    /**
-    * /User('x')/Products on OData.
+    * /User('x')/Products on OData V2.
     *
     * @param visitor Expression visitor having visited the Filter and Order expressions
     * @param uuid UUID of the user
@@ -319,6 +321,39 @@ public class ProductCartService extends WebService
       return productDao.executeHQLQuery(sb.toString(), visitor.getHqlParameters(), skip, top);
    }
 
+   /**
+    * /User('x')/Products on OData V4.
+    *
+    * @param visitor Expression visitor having visited the Filter and Order expressions
+    * @param uuid UUID of the user
+    * @return a non null list of products ordered and filtered
+    * @throws ODataApplicationException
+    */
+   @PreAuthorize("hasRole('ROLE_DOWNLOAD')")
+   @Transactional(readOnly = true)
+   public Iterator<Product> getCartProducts(ProductSQLVisitor visitor, String uuid)
+         throws ODataApplicationException
+   {
+      StringBuilder sb = new StringBuilder();
+      sb.append("select products from ProductCart as cart inner join cart.products as products ");
+
+      sb.append("where ");
+      String filter = visitor.getHqlFilter();
+      if (filter != null && !filter.isEmpty())
+      {
+         sb.append(filter).append(" and ");
+      }
+      sb.append("cart.user.uuid='").append(uuid).append('\'');
+
+      String order = visitor.getHqlOrder();
+      if (order != null && !order.isEmpty())
+      {
+         sb.append(" order by ").append(order);
+      }
+
+      return productDao.executeHQLQueryAndIterate(sb.toString(), visitor.getHqlParameters(), visitor.getSkip(), visitor.getTop());
+   }
+
    /**
     * Reports if the passed user has product in its cart.
     *
diff --git a/core/src/main/java/fr/gael/dhus/service/ProductService.java b/core/src/main/java/fr/gael/dhus/service/ProductService.java
index cff733387..af324ffa8 100644
--- a/core/src/main/java/fr/gael/dhus/service/ProductService.java
+++ b/core/src/main/java/fr/gael/dhus/service/ProductService.java
@@ -19,17 +19,6 @@
  */
 package fr.gael.dhus.service;
 
-import com.codahale.metrics.MetricRegistry;
-import com.codahale.metrics.Timer;
-
-import fr.gael.dhus.database.dao.ProductDao;
-import fr.gael.dhus.database.object.MetadataIndex;
-import fr.gael.dhus.database.object.Product;
-import fr.gael.dhus.datastore.exception.DataStoreException;
-import fr.gael.dhus.olingo.v1.visitor.ProductSQLVisitor;
-import fr.gael.dhus.spring.cache.AddProduct;
-import fr.gael.dhus.spring.cache.RemoveProduct;
-
 import java.util.Collections;
 import java.util.Date;
 import java.util.HashSet;
@@ -40,18 +29,14 @@ import java.util.Set;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
 import org.apache.olingo.server.api.ODataApplicationException;
-
 import org.dhus.metrics.Utils;
 import org.dhus.olingo.v2.visitor.SQLVisitorParameter;
 import org.dhus.store.LoggableProduct;
 import org.dhus.store.datastore.ProductNotFoundException;
-
 import org.hibernate.Hibernate;
 import org.hibernate.criterion.DetachedCriteria;
 import org.hibernate.criterion.Restrictions;
-
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.cache.annotation.CacheEvict;
 import org.springframework.cache.annotation.Cacheable;
@@ -60,6 +45,18 @@ import org.springframework.security.access.prepost.PreAuthorize;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
+import com.codahale.metrics.MetricRegistry;
+import com.codahale.metrics.Timer;
+
+import fr.gael.dhus.database.dao.PagedIterator;
+import fr.gael.dhus.database.dao.ProductDao;
+import fr.gael.dhus.database.object.MetadataIndex;
+import fr.gael.dhus.database.object.Product;
+import fr.gael.dhus.datastore.exception.DataStoreException;
+import fr.gael.dhus.olingo.v1.visitor.ProductSQLVisitor;
+import fr.gael.dhus.spring.cache.AddProduct;
+import fr.gael.dhus.spring.cache.RemoveProduct;
+
 /**
  * Product Service provides connected clients with a set of method
  * to interact with it.
@@ -212,6 +209,26 @@ public class ProductService extends WebService
             visitor.getHqlParameters(), collectionUuid, visitor.getSkip(), visitor.getTop());
    }
 
+   /**
+    * Returns an iterator over result products. Results are paginated.
+    *
+    * @param visitor : OData expression visitor
+    * @return Iterator over results
+    * @throws ODataApplicationException
+    */
+   @Transactional(readOnly = true)
+   public PagedIterator<Product> getProducts(org.dhus.olingo.v2.visitor.ProductSQLVisitor visitor)
+         throws ODataApplicationException
+   {
+      String hql = prepareHQLQuery(visitor.getHqlPrefix(), visitor.getHqlFilter(), visitor.getHqlOrder(), null);
+      if (hql == null)
+      {
+         Collections.emptyIterator();
+      }
+
+      return productDao.executeHQLQueryAndIterate(hql, visitor.getHqlParameters(), visitor.getSkip(), visitor.getTop());
+   }
+
    private List<Product> internalGetProducts(String hqlPrefix, String hqlFilter, String hqlOrder,
          List<SQLVisitorParameter> hqlParameters, String collectionUuid, int skip, int top)
    {
@@ -241,7 +258,7 @@ public class ProductService extends WebService
     * @return a list of String UUIDs
     */
    @Transactional(readOnly = true)
-   public List<LoggableProduct> getProductUUIDs(ProductSQLVisitor visitor, String collectionName, int skip, int top)
+   public List<LoggableProduct> getProductUUIDs(ProductSQLVisitor visitor, String collectionName, boolean safe, int skip, int top)
    {
       String collectionUUID = collectionService.getCollectionUUIDByName(collectionName);
       // No collection exist for given collection name, return an empty list
@@ -257,7 +274,23 @@ public class ProductService extends WebService
          return Collections.<LoggableProduct>emptyList();
       }
 
-      String hql = prepareHQLQuery(visitor.getHqlPrefix(), visitor.getHqlFilter(), visitor.getHqlOrder(), collectionUUID);
+     
+      String filter= visitor.getHqlFilter();
+      
+      if (safe)
+      {
+         if (filter == null)
+         {
+            filter = "";
+         }
+         else
+         {
+            filter += " and ";
+         }
+         filter += " ((SELECT COUNT(*) FROM fr.gael.dhus.database.object.KeyStoreEntry WHERE ENTRYKEY = UUID AND TAG='unaltered') > 1 )";
+      }
+      
+      String hql = prepareHQLQuery(visitor.getHqlPrefix(), filter, visitor.getHqlOrder(), collectionUUID);
       if (hql == null)
       {
          return Collections.emptyList();
diff --git a/core/src/main/java/fr/gael/dhus/service/SearchService.java b/core/src/main/java/fr/gael/dhus/service/SearchService.java
index 06106be4f..9343120b2 100644
--- a/core/src/main/java/fr/gael/dhus/service/SearchService.java
+++ b/core/src/main/java/fr/gael/dhus/service/SearchService.java
@@ -304,7 +304,7 @@ public class SearchService extends WebService
          while (it.hasNext())
          {
             SolrDocument doc = it.next();
-            Long pid = (Long) doc.get("id");
+            String pid = (String) doc.get("uuid");
             Product product = productService.systemGetProduct(pid);
             if (product == null)
             {
diff --git a/core/src/main/java/fr/gael/dhus/service/SynchronizerService.java b/core/src/main/java/fr/gael/dhus/service/SynchronizerService.java
index 0c601548c..53d4bcdd8 100755
--- a/core/src/main/java/fr/gael/dhus/service/SynchronizerService.java
+++ b/core/src/main/java/fr/gael/dhus/service/SynchronizerService.java
@@ -133,7 +133,7 @@ public class SynchronizerService implements ISynchronizerService
       }
       return null;
    }
-
+   
    @Override
    public Iterator<SynchronizerConfiguration> getSynchronizerConfs()
    {
@@ -334,6 +334,10 @@ public class SynchronizerService implements ISynchronizerService
       {
          if (sc instanceof UserSynchronizer)
          {
+            if(cfgManager.isGDPREnabled())
+            {
+               throw new InvokeSynchronizerException("GDPR enabled. UserSynchronizers are disabled.");
+            }
             return new ODataUserSynchronizer((UserSynchronizer) sc);
          }
          else if (sc instanceof ProductSynchronizer)
diff --git a/core/src/main/java/fr/gael/dhus/service/SystemService.java b/core/src/main/java/fr/gael/dhus/service/SystemService.java
index 8bed32237..dbc9007c1 100644
--- a/core/src/main/java/fr/gael/dhus/service/SystemService.java
+++ b/core/src/main/java/fr/gael/dhus/service/SystemService.java
@@ -75,6 +75,7 @@ import fr.gael.dhus.database.object.config.Configuration;
 import fr.gael.dhus.database.object.config.messaging.MailConfiguration;
 import fr.gael.dhus.database.object.config.search.SolrConfiguration;
 import fr.gael.dhus.database.object.config.system.SupportConfiguration;
+import fr.gael.dhus.service.exception.GDPREnabledException;
 import fr.gael.dhus.service.exception.UserBadEncryptionException;
 import fr.gael.dhus.spring.context.ApplicationContextProvider;
 import fr.gael.dhus.system.config.ConfigurationException;
@@ -175,8 +176,13 @@ public class SystemService extends WebService
    @Caching (evict = {
       @CacheEvict (value = "user", allEntries = true),
       @CacheEvict (value = "userByName", allEntries = true)})
-   public void changeRootPassword (String new_pwd, String old_pwd)
+   public void changeRootPassword (String new_pwd, String old_pwd) throws GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. No 'root' user defined.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. No 'root' user defined.");
+      }
       User root =
          userDao.getByName (
                cfgManager.getAdministratorConfiguration ().getName ());
diff --git a/core/src/main/java/fr/gael/dhus/service/UserService.java b/core/src/main/java/fr/gael/dhus/service/UserService.java
index 50b75e33e..cb889a1c3 100644
--- a/core/src/main/java/fr/gael/dhus/service/UserService.java
+++ b/core/src/main/java/fr/gael/dhus/service/UserService.java
@@ -1,6 +1,6 @@
 /*
  * Data Hub Service (DHuS) - For Space data distribution.
- * Copyright (C) 2013-2019 GAEL Systems
+ * Copyright (C) 2013-2020 GAEL Systems
  *
  * This file is part of DHuS software sources.
  *
@@ -19,34 +19,6 @@
  */
 package fr.gael.dhus.service;
 
-import fr.gael.dhus.database.dao.AccessRestrictionDao;
-import fr.gael.dhus.database.dao.CountryDao;
-import fr.gael.dhus.database.dao.SearchDao;
-import fr.gael.dhus.database.dao.UserDao;
-import fr.gael.dhus.database.object.Country;
-import fr.gael.dhus.database.object.Role;
-import fr.gael.dhus.database.object.Search;
-import fr.gael.dhus.database.object.User;
-import fr.gael.dhus.database.object.User.PasswordEncryption;
-import fr.gael.dhus.database.object.config.system.AdministratorConfiguration;
-import fr.gael.dhus.database.object.restriction.AccessRestriction;
-import fr.gael.dhus.database.object.restriction.LockedAccessRestriction;
-import fr.gael.dhus.messaging.mail.MailServer;
-import fr.gael.dhus.network.CurrentQuotas;
-import fr.gael.dhus.olingo.v1.visitor.UserSQLVisitor;
-import fr.gael.dhus.service.exception.EmailNotSentException;
-import fr.gael.dhus.service.exception.MalformedEmailException;
-import fr.gael.dhus.service.exception.RequiredFieldMissingException;
-import fr.gael.dhus.service.exception.RootNotModifiableException;
-import fr.gael.dhus.service.exception.UserBadEncryptionException;
-import fr.gael.dhus.service.exception.UserBadOldPasswordException;
-import fr.gael.dhus.service.exception.UserNotExistingException;
-import fr.gael.dhus.service.exception.UsernameBadCharacterException;
-import fr.gael.dhus.service.job.JobScheduler;
-import fr.gael.dhus.spring.context.ApplicationContextProvider;
-import fr.gael.dhus.spring.context.SecurityContextProvider;
-import fr.gael.dhus.system.config.ConfigurationManager;
-
 import java.security.MessageDigest;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -60,9 +32,8 @@ import java.util.regex.Pattern;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
+import org.dhus.olingo.v2.visitor.SQLVisitorParameter;
 import org.quartz.SchedulerException;
-
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.cache.Cache;
 import org.springframework.cache.CacheManager;
@@ -76,9 +47,37 @@ import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Propagation;
 import org.springframework.transaction.annotation.Transactional;
 
+import fr.gael.dhus.database.dao.AccessRestrictionDao;
+import fr.gael.dhus.database.dao.CountryDao;
+import fr.gael.dhus.database.dao.SearchDao;
+import fr.gael.dhus.database.dao.UserDao;
+import fr.gael.dhus.database.object.Country;
+import fr.gael.dhus.database.object.Role;
+import fr.gael.dhus.database.object.Search;
+import fr.gael.dhus.database.object.User;
+import fr.gael.dhus.database.object.User.PasswordEncryption;
+import fr.gael.dhus.database.object.config.system.AdministratorConfiguration;
+import fr.gael.dhus.database.object.restriction.AccessRestriction;
+import fr.gael.dhus.database.object.restriction.LockedAccessRestriction;
+import fr.gael.dhus.messaging.mail.MailServer;
+import fr.gael.dhus.network.CurrentQuotas;
+import fr.gael.dhus.service.exception.EmailNotSentException;
+import fr.gael.dhus.service.exception.GDPREnabledException;
+import fr.gael.dhus.service.exception.MalformedEmailException;
+import fr.gael.dhus.service.exception.RequiredFieldMissingException;
+import fr.gael.dhus.service.exception.RootNotModifiableException;
+import fr.gael.dhus.service.exception.SearchNotExistingException;
+import fr.gael.dhus.service.exception.UserBadEncryptionException;
+import fr.gael.dhus.service.exception.UserBadOldPasswordException;
+import fr.gael.dhus.service.exception.UserNotExistingException;
+import fr.gael.dhus.service.exception.UsernameBadCharacterException;
+import fr.gael.dhus.service.job.JobScheduler;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.spring.context.SecurityContextProvider;
+import fr.gael.dhus.system.config.ConfigurationManager;
+
 /**
- * User Service provides connected clients with a set of method to interact with
- * it.
+ * User Service provides connected clients with a set of method to interact with it.
  */
 @Service
 public class UserService extends WebService
@@ -114,7 +113,7 @@ public class UserService extends WebService
 
    @Autowired
    private SecurityContextProvider securityContextProvider;
-
+   
    /**
     * Pattern for username checking
     */
@@ -197,27 +196,29 @@ public class UserService extends WebService
    /**
     * Retrieves corresponding users at the given criteria.
     *
-    * @param visitor visitor contains filter and order of required collection.
+    * @param hqlQuery contains filter and order of required collection
+    * @param hqlParameters contains list of hqlParameters
     * @param skip    number of skipped valid results.
     * @param top     max of valid results.
     * @return a list of {@link User}
     */
    @Transactional(readOnly = true)
-   public List<User> getUsers(UserSQLVisitor visitor, int skip, int top)
+   public List<User> getUsers(String hqlQuery, List<SQLVisitorParameter> hqlParameters, int skip, int top)
    {
-      return userDao.executeHQLQuery(visitor.getHqlQuery(), visitor.getHqlParameters(), skip, top);
+      return userDao.executeHQLQuery(hqlQuery, hqlParameters, skip, top);
    }
 
    /**
     * Counts corresponding users at the given criteria.
     *
-    * @param visitor visitor contains filter of required collection.
+    * @param hqlQuery contains filter of required collection
+    * @param hqlParameters contains list of hqlParameters
     * @return number of corresponding users.
     */
    @Transactional(readOnly = true)
-   public int countUsers(UserSQLVisitor visitor)
+   public int countUsers(String hqlQuery, List<SQLVisitorParameter> hqlParameters)
    {
-      return userDao.countHQLQuery(visitor.getHqlQuery(), visitor.getHqlParameters());
+      return userDao.countHQLQuery(hqlQuery, hqlParameters);
    }
 
    @PreAuthorize ("hasRole('ROLE_STATS')")
@@ -237,8 +238,13 @@ public class UserService extends WebService
    @PreAuthorize ("hasRole('ROLE_USER_MANAGER')")
    @Transactional (readOnly=false, propagation=Propagation.REQUIRED)
    public void createUser (User user) throws RequiredFieldMissingException,
-      RootNotModifiableException, EmailNotSentException
+      RootNotModifiableException, EmailNotSentException, GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot create User.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. Cannot create User.");
+      }
       systemCreateUser(user);
    }
 
@@ -253,8 +259,13 @@ public class UserService extends WebService
    @Transactional(readOnly=false)
    @CacheEvict(value = "userByName", key = "#user?.getUsername().toLowerCase()")
    public void systemCreateUser(User user) throws RequiredFieldMissingException,
-      RootNotModifiableException, EmailNotSentException
+      RootNotModifiableException, EmailNotSentException, GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot create User.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. Cannot create User.");
+      }
       checkRequiredFields(user);
       checkRoot(user);
       userDao.create(user);
@@ -270,9 +281,24 @@ public class UserService extends WebService
    @CacheEvict(value = "userByName", key = "#user?.getUsername().toLowerCase()")
    public User systemCreateSSOUser(User user)
    {
-      return userDao.createWithoutMail(user);
+      return userDao.create(user);
    }
-
+   
+   /**
+    * Update given user provided by the SSO service.
+    *
+    * @param user to create
+    * @return created user
+    */
+   @Transactional (readOnly=false, propagation=Propagation.REQUIRED)
+   @Caching(evict = {
+      @CacheEvict(value = "user", key = "#user?.getUUID ()"),
+      @CacheEvict(value = "userByName", key = "#user?.username.toLowerCase()")})
+   public void systemUpdateSSOUser(User user)
+   {
+      userDao.update(user);
+   }
+   
    /**
     * Create given User as temporary User, after checking required fields.
     * 
@@ -282,8 +308,13 @@ public class UserService extends WebService
     */
    @Transactional (readOnly=false, propagation=Propagation.REQUIRED)
    public void createTmpUser (User user) throws RequiredFieldMissingException,
-      RootNotModifiableException, EmailNotSentException
+      RootNotModifiableException, EmailNotSentException, GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot create User.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. Cannot create User.");
+      }
       checkRequiredFields (user);
       checkRoot (user);
       userDao.createTmpUser (user);
@@ -296,8 +327,13 @@ public class UserService extends WebService
    }
 
    @Transactional (readOnly=false, propagation=Propagation.REQUIRED)
-   public void validateTmpUser (String code)
+   public void validateTmpUser (String code) throws GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot validate User account.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. Cannot validate User account.");
+      }
       User u = userDao.getUserFromUserCode (code);
       if (u != null && userDao.isTmpUser (u))
       {
@@ -331,8 +367,13 @@ public class UserService extends WebService
    }
 
    @Transactional (readOnly=true, propagation=Propagation.REQUIRED)
-   public boolean checkUserCodeForPasswordReset(String code)
+   public boolean checkUserCodeForPasswordReset(String code) throws GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS.");
+      }
       return userDao.getUserFromUserCode (code) != null;
    }
 
@@ -342,8 +383,14 @@ public class UserService extends WebService
       @CacheEvict(value = "userByName", allEntries = true)})
    public void resetPassword(String code, String new_password)
       throws RootNotModifiableException, RequiredFieldMissingException, 
-         EmailNotSentException
+         EmailNotSentException, GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot reset password.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. Cannot reset password.");
+      }
+      
       User u = userDao.getUserFromUserCode (code);
       if (u == null)
       {
@@ -370,68 +417,72 @@ public class UserService extends WebService
       @CacheEvict(value = "user", key = "#user?.getUUID ()"),
       @CacheEvict(value = "userByName", key = "#user?.username.toLowerCase()")})
    public void updateUser (User user) throws RootNotModifiableException,
-      RequiredFieldMissingException
+      RequiredFieldMissingException, GDPREnabledException
    {
-      User u = userDao.read (user.getUUID ());
-      boolean updateRoles = user.getRoles ().size () != u.getRoles ().size ();
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn("GDPR enabled. User management not done by DHuS. Cannot update User.");
+         throw new GDPREnabledException("GDPR enabled. User management not done by DHuS. Cannot update User.");
+      }
+      User u = userDao.read(user.getUUID());
+      boolean updateRoles = user.getRoles().size() != u.getRoles().size();
       if (!updateRoles)
       {
          int roleFound = 0;
-         for (Role r : u.getRoles ())
+         for (Role r : u.getRoles())
          {
-            if (user.getRoles ().contains (r))
+            if (user.getRoles().contains(r))
             {
                roleFound++;
             }
          }
-         updateRoles = roleFound != user.getRoles ().size ();
+         updateRoles = roleFound != user.getRoles().size();
       }
-      checkRoot (u);
-      u.setUsername (user.getUsername ());
-      u.setFirstname (user.getFirstname ());
-      u.setLastname (user.getLastname ());
-      u.setAddress (user.getAddress ());
-      u.setCountry (user.getCountry ());
-      u.setEmail (user.getEmail ());
-      u.setPhone (user.getPhone ());
-      u.setRoles (user.getRoles ());
-      u.setUsage (user.getUsage ());
-      u.setSubUsage (user.getSubUsage ());
-      u.setDomain (user.getDomain ());
-      u.setSubDomain (user.getSubDomain ());
+      checkRoot(u);
+      u.setRoles(user.getRoles());
+      u.setUsername(user.getUsername());
+      u.setFirstname(user.getFirstname());
+      u.setLastname(user.getLastname());
+      u.setAddress(user.getAddress());
+      u.setCountry(user.getCountry());
+      u.setEmail(user.getEmail());
+      u.setPhone(user.getPhone());
+      u.setUsage(user.getUsage());
+      u.setSubUsage(user.getSubUsage());
+      u.setDomain(user.getDomain());
+      u.setSubDomain(user.getSubDomain());
+      
       if (user.getPassword() != null)
       {
          // If password is null, it means client forgot to set it up.
          // it should never been set to null.
-         u.setEncryptedPassword(user.getPassword(),
-            user.getPasswordEncryption());
+         u.setEncryptedPassword(user.getPassword(), user.getPasswordEncryption());
       }
 
-      Set<AccessRestriction> restrictions = user.getRestrictions ();
-      Set<AccessRestriction> restrictionsToDelete = u.getRestrictions ();
-      if (u.getRestrictions () != null && user.getRestrictions () != null)
+      Set<AccessRestriction> restrictions = user.getRestrictions();
+      Set<AccessRestriction> restrictionsToDelete = u.getRestrictions();
+      if (u.getRestrictions() != null && user.getRestrictions() != null)
       {
-         for (AccessRestriction oldOne : u.getRestrictions ())
+         for (AccessRestriction oldOne : u.getRestrictions())
          {
-            for (AccessRestriction newOne : user.getRestrictions ())
+            for (AccessRestriction newOne : user.getRestrictions())
             {
-               if (oldOne.getBlockingReason ().equals (
-                  newOne.getBlockingReason ()))
+               if (oldOne.getBlockingReason().equals(newOne.getBlockingReason()))
                {
-                  restrictions.remove (newOne);
-                  restrictions.add (oldOne);
-                  restrictionsToDelete.remove (oldOne);
+                  restrictions.remove(newOne);
+                  restrictions.add(oldOne);
+                  restrictionsToDelete.remove(oldOne);
                }
                continue;
             }
          }
       }
 
-      u.setRestrictions (restrictions);
-      checkRequiredFields (u);
-      userDao.update (u);
+      u.setRestrictions(restrictions);
+      checkRequiredFields(u);
+      userDao.update(u);
 
-      if ((restrictions != null && !restrictions.isEmpty ()) || updateRoles)
+      if ((restrictions != null && !restrictions.isEmpty()) || updateRoles)
       {
          securityContextProvider.forceLogout(u.getUsername());
       }
@@ -440,52 +491,59 @@ public class UserService extends WebService
       {
          for (AccessRestriction restriction : restrictionsToDelete)
          {
-            accessRestrictionDao.delete (restriction);
+            accessRestrictionDao.delete(restriction);
          }
       }
 
       // Fix to mail user when admin updates his account
       // Temp : to move in mail class after
-       LOGGER.debug("User " + u.getUsername () + 
-       " Updated.");
-
-       if (cfgManager.getMailConfiguration ().isOnUserUpdate ())
-       {
-          String email = u.getEmail ();
-          // Do not send mail to system admin : never used
-          if (cfgManager.getAdministratorConfiguration ().getName ()
-                .equals (u.getUsername ()) && (email==null))
-             email = "dhus@gael.fr";
-
-          LOGGER.debug("Sending email to " + email);
-          if (email == null)
-             throw new UnsupportedOperationException (
-                "Missing Email in configuration: " +
-                 "Cannot inform modified user \"" + u.getUsername () + ".");
-
-          String message = new String (
-             "Dear " + getUserWelcome (u) + ",\n\nYour account on " +
-             cfgManager.getNameConfiguration ().getShortName () +
-             " has been updated by an administrator:\n" + u.toString () + "\n" +
-             "For help requests please write to: " +
-             cfgManager.getSupportConfiguration ().getMail () + "\n\n"+
-             "Kind regards,\n" +
-             cfgManager.getSupportConfiguration ().getName () + ".\n" +
-             cfgManager.getServerConfiguration ().getExternalUrl ());
-          String subject = new String ("Account " + u.getUsername () +
-                " updated");
-          try
-          {
-             mailer.send  (email, null, null, subject, message);
-          }
-          catch (Exception e)
-          {
-             throw new EmailNotSentException (
-                "Cannot send email to " + email, e);
-          }
-          LOGGER.debug("email sent.");
-       }
-
+      LOGGER.debug("User " + u.getUsername() + " Updated.");
+      sendUpdateMail(u);
+   }
+   
+   private void sendUpdateMail(User u)
+   {
+      if(cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. Cannot send emails.");
+         return;
+      }
+      if (cfgManager.getMailConfiguration ().isOnUserUpdate ())
+      {
+         String email = u.getEmail ();
+         // Do not send mail to system admin : never used
+         if (cfgManager.getAdministratorConfiguration ().getName ()
+               .equals (u.getUsername ()) && (email==null))
+            email = "dhus@gael.fr";
+
+         LOGGER.debug("Sending email to " + email);
+         if (email == null)
+            throw new UnsupportedOperationException (
+               "Missing Email in configuration: " +
+                "Cannot inform modified user \"" + u.getUsername () + ".");
+
+         String message = new String (
+            "Dear " + getUserWelcome (u) + ",\n\nYour account on " +
+            cfgManager.getNameConfiguration ().getShortName () +
+            " has been updated by an administrator:\n" + u.toString () + "\n" +
+            "For help requests please write to: " +
+            cfgManager.getSupportConfiguration ().getMail () + "\n\n"+
+            "Kind regards,\n" +
+            cfgManager.getSupportConfiguration ().getName () + ".\n" +
+            cfgManager.getServerConfiguration ().getExternalUrl ());
+         String subject = new String ("Account " + u.getUsername () +
+               " updated");
+         try
+         {
+            mailer.send  (email, null, null, subject, message);
+         }
+         catch (Exception e)
+         {
+            throw new EmailNotSentException (
+               "Cannot send email to " + email, e);
+         }
+         LOGGER.debug("email sent.");
+      }
    }
 
    /**
@@ -496,8 +554,13 @@ public class UserService extends WebService
     */
    @Transactional(readOnly=false)
    public void systemUpdateUser(User user) throws RootNotModifiableException,
-         RequiredFieldMissingException
+         RequiredFieldMissingException, GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot update User.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. Cannot update User.");
+      }
       checkRoot (user);
       userDao.update(user); // FIXME reproduce updateUser()?
    }
@@ -514,8 +577,13 @@ public class UserService extends WebService
       @CacheEvict(value = "user", allEntries = true),
       @CacheEvict(value = "userByName", allEntries = true)})
    public void deleteUser (String uuid) throws RootNotModifiableException,
-      EmailNotSentException
+      EmailNotSentException, GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot delete User.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. Cannot delete User.");
+      }
       User u = userDao.read (uuid);
       checkRoot (u);
       securityContextProvider.forceLogout(u.getUsername());
@@ -562,8 +630,13 @@ public class UserService extends WebService
       @CacheEvict(value = "user", key = "#user.getUUID ()"),
       @CacheEvict(value = "userByName", key = "#user.username.toLowerCase()")})
    public void selfUpdateUser (User user) throws RootNotModifiableException,
-      RequiredFieldMissingException, EmailNotSentException
+      RequiredFieldMissingException, EmailNotSentException, GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot update User.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. Cannot update User.");
+      }
       User u = userDao.read (user.getUUID ());
       checkRoot (u);
       u.setEmail (user.getEmail ());
@@ -589,8 +662,13 @@ public class UserService extends WebService
    public void selfChangePassword (String uuid, String old_password,
          String new_password) throws RootNotModifiableException,
          RequiredFieldMissingException, EmailNotSentException,
-         UserBadOldPasswordException
+         UserBadOldPasswordException, GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot update User.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. Cannot update User.");
+      }
       User u = userDao.read (uuid);
       checkRoot (u);
 
@@ -626,7 +704,7 @@ public class UserService extends WebService
 
    @PreAuthorize ("hasRole('ROLE_SEARCH')")
    @Transactional (readOnly=false, propagation=Propagation.REQUIRED)
-   public void storeUserSearch (String uuid, String search, String footprint,
+   public Search storeUserSearch (String uuid, String search, String footprint,
          HashMap<String, String> advanced, String complete)
    {
       User u = userDao.read (uuid);
@@ -638,16 +716,21 @@ public class UserService extends WebService
       {
          if (s.getComplete ().equals(complete))
          {
-            return;
+            return null;
          }            
       }
-      userDao.storeUserSearch (u, search, footprint, advanced, complete);
+      return userDao.storeUserSearch (u, search, footprint, advanced, complete);
    }
 
    @PreAuthorize ("hasRole('ROLE_SEARCH')")
    @Transactional (readOnly=false, propagation=Propagation.REQUIRED)
    public void removeUserSearch (String u_uuid, String uuid)
    {
+      Search s = searchDao.read(uuid);
+      if (s == null)
+      {
+         throw new SearchNotExistingException ("Search '"+uuid+"' does not exist.");
+      }
       User u = userDao.read (u_uuid);
       if (u == null)
       {
@@ -658,8 +741,13 @@ public class UserService extends WebService
 
    @PreAuthorize ("hasRole('ROLE_SEARCH')")
    @Transactional (readOnly=false, propagation=Propagation.REQUIRED)
-   public void activateUserSearchNotification (String uuid, boolean notify)
+   public void activateUserSearchNotification (String uuid, boolean notify) throws GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot send search results by mail.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. Cannot send search results by mail.");
+      }
       userDao.activateUserSearchNotification (uuid, notify);
    }
 
@@ -721,8 +809,13 @@ public class UserService extends WebService
    @Transactional (readOnly=true, propagation=Propagation.REQUIRED)
    public void forgotPassword (User user, String baseuri) 
       throws UserNotExistingException, RootNotModifiableException,
-         EmailNotSentException
+         EmailNotSentException, GDPREnabledException
    {
+      if(cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot reset password.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. Cannot reset password.");
+      }
       checkRoot (user);
       User checked = userDao.getByName (user.getUsername ());
       if (checked == null || !checked.getEmail ().toLowerCase ().
@@ -759,6 +852,11 @@ public class UserService extends WebService
    @Transactional (readOnly=true, propagation=Propagation.REQUIRED)
    private void checkRoot (User user) throws RootNotModifiableException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         // no root user with GDPR;
+         return;
+      }
       if (user == null) return;
       if (userDao.isRootUser (user))
       {
@@ -771,11 +869,13 @@ public class UserService extends WebService
       throws RequiredFieldMissingException, UsernameBadCharacterException,
       MalformedEmailException
    {
+      //FIXME: Update condition for GDPR activation
       if (user.getUsername () == null ||
          user.getUsername ().trim ().isEmpty () ||
          user.getPassword () == null ||
-         user.getPassword ().trim ().isEmpty () || user.getEmail () == null ||
-         user.getEmail ().trim ().isEmpty ())
+         user.getPassword ().trim ().isEmpty () || 
+         (!cfgManager.isGDPREnabled() && (user.getEmail () == null ||
+         user.getEmail ().trim ().isEmpty ())))
       {
          throw new RequiredFieldMissingException (
             "At least one required field is empty.");
@@ -797,13 +897,13 @@ public class UserService extends WebService
    @Transactional (readOnly=true, propagation=Propagation.REQUIRED)
    private String getUserWelcome (User u)
    {
-      String firstname = u.getUsername ();
+      String firstname = u.getUsername();
       String lastname = "";
-      if (u.getFirstname () != null && !u.getFirstname().trim ().isEmpty ())
+      if (u.getFirstname() != null && !u.getFirstname().trim().isEmpty())
       {
-         firstname = u.getFirstname ();
-         if (u.getLastname () != null && !u.getLastname().trim ().isEmpty ())
-            lastname = " " + u.getLastname ();
+         firstname = u.getFirstname();
+         if (u.getLastname() != null && !u.getLastname().trim().isEmpty())
+            lastname = " " + u.getLastname();
       }
       return firstname + lastname;
    }
@@ -816,11 +916,11 @@ public class UserService extends WebService
 
    @PreAuthorize ("isAuthenticated ()")
    @Transactional (readOnly=true, propagation=Propagation.REQUIRED)
-   public User getCurrentUserInformation () throws RootNotModifiableException
+   public User getCurrentUserInformation ()
    {
       User u = securityService.getCurrentUser ();
       if (u == null) return null;
-      return getUserByName(u.getUUID ());
+      return getUserNoCheck(u.getUsername());
    }
 
    /**
@@ -928,12 +1028,19 @@ public class UserService extends WebService
       @CacheEvict(value = "user", key = "#user?.getUUID()"),
       @CacheEvict(value = "userByName", key = "#user?.username.toLowerCase()")
    })
-   public void lockUser(User user, String reason) throws RootNotModifiableException, UserNotExistingException
+   public LockedAccessRestriction lockUser(User user, String reason) throws RootNotModifiableException, UserNotExistingException, GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot lock User.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. Cannot lock User.");
+      }
       LockedAccessRestriction accessRestriction = new LockedAccessRestriction();
       accessRestriction.setBlockingReason(reason);
       user.addRestriction(accessRestriction);
       userDao.update(user);
+      sendUpdateMail(user);
+      return accessRestriction;
    }
 
    @PreAuthorize("hasRole('ROLE_USER_MANAGER')")
@@ -943,8 +1050,13 @@ public class UserService extends WebService
       @CacheEvict(value = "user", key = "#user?.getUUID()"),
       @CacheEvict(value = "userByName", key = "#user?.username.toLowerCase()")
    })
-   public boolean unlockUser(User user, String restrictionUUID) throws RootNotModifiableException, UserNotExistingException
+   public boolean unlockUser(User user, String restrictionUUID) throws RootNotModifiableException, UserNotExistingException, GDPREnabledException
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot unlock User.");
+         throw new GDPREnabledException ("GDPR enabled. User management not done by DHuS. Cannot unlock User.");
+      }
       AccessRestriction toRemove = null;
       for (AccessRestriction accessRestriction: user.getRestrictions())
       {
@@ -961,6 +1073,7 @@ public class UserService extends WebService
       user.getRestrictions().remove(toRemove);
       userDao.update(user);
       accessRestrictionDao.delete(toRemove);
+      sendUpdateMail(user);
       return true;
    }
 
@@ -970,6 +1083,11 @@ public class UserService extends WebService
    @Transactional
    public void systemCreateOrUpdateRootAccount()
    {
+      if (cfgManager.isGDPREnabled())
+      {
+         LOGGER.info ("GDPR enabled. User management not done by DHuS. No need to create 'root' user.");
+         return;
+      }
       // Root account
       AdministratorConfiguration cfg = cfgManager.getAdministratorConfiguration();
       User rootUser = userDao.getByName(cfg.getName());
diff --git a/core/src/main/java/fr/gael/dhus/service/eviction/EvictionJob.java b/core/src/main/java/fr/gael/dhus/service/eviction/EvictionJob.java
index 1bbd98a52..3ace95ab1 100644
--- a/core/src/main/java/fr/gael/dhus/service/eviction/EvictionJob.java
+++ b/core/src/main/java/fr/gael/dhus/service/eviction/EvictionJob.java
@@ -19,6 +19,7 @@
  */
 package fr.gael.dhus.service.eviction;
 
+import fr.gael.dhus.DHuS;
 import fr.gael.dhus.service.EvictionService;
 import fr.gael.dhus.spring.context.ApplicationContextProvider;
 
@@ -36,8 +37,14 @@ public class EvictionJob implements Job
    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException
    {
-      LOGGER.info("Scheduled eviction job started");
       String evictionName = context.getJobDetail().getKey().getName();
+      LOGGER.info("SCHEDULER : Eviction job '{}'.",evictionName);
+      if (!DHuS.isStarted ())
+      {
+         LOGGER.warn("SCHEDULER : Not run while system not fully initialized.");
+         return;
+      }
       ApplicationContextProvider.getBean(EvictionService.class).doEvict(evictionName);
+      LOGGER.info("SCHEDULER : Eviction job '{}' queued - ",evictionName);
    }
 }
diff --git a/core/src/main/java/fr/gael/dhus/service/exception/GDPREnabledException.java b/core/src/main/java/fr/gael/dhus/service/exception/GDPREnabledException.java
new file mode 100644
index 000000000..0ac2e28c1
--- /dev/null
+++ b/core/src/main/java/fr/gael/dhus/service/exception/GDPREnabledException.java
@@ -0,0 +1,34 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2021 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package fr.gael.dhus.service.exception;
+
+public class GDPREnabledException extends Exception
+{
+   private static final long serialVersionUID = 2303930837675080635L;
+
+   public GDPREnabledException()
+   {}
+   
+   public GDPREnabledException(String msg)
+   {
+      super(msg);
+   }
+   
+}
diff --git a/core/src/main/java/fr/gael/dhus/service/exception/SearchNotExistingException.java b/core/src/main/java/fr/gael/dhus/service/exception/SearchNotExistingException.java
new file mode 100644
index 000000000..38737c150
--- /dev/null
+++ b/core/src/main/java/fr/gael/dhus/service/exception/SearchNotExistingException.java
@@ -0,0 +1,34 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2013,2014,2015 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package fr.gael.dhus.service.exception;
+
+public class SearchNotExistingException extends RuntimeException
+{
+   private static final long serialVersionUID = -5673920754293741253L;
+
+   public SearchNotExistingException()
+   {}
+   
+   public SearchNotExistingException(String msg)
+   {
+      super(msg);
+   }
+   
+}
diff --git a/core/src/main/java/fr/gael/dhus/service/job/SearchesJob.java b/core/src/main/java/fr/gael/dhus/service/job/SearchesJob.java
index 6b9cd8e47..274106779 100644
--- a/core/src/main/java/fr/gael/dhus/service/job/SearchesJob.java
+++ b/core/src/main/java/fr/gael/dhus/service/job/SearchesJob.java
@@ -83,7 +83,7 @@ public class SearchesJob extends AbstractJob
    protected void executeInternal (JobExecutionContext arg0)
       throws JobExecutionException
    {
-      if (!configurationManager.getSearchesCronConfiguration ().isActive ())
+      if (!configurationManager.getSearchesCronConfiguration ().isActive () || configurationManager.isGDPREnabled())
          return;
       long time_start = System.currentTimeMillis ();
       LOGGER.info("SCHEDULER : User searches mailings.");
diff --git a/core/src/main/java/fr/gael/dhus/spring/context/SecurityContextProvider.java b/core/src/main/java/fr/gael/dhus/spring/context/SecurityContextProvider.java
index eb824fefe..225c10c36 100644
--- a/core/src/main/java/fr/gael/dhus/spring/context/SecurityContextProvider.java
+++ b/core/src/main/java/fr/gael/dhus/spring/context/SecurityContextProvider.java
@@ -88,6 +88,31 @@ public class SecurityContextProvider
       getCache().remove(key);
    }
 
+   public SecurityContext getSecurityContextByUsername(final String userName)
+   {
+      if (userName == null)
+      {
+         return null;
+      }
+      final Cache cache = getCache();
+      final List<?> keys = cache.getKeysWithExpiryCheck();
+      for (Object key : keys)
+      {
+         final Object value = cache.get(key).getObjectValue();
+         if (value instanceof SecurityContext)
+         {
+            SecurityContext sc = (SecurityContext) value;
+            final Authentication auth = sc.getAuthentication();
+            if (auth != null && userName.contentEquals(auth.getName()))
+            {
+               return sc;
+            }
+         }
+      }
+
+      return null;
+   }
+
    public void forceLogout(String userName)
    {
       if (userName == null)
@@ -119,4 +144,27 @@ public class SecurityContextProvider
          }
       }
    }
+   
+   public void forceLogoutAllUsers()
+   {
+      List keys = getCache().getKeysWithExpiryCheck();
+
+      for (Object key: keys)
+      {
+         if (getCache().isKeyInCache(key))
+         {
+            Object value = getCache().get(key).getObjectValue();
+            if (value instanceof SecurityContext)
+            {
+               SecurityContext securityContext = (SecurityContext) value;
+               securityContext.setAuthentication(null);
+               getCache().remove(key);
+            }
+            else // if not SecurityContext, delete it !
+            {
+               getCache().remove(key);
+            }
+         }
+      }
+   }
 }
diff --git a/core/src/main/java/fr/gael/dhus/spring/security/authentication/DefaultAuthenticationProvider.java b/core/src/main/java/fr/gael/dhus/spring/security/authentication/DefaultAuthenticationProvider.java
index 9d942b470..3e47b6adf 100644
--- a/core/src/main/java/fr/gael/dhus/spring/security/authentication/DefaultAuthenticationProvider.java
+++ b/core/src/main/java/fr/gael/dhus/spring/security/authentication/DefaultAuthenticationProvider.java
@@ -44,6 +44,8 @@ import fr.gael.dhus.database.object.User;
 import fr.gael.dhus.database.object.User.PasswordEncryption;
 import fr.gael.dhus.database.object.restriction.AccessRestriction;
 import fr.gael.dhus.service.UserService;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.system.config.ConfigurationManager;
 
 @Component
 public class DefaultAuthenticationProvider implements AuthenticationProvider
@@ -56,6 +58,9 @@ public class DefaultAuthenticationProvider implements AuthenticationProvider
    @Autowired
    private UserService userService;
 
+   private static final ConfigurationManager cfg =
+         ApplicationContextProvider.getBean(ConfigurationManager.class);
+
    @Override
    @Transactional (propagation=Propagation.REQUIRED)
    public Authentication authenticate (Authentication authentication)
@@ -127,6 +132,10 @@ public class DefaultAuthenticationProvider implements AuthenticationProvider
    @Override
    public boolean supports (Class<?> authentication)
    {
+      if (cfg.isGDPREnabled())
+      {
+         return false;
+      }
       return UsernamePasswordAuthenticationToken.class
          .isAssignableFrom (authentication);
    }
diff --git a/core/src/main/java/fr/gael/dhus/spring/security/filter/GDPRAuthFilter.java b/core/src/main/java/fr/gael/dhus/spring/security/filter/GDPRAuthFilter.java
new file mode 100644
index 000000000..d9884dbf1
--- /dev/null
+++ b/core/src/main/java/fr/gael/dhus/spring/security/filter/GDPRAuthFilter.java
@@ -0,0 +1,384 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2013,2014,2015,2017 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package fr.gael.dhus.spring.security.filter;
+
+import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.StringTokenizer;
+
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.http.Header;
+import org.apache.http.HeaderElement;
+import org.apache.http.HttpResponse;
+import org.apache.http.HttpStatus;
+import org.apache.http.NameValuePair;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.entity.UrlEncodedFormEntity;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.impl.client.HttpClientBuilder;
+import org.apache.http.message.BasicNameValuePair;
+import org.apache.http.util.EntityUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.web.PortResolver;
+import org.springframework.security.web.PortResolverImpl;
+import org.springframework.security.web.savedrequest.DefaultSavedRequest;
+import org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder;
+import org.springframework.web.filter.GenericFilterBean;
+
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.spring.context.SecurityContextProvider;
+import fr.gael.dhus.spring.security.CookieKey;
+import fr.gael.dhus.spring.security.saml.SAMLSavedRequestCache;
+import fr.gael.dhus.system.config.ConfigurationManager;
+
+public class GDPRAuthFilter extends GenericFilterBean 
+{
+   private static final Logger LOGGER = LogManager.getLogger(GDPRAuthFilter.class);
+
+   private final static String HEADER_CONTENT_TYPE = "Content-type";
+   private final static String HEADER_CONTENT_TYPE_URL_ENCODED = "application/x-www-form-urlencoded";
+   private final static String EQUAL = "=";
+   private final static String SEMICOLON = ";";
+   private final static String SAML_REQUEST = "SAMLRequest";
+   private final static String SAML_RESPONSE = "SAMLResponse";
+   private final static String FORM_ACTION = "action";
+   private final static String FORM_NAME = "name";
+   private final static String FORM_VALUE = "value";
+   private final static String FORM_USERNAME = "username";
+   private final static String FORM_PASSWORD = "password";
+   private final static String HEADER_COOKIE = "Cookie";
+   private final static String HEADER_SET_COOKIE = "Set-Cookie";
+   private final static String HEADER_LOCATION = "Location";
+   private final static String HEADER_AUTHORIZATION = "Authorization";
+   private final static String HEADER_AUTHORIZATION_BASIC = "Basic";
+
+   private static final ConfigurationManager cfg =
+         ApplicationContextProvider.getBean(ConfigurationManager.class);
+   private static final SecurityContextProvider SEC_CTX_PROVIDER =
+         ApplicationContextProvider.getBean(SecurityContextProvider.class);
+
+   @Autowired 
+   private SAMLSavedRequestCache requestCache;
+
+   private PortResolver portResolver = new PortResolverImpl();
+   /**
+    * Try to authenticate a pre-authenticated user with Spring Security if the
+    * user has not yet been authenticated.
+    */
+   public void doFilter (ServletRequest request, ServletResponse response,
+      FilterChain chain) throws IOException, ServletException
+   {
+      if (cfg.isGDPREnabled() && authenticationIsRequired()) 
+      {
+         HttpServletRequest req = (HttpServletRequest)request;
+         String authHeader = req.getHeader(HEADER_AUTHORIZATION);
+         String extPath = cfg.getServerConfiguration().getExternalPath();
+         if (authHeader != null)
+         {
+            final int port = req.getServerPort();
+            String samlUrl = String.format("%s://%s", req.getScheme(), req.getServerName());
+            if (port != 80 && port != 443)
+            {
+               samlUrl = String.format("%s://%s:%d", req.getScheme(), req.getServerName(), port);
+            }
+            if(extPath != null && !extPath.isEmpty() && !"/".contentEquals(extPath))
+            {
+               samlUrl += extPath.startsWith("/") ? extPath : "/" + extPath;
+            }
+            samlUrl += samlUrl.endsWith("/") ? "saml/" : "/saml/";
+            String login, password;
+            login = password = null;
+            StringTokenizer st = new StringTokenizer(authHeader);
+            if (st.hasMoreTokens())
+            {
+               if (st.nextToken().equalsIgnoreCase(HEADER_AUTHORIZATION_BASIC))
+               {
+                  final String credentials = new String(Base64.getDecoder().decode(st.nextToken()),
+                        StandardCharsets.UTF_8);
+                  int p = credentials.indexOf(":");
+                  if (p != -1)
+                  {
+                     login = credentials.substring(0, p).trim();
+                     password = credentials.substring(p + 1).trim();
+                  }
+               }
+            }
+            Map<String, String> cookies = basicToSAMLAuthAndGetCookies(samlUrl, login, password);
+            if (cookies != null)
+            {
+               SecurityContextHolder.setContext(
+                  SEC_CTX_PROVIDER.getSecurityContext(cookies.get(CookieKey.INTEGRITY_COOKIE_NAME)));
+            }
+            chain.doFilter (new RemoveAuthorizationRequestWrapper((HttpServletRequest) request), response);
+            return;
+         }
+         else
+         {
+            if(extPath != null && !extPath.isEmpty() && extPath.endsWith("/"))
+            {
+               extPath = extPath.substring(0, extPath.length() - 1);
+            }
+            // saved request must include external path to load initial url after keycloak auth
+            Builder builder = new Builder()
+					.setMethod(req.getMethod())
+					.setScheme(req.getScheme())
+					.setServerName(req.getServerName())
+					.setServerPort(portResolver.getServerPort(req))
+					.setContextPath(extPath + req.getContextPath())
+					.setPathInfo(req.getPathInfo())
+					.setQueryString(req.getQueryString())
+					.setRequestURI(extPath + req.getRequestURI())
+					.setParameters(req.getParameterMap())
+					.setServletPath(req.getServletPath());
+            DefaultSavedRequest savedRequest = builder.build();
+            requestCache.save(req.getSession(true).getId(), savedRequest);
+
+            // redirect to SAML webapp to process to SSO login
+            if(extPath == null || extPath.trim().isEmpty())
+            {
+               // if no external path, then resirect to root
+               ((HttpServletResponse)response).sendRedirect("/../saml/");
+            }
+            else
+            {
+               // if external path, then redirect to ../external_path/saml/
+               ((HttpServletResponse)response).sendRedirect(extPath + "/saml/");
+            }
+            return;
+         }
+      }
+      chain.doFilter (request, response);
+   }
+   
+   private boolean authenticationIsRequired() 
+   {
+      Authentication existingAuth = SecurityContextHolder.getContext()
+            .getAuthentication();
+
+      if (existingAuth == null || !existingAuth.isAuthenticated())
+      {
+         return true;
+      }
+
+      return false;
+   }
+
+   private static Map<String, String> basicToSAMLAuthAndGetCookies(final String url, final String user, final String pwd)
+   {
+      Map<String, String> cookies = null;
+      HttpClient client = HttpClientBuilder.create().build();
+      HttpGet getRequest = new HttpGet();
+      HttpPost postRequest = new HttpPost();
+      do
+      {
+         try
+         {
+            ///////////////////
+            //// GET http://dhus_ip:port/odata/v1/Products (example)
+            ///////////////////
+            HttpResponse response = get(client, getRequest, url, null);
+            if(response.getStatusLine().getStatusCode() != HttpStatus.SC_OK)
+            {
+               break;
+            }
+            ///////////////////
+            //// POST http://keycloak_ip:port/auth/realms/dhus/protocol/saml (example)
+            //// + data : SAMLRequest
+            ///////////////////
+            String content = EntityUtils.toString(response.getEntity());
+            List <NameValuePair> nvps = new ArrayList <NameValuePair>();
+            nvps.add(new BasicNameValuePair(SAML_REQUEST, getFormFieldValueByName(content, SAML_REQUEST)));
+            response = post(client, postRequest, sanitizeUrl(getFormFieldValueByName(content, FORM_ACTION)), nvps);
+            if(response.getStatusLine().getStatusCode() != HttpStatus.SC_MOVED_TEMPORARILY)
+            {
+               break;
+            }
+            ///////////////////
+            //// GET http://keycloak_ip:port/auth/realms/dhus/login-actions/authenticate?client_id=dhus_client&tab_id=4LruigNgVCs (example)
+            //// + cookies : AUTH_SESSION_ID_LEGACY + KC_RESTART + ...
+            ///////////////////
+            response = get(client, getRequest, response.getFirstHeader(HEADER_LOCATION).getValue(), getSetCookieHeaderAsString(response.getHeaders(HEADER_SET_COOKIE)));
+            if(response.getStatusLine().getStatusCode() != HttpStatus.SC_OK)
+            {
+               break;
+            }
+            ///////////////////
+            //// POST http://keycloak_ip:port/auth/realms/dhus/login-actions/authenticate?session_code=tC6iF4jbxNccd0SjR2a9ZMG6EA_Ln_uTT-auoK597W4&execution=ccdef0c0-2ef2-429a-acbc-1fd5152e92e9&
+            //// client_id=dhus_client&tab_id=4LruigNgVCs (example)
+            //// + data : username + password
+            ///////////////////
+            content = EntityUtils.toString(response.getEntity());
+            nvps.clear();
+            nvps.add(new BasicNameValuePair(FORM_USERNAME, user));
+            nvps.add(new BasicNameValuePair(FORM_PASSWORD, pwd));
+            response = post(client, postRequest, sanitizeUrl(getFormFieldValueByName(content, FORM_ACTION)), nvps);
+            if(response.getStatusLine().getStatusCode() !=  HttpStatus.SC_OK)
+            {
+               break;
+            }
+            ///////////////////
+            //// POST http://dhus_ip:port/saml/saml/SSO (example)
+            //// + data : SAMLResponse
+            ///////////////////
+            content = EntityUtils.toString(response.getEntity());
+            nvps.clear();
+            nvps.add(new BasicNameValuePair(SAML_RESPONSE, getFormFieldValueByName(content, SAML_RESPONSE)));
+            response = post(client, postRequest, getFormFieldValueByName(content, FORM_ACTION), nvps);
+            if(response.getStatusLine().getStatusCode() != HttpStatus.SC_MOVED_TEMPORARILY)
+            {
+               break;
+            }
+            cookies = getSetCookieHeaderAsMap(response.getHeaders(HEADER_SET_COOKIE));
+         }
+         catch(IOException e)
+         {
+            LOGGER.error("Authentication error : Basic to SAML authentication processing.");
+            LOGGER.error(e.getMessage());
+         }
+      }
+      while(false);
+
+      if (getRequest != null)
+      {
+         getRequest.releaseConnection();
+      }
+      if(postRequest != null)
+      {
+         postRequest.releaseConnection();
+      }
+      return cookies;
+   }
+
+   private static String getFormFieldValueByName(final String form, final String field)
+   {
+      final int nameIndex = form.indexOf(String.format("%s=\"%s\"",FORM_NAME, field));
+      if (nameIndex > 0)
+      {
+         final int valueIndex = form.indexOf(String.format("%s=\"", FORM_VALUE), nameIndex) + 7;
+         return form.substring(valueIndex, form.indexOf("\"", valueIndex));
+      }
+      final int fieldIndex = form.indexOf(String.format("%s=\"", field)) + field.length() + 2;
+      if(fieldIndex > 0)
+      {
+         return form.substring(fieldIndex, form.indexOf("\"", fieldIndex));
+      }
+      return null;
+   }
+
+   private static String sanitizeUrl(final String url)
+   {
+      return url.replaceAll("&#x3a;", ":").replaceAll("&#x2f;", "/").replaceAll("&amp;", "&");
+   }
+
+   private static String getSetCookieHeaderAsString(final Header[] headers)
+   {
+      StringBuilder sb = new StringBuilder();
+      for (Header head : headers)
+      {
+         for (HeaderElement el : head.getElements())
+         {
+            final String name = el.getName();
+            sb.append(name);
+            sb.append(EQUAL);
+            sb.append(el.getValue());
+            sb.append(SEMICOLON);
+         }
+      }
+      return sb.toString();
+   }
+
+   private static Map<String, String> getSetCookieHeaderAsMap(final Header[] headers)
+   {
+      Map<String, String> result = new HashMap<String, String>();
+      for (Header head : headers)
+      {
+         for (HeaderElement el : head.getElements())
+         {
+            result.put(el.getName(), el.getValue());
+         }
+      }
+
+      return result;
+   }
+
+   private static HttpResponse get(final HttpClient client, final HttpGet get, final String url, final String cookie)
+   {
+      HttpResponse result = null;
+      if(client == null || get == null || url == null || url.isEmpty())
+      {
+         return result;
+      }
+      try
+      {
+         get.reset();
+         get.setURI(new URI(url));
+         if(cookie != null && !cookie.isEmpty())
+         {
+            get.setHeader(HEADER_COOKIE, cookie);
+         }
+         result = client.execute(get);
+      }
+      catch (IOException | URISyntaxException e)
+      {
+         e.printStackTrace();
+      }
+      return result;
+   }
+
+   private static HttpResponse post(final HttpClient client, final HttpPost post, final String url, final List <NameValuePair> data)
+   {
+      HttpResponse result = null;
+      if(client == null || post == null || url == null || url.isEmpty())
+      {
+         return result;
+      }
+      try
+      {
+         post.reset();
+         post.setURI(new URI(url));
+         post.setHeader(HEADER_CONTENT_TYPE, HEADER_CONTENT_TYPE_URL_ENCODED);
+         post.setEntity(new UrlEncodedFormEntity(data));
+         result = client.execute(post);
+      }
+      catch (IOException | URISyntaxException e)
+      {
+         e.printStackTrace();
+      }
+      return result;
+   }
+}
diff --git a/core/src/main/java/fr/gael/dhus/spring/security/filter/PreAuthFilter.java b/core/src/main/java/fr/gael/dhus/spring/security/filter/PreAuthFilter.java
index f8068efd6..4c759f633 100644
--- a/core/src/main/java/fr/gael/dhus/spring/security/filter/PreAuthFilter.java
+++ b/core/src/main/java/fr/gael/dhus/spring/security/filter/PreAuthFilter.java
@@ -31,15 +31,20 @@ import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.context.SecurityContext;
 import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.web.savedrequest.DefaultSavedRequest;
+import org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder;
 import org.springframework.web.filter.GenericFilterBean;
 
 import fr.gael.dhus.database.object.User.PasswordEncryption;
 import fr.gael.dhus.spring.context.ApplicationContextProvider;
 import fr.gael.dhus.spring.context.SecurityContextProvider;
 import fr.gael.dhus.spring.security.CookieKey;
+import fr.gael.dhus.spring.security.saml.SAMLSavedRequestCache;
+import fr.gael.dhus.system.config.ConfigurationManager;
 import fr.gael.dhus.util.encryption.EncryptPassword;
 
 public class PreAuthFilter extends GenericFilterBean 
@@ -47,6 +52,12 @@ public class PreAuthFilter extends GenericFilterBean
    private static final SecurityContextProvider SEC_CTX_PROVIDER =
          ApplicationContextProvider.getBean(SecurityContextProvider.class);
 
+   private static final ConfigurationManager cfg =
+	         ApplicationContextProvider.getBean(ConfigurationManager.class);
+
+   @Autowired
+   private SAMLSavedRequestCache requestCache;
+
    /**
     * Check whether all required properties have been set.
     */
@@ -82,8 +93,33 @@ public class PreAuthFilter extends GenericFilterBean
                SecurityContextHolder.getContext ().getAuthentication ();
       if (currentUser == null)
       {
-         doAuthenticate ((HttpServletRequest) request,
-            (HttpServletResponse) response);
+         HttpServletRequest req = (HttpServletRequest) request;
+         final String extPath =  cfg.getServerConfiguration().getExternalPath();
+         // if GDPR + external path is not '/' + request url = 'httpx://server/external_path/saml/'
+         // + no saved request with this session
+         // then set a saved request with dhus home including external path = 'httpx://server/external_path'
+         // in order to load home page after keycloak auth
+         if(cfg.isGDPREnabled() && extPath != null && !extPath.trim().isEmpty() && !"/".equals(extPath))
+         {
+            if("/saml/".equalsIgnoreCase(req.getRequestURI()))
+            {
+               final String sessionId = req.getSession(true).getId();
+               if(requestCache.load(sessionId) == null)
+               {
+                  Builder builder = new Builder()
+                          .setMethod(req.getMethod())
+                          .setScheme(req.getScheme())
+                          .setServerName(req.getServerName())
+                          .setServerPort(req.getServerPort())
+                          .setContextPath(extPath)
+                          .setRequestURI(extPath)
+                          .setServletPath(req.getServletPath());
+                  DefaultSavedRequest savedRequest = builder.build();
+                  requestCache.save(sessionId, savedRequest);
+               }
+            }
+         }
+         doAuthenticate (req, (HttpServletResponse) response);
       }
 
       chain.doFilter (request, response);
diff --git a/core/src/main/java/fr/gael/dhus/spring/security/filter/RemoveAuthorizationRequestWrapper.java b/core/src/main/java/fr/gael/dhus/spring/security/filter/RemoveAuthorizationRequestWrapper.java
new file mode 100644
index 000000000..d9d948113
--- /dev/null
+++ b/core/src/main/java/fr/gael/dhus/spring/security/filter/RemoveAuthorizationRequestWrapper.java
@@ -0,0 +1,36 @@
+package fr.gael.dhus.spring.security.filter;
+
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.List;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletRequestWrapper;
+
+public class RemoveAuthorizationRequestWrapper extends HttpServletRequestWrapper
+{
+   private final static String HEADER_AUTHORIZATION = "Authorization";
+
+   public RemoveAuthorizationRequestWrapper(HttpServletRequest request)
+   {
+      super(request);
+   }
+
+   @Override
+   public String getHeader(String name)
+   {
+      if("Authorization".contentEquals(name))
+      {
+         return null;
+      }
+      return super.getHeader(name);
+  }
+
+   @Override
+  public Enumeration<String> getHeaderNames()
+  {
+      List<String> names = Collections.list(super.getHeaderNames());
+      names.remove(HEADER_AUTHORIZATION);
+      return Collections.enumeration(names);
+  }
+}
\ No newline at end of file
diff --git a/core/src/main/java/fr/gael/dhus/spring/security/keycloak/KeycloakLogoutAll.java b/core/src/main/java/fr/gael/dhus/spring/security/keycloak/KeycloakLogoutAll.java
new file mode 100644
index 000000000..03fced7dd
--- /dev/null
+++ b/core/src/main/java/fr/gael/dhus/spring/security/keycloak/KeycloakLogoutAll.java
@@ -0,0 +1,134 @@
+package fr.gael.dhus.spring.security.keycloak;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.security.cert.CertificateFactory;
+import java.security.cert.X509Certificate;
+
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.commons.codec.binary.Base64;
+import org.jboss.logging.Logger;
+import org.keycloak.TokenVerifier;
+import org.keycloak.common.util.StreamUtil;
+import org.keycloak.jose.jws.JWSInput;
+import org.keycloak.representations.JsonWebToken;
+import org.keycloak.representations.adapters.action.LogoutAction;
+import org.keycloak.util.JsonSerialization;
+import org.opensaml.xml.signature.impl.X509CertificateImpl;
+import org.springframework.security.saml.metadata.CachingMetadataManager;
+import org.springframework.web.filter.GenericFilterBean;
+
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.spring.context.SecurityContextProvider;
+
+public class KeycloakLogoutAll extends GenericFilterBean
+{
+   private static final SecurityContextProvider SEC_CTX_PROVIDER = ApplicationContextProvider.getBean(SecurityContextProvider.class);
+   private static final Logger log = Logger.getLogger(KeycloakLogoutAll.class);
+   private CachingMetadataManager idpMetadata;
+
+   public KeycloakLogoutAll(CachingMetadataManager idpMetadataManager) throws Exception
+   {
+      idpMetadata = idpMetadataManager;
+   }
+   
+   @Override
+   public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException
+   {
+      try
+      {
+         JWSInput token = verifyAdminRequest((HttpServletRequest) req, (HttpServletResponse) res);
+         if (token == null)
+         {
+            return;
+         }
+         LogoutAction action = JsonSerialization.readValue(token.getContent(), LogoutAction.class);
+         if (!validateAction(action, (HttpServletResponse) res))
+         {
+            return;
+         }
+         log.info("Logging out all Users as requested by Keycloak");
+         SEC_CTX_PROVIDER.forceLogoutAllUsers();
+      }
+      catch (Exception e)
+      {
+         throw new RuntimeException(e);
+      }
+
+   }
+
+   protected JWSInput verifyAdminRequest(HttpServletRequest req,
+         HttpServletResponse res) throws Exception
+   {
+      String token = StreamUtil.readString(req.getInputStream());
+      if (token == null)
+      {
+         log.warn("Logout all users admin request failed, no token");
+         res.sendError(403, "no token");
+         return null;
+      }
+
+      try
+      {
+         // Check just signature. Other things checked in validateAction
+         TokenVerifier tokenVerifier = createVerifier(token, false, JsonWebToken.class);
+         tokenVerifier.verify();
+         return new JWSInput(token);
+      }
+      catch (Exception ignore)
+      {
+         log.warn("Logout all users admin request failed, unable to verify token: " + ignore.getMessage());
+         if (log.isDebugEnabled())
+         {
+            log.debug(ignore.getMessage(), ignore);
+         }
+
+         res.sendError(403, "token failed verification");
+         return null;
+      }
+   }
+
+   private boolean validateAction(LogoutAction action, HttpServletResponse res)
+         throws IOException
+   {
+      if (!action.validate())
+      {
+         log.warn("Logout all users admin request failed, not validated" + action.getAction());
+         res.sendError(400, "Not validated");
+         return false;
+      }
+      if (action.isExpired())
+      {
+         log.warn("Logout all users admin request failed, expired token");
+         res.sendError(400, "Expired token");
+         return false;
+      }
+      return true;
+   }
+
+   private <T extends JsonWebToken> TokenVerifier<T> createVerifier( String tokenString, boolean withDefaultChecks, Class<T> tokenClass) throws Exception
+   {
+      TokenVerifier<T> tokenVerifier = TokenVerifier.create(tokenString, tokenClass);
+      
+      X509CertificateImpl x509Cert = (X509CertificateImpl)
+            idpMetadata.getEntityDescriptor(idpMetadata.getDefaultIDP()).getIDPSSODescriptor("urn:oasis:names:tc:SAML:2.0:protocol")
+            .getKeyDescriptors().get(0).getKeyInfo().getX509Datas().get(0).getX509Certificates().get(0);
+
+      String cert = x509Cert.getValue(); 
+      byte[] encodedCert = cert.getBytes("UTF-8");
+      byte[] decodedCert = Base64.decodeBase64(encodedCert);
+      CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
+      InputStream in = new ByteArrayInputStream(decodedCert);
+      X509Certificate certificate = (X509Certificate) certFactory.generateCertificate(in);
+      
+      tokenVerifier.publicKey(certificate.getPublicKey());
+      return tokenVerifier;
+   }
+}
diff --git a/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLAuthProvider.java b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLAuthProvider.java
index 6fd1208b4..32ec7171f 100644
--- a/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLAuthProvider.java
+++ b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLAuthProvider.java
@@ -19,24 +19,23 @@
  */
 package fr.gael.dhus.spring.security.saml;
 
-import fr.gael.dhus.database.object.User;
-import fr.gael.dhus.database.object.restriction.AccessRestriction;
-import fr.gael.dhus.service.UserService;
+import java.util.Date;
 
 import javax.servlet.http.HttpServletRequest;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.security.authentication.LockedException;
-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.AuthenticationException;
+import org.springframework.security.providers.ExpiringUsernameAuthenticationToken;
 import org.springframework.security.saml.SAMLAuthenticationProvider;
 import org.springframework.web.context.request.RequestContextHolder;
 import org.springframework.web.context.request.ServletRequestAttributes;
 
+import fr.gael.dhus.database.object.User;
+import fr.gael.dhus.service.UserService;
+
 public class SAMLAuthProvider extends SAMLAuthenticationProvider
 {
    private static final Logger LOGGER = LogManager.getLogger();
@@ -44,9 +43,6 @@ public class SAMLAuthProvider extends SAMLAuthenticationProvider
    @Autowired
    private UserService userService;
 
-   @Autowired
-   private IDPManager idpManager;
-
    protected final String errorMessage = "There was an error with your "
          + "login/password combination. Please try again.";
 
@@ -61,6 +57,7 @@ public class SAMLAuthProvider extends SAMLAuthenticationProvider
       {
          return auth;
       }
+            
       ServletRequestAttributes attributes =
             (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
       HttpServletRequest request = attributes.getRequest();
@@ -76,29 +73,31 @@ public class SAMLAuthProvider extends SAMLAuthenticationProvider
          proxy = " (proxy: " + request.getRemoteAddr() + ")";
       }
 
-      LOGGER.info("Connection attempted by '{}' from {}",
-            authentication.getName(), (proxy != null ? ip + proxy : ip));
+      String uuid = ((User)auth.getDetails()).getUUID();
+      String username = SAMLUtil.hash(auth.getPrincipal().toString());
+      LOGGER.info("Connection attempted by user '{}' from {}",
+            username, (proxy != null ? ip + proxy : ip));
 
-      String username = idpManager.getIdpName() + "~" + auth.getPrincipal();
       User user = userService.getUserNoCheck(username);
       if (user == null)
       {
          User u = new User();
          u.setUsername(username);
+         u.setUUID(uuid);
+         u.setRoles(((User)auth.getDetails()).getRoles());
          u.generatePassword();
          user = userService.systemCreateSSOUser(u);
       }
       else
       {
-         for (AccessRestriction restriction: user.getRestrictions())
-         {
-            LOGGER.warn("Connection refused for '{}' from {} : account is locked ({})",
-                  username, ip, restriction.getBlockingReason());
-            throw new LockedException(restriction.getBlockingReason());
-         }
+         user.setRoles(((User)auth.getDetails()).getRoles());
+         userService.systemUpdateSSOUser(user);
       }
+      user.setExtendedRoles(((User)auth.getDetails()).getExtendedRoles());
 
-      LOGGER.info("Connection success for '{}' from {}", username, ip);
-      return new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());
+      Date tokenExpiration = ((ExpiringUsernameAuthenticationToken) auth).getTokenExpiration();
+      
+      LOGGER.info("Connection success for user '{}' from {} - token expires on {}", user.getUsername(), ip, tokenExpiration);
+      return new ExpiringUsernameAuthenticationToken(((ExpiringUsernameAuthenticationToken)auth).getTokenExpiration(), user, null, user.getAuthorities());
    }
 }
diff --git a/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLLogger.java b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLLogger.java
new file mode 100644
index 000000000..2938124e6
--- /dev/null
+++ b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLLogger.java
@@ -0,0 +1,15 @@
+package fr.gael.dhus.spring.security.saml;
+
+import org.springframework.security.core.Authentication;
+import org.springframework.security.saml.context.SAMLMessageContext;
+import org.springframework.security.saml.log.SAMLDefaultLogger;
+
+public class SAMLLogger extends SAMLDefaultLogger
+{
+   @Override
+   public void log(String operation, String result, SAMLMessageContext context, Authentication a, Exception e)
+   {
+      // GDPR : remove user information
+      super.log(operation, result, context, null, e);
+   }
+}
diff --git a/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLLoginSuccessHandler.java b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLLoginSuccessHandler.java
index d7b4164a0..89e0544aa 100644
--- a/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLLoginSuccessHandler.java
+++ b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLLoginSuccessHandler.java
@@ -19,24 +19,31 @@
  */
 package fr.gael.dhus.spring.security.saml;
 
-import fr.gael.dhus.spring.security.handler.LoginSuccessHandler;
-
 import java.io.IOException;
+
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
+import org.springframework.security.web.savedrequest.SavedRequest;
 import org.springframework.stereotype.Component;
 
+import fr.gael.dhus.spring.security.filter.GDPRAuthFilter;
+import fr.gael.dhus.spring.security.handler.LoginSuccessHandler;
+
 @Component(value = "samlLoginSuccessHandler")
 public class SAMLLoginSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler
 {
    @Autowired
    private LoginSuccessHandler loginSuccessHandler;
 
+   @Autowired 
+   private SAMLSavedRequestCache requestCache;
+   
    @Override
    public void onAuthenticationSuccess(HttpServletRequest request,
          HttpServletResponse response, Authentication authentication)
@@ -44,6 +51,28 @@ public class SAMLLoginSuccessHandler extends SavedRequestAwareAuthenticationSucc
    {
       // Call same loginSuccessHandler as default case to set same cookies
       loginSuccessHandler.onAuthenticationSuccess(request, response, authentication);
-      super.onAuthenticationSuccess(request, response, authentication);
+
+      HttpSession session = request.getSession(false);
+      
+      if (session == null)
+      {
+         super.onAuthenticationSuccess(request, response, authentication);
+         return;
+      }
+      
+      SavedRequest savedRequest = requestCache.load(session.getId());
+      requestCache.remove(session.getId());
+
+      if (savedRequest == null) 
+      {
+         super.onAuthenticationSuccess(request, response, authentication);
+         return;
+      }
+
+      clearAuthenticationAttributes(request);
+
+      // Use the DefaultSavedRequest URL
+      String targetUrl = savedRequest.getRedirectUrl();
+      getRedirectStrategy().sendRedirect(request, response, targetUrl);
    }
 }
diff --git a/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLLogoutProcessingFilter.java b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLLogoutProcessingFilter.java
new file mode 100644
index 000000000..f82d088f4
--- /dev/null
+++ b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLLogoutProcessingFilter.java
@@ -0,0 +1,264 @@
+package fr.gael.dhus.spring.security.saml;
+
+import static org.springframework.security.saml.util.SAMLUtil.isDateTimeSkewValid;
+
+import java.io.IOException;
+
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.joda.time.DateTime;
+import org.opensaml.common.SAMLException;
+import org.opensaml.common.SAMLObject;
+import org.opensaml.saml2.core.Issuer;
+import org.opensaml.saml2.core.LogoutRequest;
+import org.opensaml.saml2.core.LogoutResponse;
+import org.opensaml.saml2.core.NameID;
+import org.opensaml.saml2.core.NameIDType;
+import org.opensaml.saml2.core.StatusCode;
+import org.opensaml.saml2.metadata.Endpoint;
+import org.opensaml.saml2.metadata.provider.MetadataProviderException;
+import org.opensaml.ws.message.decoder.MessageDecodingException;
+import org.opensaml.xml.encryption.DecryptionException;
+import org.springframework.security.saml.SAMLConstants;
+import org.springframework.security.saml.SAMLStatusException;
+import org.springframework.security.saml.context.SAMLMessageContext;
+import org.springframework.security.saml.util.SAMLUtil;
+import org.springframework.security.web.authentication.logout.LogoutHandler;
+import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;
+import org.springframework.util.Assert;
+
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.spring.context.SecurityContextProvider;
+
+public class SAMLLogoutProcessingFilter extends org.springframework.security.saml.SAMLLogoutProcessingFilter
+{
+   private static final SecurityContextProvider SEC_CTX_PROVIDER = ApplicationContextProvider.getBean(SecurityContextProvider.class);
+
+   public SAMLLogoutProcessingFilter(String logoutSuccessUrl, LogoutHandler[] handlers)
+   {
+      super(logoutSuccessUrl, handlers);
+   }
+
+   public SAMLLogoutProcessingFilter(LogoutSuccessHandler logoutSuccessHandler, LogoutHandler[] handlers)
+   {
+      super(logoutSuccessHandler, handlers);
+   }
+
+   @Override
+   public void processLogout(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException
+   {
+      if (requiresLogout(request, response))
+      {
+         SAMLMessageContext context;
+         try
+         {
+            log.debug("Processing SAML logout message");
+            context = contextProvider.getLocalEntity(request, response);
+            context.setCommunicationProfileId(getProfileName());
+            processor.retrieveMessage(context);
+            context.setLocalEntityEndpoint(SAMLUtil.getEndpoint(
+                  context.getLocalEntityRoleMetadata().getEndpoints(),
+                  context.getInboundSAMLBinding(),
+                  context.getInboundMessageTransport(), uriComparator));
+
+         }
+         catch (SAMLException e)
+         {
+            log.debug("Incoming SAML message is invalid", e);
+            throw new ServletException("Incoming SAML message is invalid", e);
+         }
+         catch (MetadataProviderException e)
+         {
+            log.debug("Error determining metadata contracts", e);
+            throw new ServletException("Error determining metadata contracts", e);
+         }
+         catch (MessageDecodingException e)
+         {
+            log.debug("Error decoding incoming SAML message", e);
+            throw new ServletException("Error decoding incoming SAML message", e);
+         }
+         catch (org.opensaml.xml.security.SecurityException e)
+         {
+            log.debug("Incoming SAML message failed security validation", e);
+            throw new ServletException("Incoming SAML message failed security validation", e);
+         }
+
+         if (context.getInboundSAMLMessage() instanceof LogoutResponse)
+         {
+            try
+            {
+               logoutProfile.processLogoutResponse(context);
+
+               log.debug("Performing local logout after receiving logout response from {}", context.getPeerEntityId());
+               super.doFilter(request, response, chain);
+
+               samlLogger.log(SAMLConstants.LOGOUT_RESPONSE, SAMLConstants.SUCCESS, context);
+            }
+            catch (Exception e)
+            {
+               log.debug("Received logout response is invalid", e);
+               samlLogger.log(SAMLConstants.LOGOUT_RESPONSE, SAMLConstants.FAILURE, context, e);
+            }
+
+         }
+         else if (context.getInboundSAMLMessage() instanceof LogoutRequest)
+         {
+            NameID nameID = null;
+            LogoutRequest logoutRequest = (LogoutRequest) context.getInboundSAMLMessage();
+            try
+            {
+               nameID = getNameID(context, logoutRequest);
+            }
+            catch (DecryptionException e1)
+            {
+               // TODO Auto-generated catch block
+               e1.printStackTrace();
+            }
+
+            try
+            {
+               boolean doLogout;
+
+               try
+               {
+                  doLogout = processLogoutRequest(context);
+               }
+               catch (SAMLStatusException e)
+               {
+                  log.debug("Received logout request is invalid, responding with error", e);
+                  logoutProfile.sendLogoutResponse(context, e.getStatusCode(), e.getStatusMessage());
+                  samlLogger.log(SAMLConstants.LOGOUT_REQUEST, SAMLConstants.FAILURE, context, e);
+                  return;
+               }
+
+               if (doLogout)
+               {
+                  log.debug("Performing local logout after receiving logout request from {}", context.getPeerEntityId());
+                  SEC_CTX_PROVIDER.forceLogout(fr.gael.dhus.spring.security.saml.SAMLUtil.hash(nameID.getValue()));
+               }
+
+               logoutProfile.sendLogoutResponse(context, StatusCode.SUCCESS_URI, null);
+               samlLogger.log(SAMLConstants.LOGOUT_REQUEST, SAMLConstants.SUCCESS, context);
+            }
+            catch (Exception e)
+            {
+               log.debug("Error processing logout request", e);
+               samlLogger.log(SAMLConstants.LOGOUT_REQUEST, SAMLConstants.FAILURE, context, e);
+               throw new ServletException("Error processing logout request", e);
+            }
+         }
+      }
+      else
+      {
+         chain.doFilter(request, response);
+      }
+
+   }
+
+   protected NameID getNameID(SAMLMessageContext context, LogoutRequest request) throws DecryptionException
+   {
+      NameID id;
+      if (request.getEncryptedID() != null)
+      {
+         Assert.notNull(context.getLocalDecrypter(), "Can't decrypt NameID, no decrypter is set in the context");
+         id = (NameID) context.getLocalDecrypter().decrypt(request.getEncryptedID());
+      }
+      else
+      {
+         id = request.getNameID();
+      }
+      return id;
+   }
+
+   // imported from org.springframework.security.saml.websso.SingleLogoutProfileImpl
+   public boolean processLogoutRequest(SAMLMessageContext context) throws SAMLException
+   {
+      SAMLObject message = context.getInboundSAMLMessage();
+
+      // Verify type
+      if (message == null || !(message instanceof LogoutRequest))
+      {
+         throw new SAMLException("Message is not of a LogoutRequest object type");
+      }
+
+      LogoutRequest logoutRequest = (LogoutRequest) message;
+
+      // Make sure request was authenticated if required, authentication is done
+      // as part of the binding processing
+      if (!context.isInboundSAMLMessageAuthenticated() && context.getLocalExtendedMetadata().isRequireLogoutRequestSigned())
+      {
+         throw new SAMLStatusException(StatusCode.REQUEST_DENIED_URI, "LogoutRequest is required to be signed by the entity policy");
+      }
+
+      // Verify destination
+      try
+      {
+         verifyEndpoint(context.getLocalEntityEndpoint(), logoutRequest.getDestination());
+      }
+      catch (SAMLException e)
+      {
+         throw new SAMLStatusException(StatusCode.REQUEST_DENIED_URI, "Destination of the LogoutRequest does not match any of the single logout endpoints");
+      }
+
+      // Verify issuer
+      try
+      {
+         if (logoutRequest.getIssuer() != null)
+         {
+            Issuer issuer = logoutRequest.getIssuer();
+            verifyIssuer(issuer, context);
+         }
+      }
+      catch (SAMLException e)
+      {
+         throw new SAMLStatusException(StatusCode.REQUEST_DENIED_URI, "Issuer of the LogoutRequest is unknown");
+      }
+
+      // Verify issue time
+      DateTime time = logoutRequest.getIssueInstant();
+      if (!isDateTimeSkewValid(60, time))
+      {
+         throw new SAMLStatusException(StatusCode.REQUESTER_URI, "LogoutRequest issue instant is either too old or with date in the future");
+      }
+
+      return true;
+   }
+
+   protected void verifyIssuer(Issuer issuer, SAMLMessageContext context) throws SAMLException
+   {
+      // Validate format of issuer
+      if (issuer.getFormat() != null && !issuer.getFormat().equals(NameIDType.ENTITY))
+      {
+         throw new SAMLException( "Issuer invalidated by issuer type " + issuer.getFormat());
+      }
+      // Validate that issuer is expected peer entity
+      if (!context.getPeerEntityMetadata().getEntityID().equals(issuer.getValue()))
+      {
+         throw new SAMLException("Issuer invalidated by issuer value " + issuer.getValue());
+      }
+   }
+
+   protected void verifyEndpoint(Endpoint endpoint, String destination) throws SAMLException
+   {
+      // Verify that destination in the response matches one of the available endpoints
+      if (destination != null)
+      {
+         if (uriComparator.compare(destination, endpoint.getLocation()))
+         {
+            // Expected
+         }
+         else if (uriComparator.compare(destination, endpoint.getResponseLocation()))
+         {
+            // Expected
+         }
+         else
+         {
+            throw new SAMLException("Intended destination " + destination + " doesn't match any of the endpoint URLs on endpoint "
+                  + endpoint.getLocation() + " for profile " + SAMLConstants.SAML2_SLO_PROFILE_URI);
+         }
+      }
+   }
+}
diff --git a/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLSavedRequestCache.java b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLSavedRequestCache.java
new file mode 100644
index 000000000..1b8205bd0
--- /dev/null
+++ b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLSavedRequestCache.java
@@ -0,0 +1,83 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2015,2016,2017 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package fr.gael.dhus.spring.security.saml;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.springframework.security.web.savedrequest.SavedRequest;
+import org.springframework.stereotype.Component;
+
+import net.sf.ehcache.Cache;
+import net.sf.ehcache.CacheManager;
+import net.sf.ehcache.Element;
+
+@Component
+public class SAMLSavedRequestCache
+{
+   private static final Logger LOGGER = LogManager.getLogger(SAMLSavedRequestCache.class);
+   private static final String CACHE_MANAGER_NAME = "dhus_cache";
+   private static final String CACHE_NAME = "saml_saved_requests";
+   private static Cache cache;
+
+   private static Cache getCache()
+   {
+      if (cache == null)
+      {
+         cache = CacheManager.getCacheManager(CACHE_MANAGER_NAME).getCache(CACHE_NAME);
+      }
+      return cache;
+   }
+
+   public SAMLSavedRequestCache() {}
+
+   public SavedRequest load(String key)
+   {
+      if (key == null)
+      {
+         return null;
+      }
+      Element e = getCache().get(key);
+      if (e == null)
+      {
+         return null;
+      }
+      return (SavedRequest) getCache().get(key).getObjectValue();
+   }
+
+   public void save(String key, SavedRequest request)
+   {
+      if (key == null)
+      {
+         LOGGER.error("Cannot save request with a null key.");
+         return;
+      }
+      Element element = new Element(key, request);
+      getCache().put(element);
+   }
+
+   public void remove(String key)
+   {
+      if (key == null)
+      {
+         return;
+      }
+      getCache().remove(key);
+   }
+}
diff --git a/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLUserDetailsService.java b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLUserDetailsService.java
new file mode 100644
index 000000000..dfef27b1c
--- /dev/null
+++ b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLUserDetailsService.java
@@ -0,0 +1,55 @@
+package fr.gael.dhus.spring.security.saml;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.opensaml.saml2.core.Attribute;
+import org.opensaml.xml.schema.impl.XSStringImpl;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.security.saml.SAMLCredential;
+import org.springframework.stereotype.Component;
+
+import fr.gael.dhus.database.object.Role;
+import fr.gael.dhus.database.object.User;
+import fr.gael.dhus.system.config.ConfigurationManager;
+
+@Component
+public class SAMLUserDetailsService implements org.springframework.security.saml.userdetails.SAMLUserDetailsService 
+{
+
+   @Autowired
+   private ConfigurationManager cfg;
+   
+   @Override
+   public Object loadUserBySAML (SAMLCredential credential) throws UsernameNotFoundException
+   {
+      User u = new User ();
+      u.setUUID(credential.getAttributeAsString(cfg.getSAMLUserId()));
+
+      List<Role> roles = new ArrayList<Role> ();
+      List<String> extendedRoles = new ArrayList<String> ();
+      
+      for (Attribute attr : credential.getAttributes ())
+      {
+         if(!"Role".equalsIgnoreCase(attr.getName()))
+         {
+            continue;
+         }
+         String role = ((XSStringImpl)(attr.getAttributeValues ().get (0))).getValue ();
+         try 
+         {
+            Role r = Role.valueOf (role);
+            roles.add (r);
+         }
+         catch (IllegalArgumentException e)
+         {
+            extendedRoles.add(role.toUpperCase());
+         }
+      }
+      
+      u.setRoles (roles);
+      u.setExtendedRoles(extendedRoles);
+      return u;
+   }
+}
diff --git a/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLUtil.java b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLUtil.java
new file mode 100644
index 000000000..4fa6b305a
--- /dev/null
+++ b/core/src/main/java/fr/gael/dhus/spring/security/saml/SAMLUtil.java
@@ -0,0 +1,31 @@
+package fr.gael.dhus.spring.security.saml;
+
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+
+import javax.xml.bind.DatatypeConverter;
+
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+
+public class SAMLUtil
+{
+   private static IDPManager idpManager = ApplicationContextProvider.getBean(IDPManager.class);
+   
+   public static String hash(String username)
+   {
+      String key = idpManager.getIdpName() + "~" + username;
+      String myHash = key;
+      
+      try
+      {
+         MessageDigest md = MessageDigest.getInstance("MD5");
+         md.update(key.getBytes());
+         byte[] digest = md.digest();
+         // forced toLowerCase since User username are stored in LowerCase.
+         myHash = DatatypeConverter.printHexBinary(digest).toLowerCase();
+      }
+      catch (NoSuchAlgorithmException e) {}
+      
+      return myHash;
+   }
+}
diff --git a/core/src/main/java/fr/gael/dhus/sync/impl/ODataProductSynchronizer.java b/core/src/main/java/fr/gael/dhus/sync/impl/ODataProductSynchronizer.java
index 74a4e26fc..69d1ac1bc 100755
--- a/core/src/main/java/fr/gael/dhus/sync/impl/ODataProductSynchronizer.java
+++ b/core/src/main/java/fr/gael/dhus/sync/impl/ODataProductSynchronizer.java
@@ -62,10 +62,15 @@ import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.UUID;
+import java.util.concurrent.Callable;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
 import javax.xml.datatype.XMLGregorianCalendar;
 
 import org.apache.http.auth.AuthScope;
@@ -99,16 +104,18 @@ import org.dhus.store.StoreService;
 import org.dhus.store.datastore.DataStore;
 import org.dhus.store.datastore.DataStoreFactory.InvalidConfigurationException;
 import org.dhus.store.datastore.DataStoreManager;
+import org.dhus.store.datastore.ProductOfflineReference;
 import org.dhus.store.datastore.ProductReference;
 import org.dhus.store.datastore.config.DataStoreManager.UnavailableNameException;
+import org.dhus.store.derived.DerivedProductStoreService;
 import org.dhus.store.datastore.config.DataStoreRestriction;
 import org.dhus.store.ingestion.IngestibleODataProduct;
 import org.dhus.store.ingestion.IngestibleODataProduct.MissingProductsException;
 import org.dhus.store.datastore.config.HfsDataStoreConf;
 import org.dhus.store.ingestion.ProcessingManager;
-
+import org.dhus.store.metadatastore.MetadataStoreService;
 import org.hibernate.exception.LockAcquisitionException;
-
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.dao.CannotAcquireLockException;
 
 /**
@@ -121,6 +128,9 @@ public class ODataProductSynchronizer extends Synchronizer
 
    /** Number of download attempts (-1 for infinite, must be at least 1). */
    private static final int DL_TRIES = Integer.getInteger("dhus.sync.download_attempts", 10);
+   
+   /* Number of turns before process the skipped products */
+   private static final int MAX_TURNS_SKIPPED_PRODUCTS = Integer.getInteger("dhus.sync.skipped_turns", 10);
 
    /** Synchronizer Service, for this sync to save its own settings. */
    private static final ISynchronizerService SYNC_SERVICE =
@@ -133,10 +143,18 @@ public class ODataProductSynchronizer extends Synchronizer
    /** Metadata Type Service, MetadataIndex name to Queryable. */
    private static final MetadataTypeService METADATA_TYPE_SERVICE =
          ApplicationContextProvider.getBean(MetadataTypeService.class);
+   
+   /** Metadata service that manages metadata **/
+   private static final MetadataStoreService METADATA_SERVICE = 
+         ApplicationContextProvider.getBean(MetadataStoreService.class);
 
    /** Service that manages all Stores. */
    private static final StoreService STORE_SERVICE =
          ApplicationContextProvider.getBean(StoreService.class);
+   
+   /** Derived Store service*/
+   private static final DerivedProductStoreService DERIVED_PRODUCT_STORE_SERVICE =
+         ApplicationContextProvider.getBean(DerivedProductStoreService.class);
 
    /** Service that manages DataStores. */
    private static final DataStoreManager DATA_STORE_MANAGER =
@@ -204,6 +222,20 @@ public class ODataProductSynchronizer extends Synchronizer
 
    /** Controls whether we are updating LastCreationDate or not. */
    private boolean update_created = true;
+   
+   /** Allows to synchronize offline products. By default, it is disabled */
+   private boolean syncOfflineProduct = false;
+   
+   /**  Number of retries for each skipped product */
+   private int retriesSkippedProduct;
+   
+   /** Timeout for skipped products    */
+   private long skippedProductsTimeout;
+
+   private int processSkippedTurns = 0;
+
+   private static Map<String, Integer> skippedProductsMap;
+
 
    static
    {
@@ -231,6 +263,8 @@ public class ODataProductSynchronizer extends Synchronizer
       String urilit = productSynchronizer.getServiceUrl();
       serviceUser = productSynchronizer.getServiceLogin();
       servicePass = productSynchronizer.getServicePassword();
+      syncOfflineProduct = productSynchronizer.isSyncOfflineProducts();
+      skippedProductsMap = new HashMap<String, Integer>();
       if (urilit == null || urilit.isEmpty())
       {
          throw new IllegalStateException("`service_uri` is not set");
@@ -351,6 +385,8 @@ public class ODataProductSynchronizer extends Synchronizer
 
       Boolean skipOnErrorObj = productSynchronizer.isSkipOnError();
       this.skipOnError = skipOnErrorObj != null ? skipOnErrorObj : true;
+      setRetriesSkippedProduct(productSynchronizer.getRetriesForSkippedProducts());
+      setSkippedProductsTimeout(productSynchronizer.getTimeoutSkippedProducts());
    }
 
    /** Logs how much time an OData command consumed. */
@@ -382,21 +418,30 @@ public class ODataProductSynchronizer extends Synchronizer
     *
     * @param optional_skip   an optional $skip parameter, may be null
     * @param expand_navlinks if `true`, the query will contain: `$expand=Class,Attributes,Products`
+    * @param skippedProducts if `true`, we will check only products skipped
     */
-   private ODataFeed getPage(Integer optional_skip, boolean expand_navlinks)
+   private ODataFeed getPage(Integer optional_skip, boolean expand_navlinks, boolean skippedProducts)
          throws ODataException, IOException, InterruptedException
    {
       // Makes the query parameters
       Map<String, String> query_param = new HashMap<>();
-
-      String lup_s = DateFormatter.format(lastCreated);
-      // 'GreaterEqual' because of products with the same CreationDate
-      String filter = "CreationDate ge " + lup_s;
-
-      // Appends custom $filter parameter
-      if (filterParam != null)
+      String filter = null;
+      
+      if (skippedProducts)
       {
-         filter += " and (" + filterParam + ")";
+         filter = buildQueryFilterForSkippedProducts(optional_skip);
+      }
+      else
+      {
+         String lup_s = DateFormatter.format(lastCreated);
+         // 'GreaterEqual' because of products with the same CreationDate
+         filter = "CreationDate ge " + lup_s;
+
+         // Appends custom $filter parameter
+         if (filterParam != null)
+         {
+            filter += " and (" + filterParam + ")";
+         }
       }
 
       query_param.put("$filter", filter);
@@ -498,9 +543,19 @@ public class ODataProductSynchronizer extends Synchronizer
       // This trick only works with a TreeSet (ordered), overriding the `equals` method would probably work with other Set implementations
       return this.runningDownloads.contains((Comparable<DownloadTask>) (DownloadTask dlt) -> uuid.compareTo(dlt.product.getUuid()));
    }
-
-   /** Creates and returns a new Product from the given entry. */
-   private IngestibleODataProduct entryToProducts(ODataEntry productEntry, boolean getDownloads)
+   
+   /**
+    * Creates and returns a new Product from the given entry. 
+    * @param productEntry
+    * @param getDownloads
+    * @param online
+    * @return
+    * @throws ODataException
+    * @throws IOException
+    * @throws InterruptedException
+    * @throws MissingProductsException
+    */
+   private IngestibleODataProduct entryToProducts(ODataEntry productEntry, boolean getDownloads, boolean onlineProduct)
          throws ODataException, IOException, InterruptedException, MissingProductsException
    {
       long delta;
@@ -538,7 +593,35 @@ public class ODataProductSynchronizer extends Synchronizer
          derivedProductFeed = client.readFeed(odataProductResource + "/Products", null);
          logODataPerf(odataProductResource, "/Products", null, System.currentTimeMillis() - delta);
       }
+      
+      //Perform specific behavior when the product is offline
+      Map<String, ? extends Product> productAndDerived;
+      if (onlineProduct)
+      {
+         productAndDerived = processOnlineProducts(productEntry, derivedProductFeed, odataProductResource, origin, checksumValue, identifier, getDownloads);
+      }
+      else
+      {
+         productAndDerived = performOfflineProducts(productEntry, derivedProductFeed);
+      }
+      
+      IngestibleODataProduct ingestibleODataProduct =
+            IngestibleODataProduct.fromODataEntry(productEntry, origin, itemClass, metadataIndexList, productAndDerived);
+
+      ingestibleODataProduct.setProperty(ProductConstants.CHECKSUM_PREFIX + "." + checksumAlgorithm, checksumValue);
+
+      return ingestibleODataProduct;
+      
+   }
 
+   /** 
+    * @throws ODataException 
+    * @throws InterruptedException 
+    * @throws IOException */
+   private Map<String, ? extends Product> processOnlineProducts(ODataEntry productEntry, ODataFeed derivedProductFeed, String odataProductResource,
+         String origin,  String checksumValue , String identifier,boolean getDownloads) throws IOException, InterruptedException, ODataException
+         
+   {
       Map<String, ? extends Product> productAndDerived;
       if (getDownloads)
       {
@@ -550,15 +633,84 @@ public class ODataProductSynchronizer extends Synchronizer
       {
          productAndDerived = getProductReferences(productEntry, derivedProductFeed);
       }
+      return productAndDerived;
 
-      IngestibleODataProduct ingestibleODataProduct =
-            IngestibleODataProduct.fromODataEntry(productEntry, origin, itemClass, metadataIndexList, productAndDerived);
+   }
+   
+   private Map<String, ? extends Product> performOfflineProducts(ODataEntry productEntry, ODataFeed derivedProductFeed)
+   {
+      Map<String, ProductOfflineReference> productReferences = new HashMap<>();
 
-      ingestibleODataProduct.setProperty(ProductConstants.CHECKSUM_PREFIX + "." + checksumAlgorithm, checksumValue);
+      // handle unaltered product reference
+      ProductOfflineReference unalteredProductReference = new ProductOfflineReference(getResourceLocation(productEntry));
+      unalteredProductReference.setProperty(ProductConstants.DATA_SIZE, (Long) productEntry.getProperties().get("ContentLength"));
+      productReferences.put(IngestibleODataProduct.UNALTERED, unalteredProductReference);
 
-      return ingestibleODataProduct;
+      // make derived product references
+      for (ODataEntry derivedProductEntry: derivedProductFeed.getEntries())
+      {
+         String id = (String) derivedProductEntry.getProperties().get("Id");
+         String path = (String) derivedProductEntry.getProperties().get("LocalPath");
+         
+         checkAccess(path);
+
+         // Retrieves the Quicklook
+         if (id.equals("Quicklook"))
+         {
+            ProductOfflineReference quicklookReference = new ProductOfflineReference(path);
+            quicklookReference.setProperty(ProductConstants.DATA_SIZE, (Long) derivedProductEntry.getProperties().get("ContentLength"));
+            productReferences.put(IngestibleODataProduct.QUICKLOOK, quicklookReference);
+         }
+
+         // Retrieves the Thumbnail
+         else if (id.equals("Thumbnail"))
+         {
+            ProductOfflineReference thumbnailReference = new ProductOfflineReference(path);
+            thumbnailReference.setProperty(ProductConstants.DATA_SIZE, (Long) derivedProductEntry.getProperties().get("ContentLength"));
+            productReferences.put(IngestibleODataProduct.THUMBNAIL, thumbnailReference);
+         }
+      }
+      return productReferences;
    }
 
+   private void checkAccess(String resource_location)
+   {
+       if (!DATA_STORE_MANAGER.canAccess(resource_location))
+       {
+       // If remoteIncoming set, tries to create DS and check it can access product
+       if (remoteIncoming != null)
+       {
+          String dataStoreName = DATASTORE_SYNC_PREFIX_NAME + String.valueOf(getId());
+          HfsDataStoreConf dataStoreConf;
+          dataStoreConf = new HfsDataStoreConf();
+          dataStoreConf.setName(dataStoreName);
+          dataStoreConf.setRestriction(DataStoreRestriction.REFERENCES_ONLY);
+          dataStoreConf.setPath(remoteIncoming);
+
+          if (!DSC_SERVICE.dataStoreExists(dataStoreName))
+          {
+             try
+             {
+                DSC_SERVICE.createNamed(dataStoreConf);
+                DataStore liveDataStore = DSC_SERVICE.getDataStoreByName(dataStoreName);
+                if (liveDataStore.canAccess(resource_location))
+                {
+                   DATA_STORE_MANAGER.add(liveDataStore);
+                }
+                else
+                {
+                   DSC_SERVICE.delete(dataStoreConf);
+                }
+             }
+             catch (UnavailableNameException | InvalidConfigurationException e)
+             {
+                LOGGER.error("Synchronizer#{}", getId(), e);
+             }
+          }
+      }
+      }
+   }  
+
    private Map<String, ProductReference> getProductReferences(ODataEntry productEntry, ODataFeed derivedProductFeed)
    {
       Map<String, ProductReference> productReferences = new HashMap<>();
@@ -789,6 +941,7 @@ public class ODataProductSynchronizer extends Synchronizer
                LOGGER.warn("Synchronizer#{} PRODUCT SKIPPED from '{}', creationDate: {}",
                      getId(), product.getOrigin(), product.getCreationDate());
                skip++;
+               skippedProductsMap.put(product.getUuid(), 0);
             }
             else
             {
@@ -832,7 +985,7 @@ public class ODataProductSynchronizer extends Synchronizer
    }
 
    /** Retrieves and download new products, downloads are parallelized. */
-   private int getAndCopyNewProduct() throws InterruptedException
+   private int getAndCopyNewProduct(boolean skippedProducts) throws InterruptedException
    {
       int res = 0;
       int count = this.pageSize - runningDownloads.size();
@@ -846,7 +999,7 @@ public class ODataProductSynchronizer extends Synchronizer
          // Downloads at least `pageSize` products
          while (count > 0)
          {
-            ODataFeed pdf = getPage(skip, true);
+            ODataFeed pdf = getPage(skip, true, skippedProducts);
             this.update_created = true;
             if (pdf.getEntries().isEmpty()) // No more products
             {
@@ -855,9 +1008,27 @@ public class ODataProductSynchronizer extends Synchronizer
 
             skip += pdf.getEntries().size();
 
-            for (ODataEntry pdt: pdf.getEntries())
+            for (ODataEntry pdt : pdf.getEntries())
             {
                String uuid = (String) pdt.getProperties().get("Id");
+
+               if (skippedProducts)
+               {
+                  // Get the number of trials
+                  int cpt = skippedProductsMap.get(uuid);
+
+                  // In this case, we retry too many times. We remove the product from the map
+                  if (cpt >= this.retriesSkippedProduct)
+                  {
+                     LOGGER.info("Synchronizer#{} Product of UUID {} abandonned - Too many trials ", getId(), uuid);
+                     skippedProductsMap.remove(uuid);
+                     continue;
+                  }
+
+                  // Increment the trials for this product
+                  skippedProductsMap.put(uuid, ++cpt);
+               }
+
                if (exists(uuid))
                {
                   LOGGER.info("Synchronizer#{} Product of UUID {} already exists, skipping", getId(), uuid);
@@ -867,48 +1038,59 @@ public class ODataProductSynchronizer extends Synchronizer
                      this.dateChanged = true;
                      if (LOGGER.isDebugEnabled())
                      {
-                        LOGGER.debug("Synchronizer#{} Product {} safely skipped, new LCD={}",
-                              getId(), uuid, DateFormatter.format(updatedLastCreationDate));
+                        LOGGER.debug("Synchronizer#{} Product {} safely skipped, new LCD={}", getId(), uuid,
+                              DateFormatter.format(updatedLastCreationDate));
                      }
                   }
+                  removeProductsFromSkippedMap(skippedProducts, uuid);
                   continue;
                }
                if (!ProductSynchronizerUtils.isOnline(pdt))
                {
-                  LOGGER.debug("Synchronizer#{} Product {} is not online", getId(), pdt.getProperties().get("Name"));
+                  LOGGER.info("Synchronizer#{} Product {} is not online", getId(), pdt.getProperties().get("Name"));
                   if (updateLastCreated)
                   {
                      updatedLastCreationDate = getCreationDate(pdt);
                      this.dateChanged = true;
                   }
+                  if (syncOfflineProduct)
+                  {
+                     LOGGER.info("Synchronizer#{} Offline product UUID {} will be synchronized", getId(), uuid);
+                     int nbOfflineProductsSync = synchronizeOfflineProducts(pdt, null, null);
+                     res += nbOfflineProductsSync;
+                  }
+                  removeProductsFromSkippedMap(skippedProducts, uuid);
                   continue;
                }
 
                if (!validateFootprint(pdt))
                {
-                  LOGGER.info("Synchronizer#{} Product of UUID {} does not match the geographic filter",
-                        getId(), (String) pdt.getProperties().get("Id"));
+                  LOGGER.info("Synchronizer#{} Product of UUID {} does not match the geographic filter", getId(),
+                        (String) pdt.getProperties().get("Id"));
                   if (updateLastCreated)
                   {
                      updatedLastCreationDate = getCreationDate(pdt);
                      this.dateChanged = true;
                   }
+                  removeProductsFromSkippedMap(skippedProducts, uuid);
                   continue;
                }
                updateLastCreated = false;
 
-               IngestibleODataProduct product = entryToProducts(pdt, true);
+               IngestibleODataProduct product = entryToProducts(pdt, true, true);
 
                // Avoid downloading of the same product several times
                // and run post-filters of the product to download
                if (isAlreadyQueued(product))
                {
+                  removeProductsFromSkippedMap(skippedProducts, product.getUuid());
                   continue;
                }
                count--;
                res++;
 
                queue(product);
+               removeProductsFromSkippedMap(skippedProducts, product.getUuid());
                LOGGER.info("Synchronizer#{} added product {} to the queue ", getId(), product.getIdentifier());
             }
          }
@@ -931,46 +1113,102 @@ public class ODataProductSynchronizer extends Synchronizer
       return res;
    }
 
+   private void removeProductsFromSkippedMap(boolean skippedProducts, String uuid)
+   {
+      if (skippedProducts)
+      {
+         skippedProductsMap.remove(uuid);
+      }
+   }
+
    /**
     * Retrieve new/updated products.
     *
     * @return how many products have been retrieved
     */
-   private int getNewProducts() throws InterruptedException
+   private int getNewProducts(boolean skippedProducts) throws InterruptedException
    {
       int res = 0;
       int skip = 0;
       Counter successCounter = METRIC_REGISTRY.counter("prod_sync.sync" + getId() + ".counters.success");
       Counter failureCounter = METRIC_REGISTRY.counter("prod_sync.sync" + getId() + ".counters.failure");
+
       try
       {
-         ODataFeed pdf = getPage(null, true);
+         ODataFeed pdf = getPage(null, true, skippedProducts);
 
          // For each entry, creates a DataBase Object
          for (ODataEntry pdt: pdf.getEntries())
          {
             String uuid = (String) pdt.getProperties().get("Id");
+            
+            if (skippedProducts)
+            {
+             //Get the number of trials
+               int cpt = skippedProductsMap.get(uuid);
+               
+               //In this case, we retry too many times. We remove the product from the map
+               if (cpt >= this.retriesSkippedProduct)
+               {
+                  LOGGER.info("Synchronizer#{} Product of UUID {} abandonned - Too many trials ", getId(), uuid);
+                  skippedProductsMap.remove(uuid);
+                  continue;
+               }
+               
+               //Increment the trials for this product
+               skippedProductsMap.put(uuid, ++cpt);
+            }
+            
             if (exists(uuid))
             {
                LOGGER.info("Synchronizer#{} Product of UUID {} already exists", getId(), uuid);
-               this.lastCreated.setTime(getCreationDate(pdt));
-               this.dateChanged = true;
+               if (skippedProducts)
+               {
+                  //remove the product from skippedMap
+                  skippedProductsMap.remove(uuid);
+               }
+               else
+               {
+                  this.lastCreated.setTime(getCreationDate(pdt));
+                  this.dateChanged = true;
+               }
                continue;
             }
+            //Case product is offline
             if (!ProductSynchronizerUtils.isOnline(pdt))
             {
-               LOGGER.info("Synchronizer#{} Product of UUID {} is not online", getId(), uuid);
-               this.lastCreated.setTime(getCreationDate(pdt));
-               this.dateChanged = true;
+               LOGGER.debug("Synchronizer#{} Product of UUID {} is not online", getId(), uuid);
+               if (!skippedProducts)
+               {
+                  this.lastCreated.setTime(getCreationDate(pdt));
+                  this.dateChanged = true;
+               }
+               if (syncOfflineProduct)
+               {
+                  LOGGER.debug("Synchronizer#{} Offline product UUID {} will be synchronized", getId(), uuid);
+                  int nbOfflineProducstSync = synchronizeOfflineProducts(pdt,failureCounter, successCounter);
+                  res += nbOfflineProducstSync;
+               }
+               else
+               {
+                  removeProductsFromSkippedMap(skippedProducts, uuid);
+               }
                continue;
             }
 
             if (!validateFootprint(pdt))
             {
-               LOGGER.info("Synchronizer#{} Product of UUID {} does not match the geographic filter",
+               LOGGER.debug("Synchronizer#{} Product of UUID {} does not match the geographic filter",
                      getId(), (String) pdt.getProperties().get("Id"));
-               this.lastCreated.setTime(getCreationDate(pdt));
-               this.dateChanged = true;
+               if (skippedProducts)
+               {
+                  skippedProductsMap.remove(uuid);
+               }
+               else
+               {
+                  this.lastCreated.setTime(getCreationDate(pdt));
+                  this.dateChanged = true;
+               }
                continue;
             }
 
@@ -990,14 +1228,19 @@ public class ODataProductSynchronizer extends Synchronizer
                   LOGGER.warn("Synchronizer#{} PRODUCT SKIPPED from '{}', creationDate: {}",
                         getId(), origin, creationDate);
                   skip++;
-                  // force lsatCreated update in case of skip
-                  this.lastCreated.setTime(getCreationDate(pdt));
-                  this.dateChanged = true;
+                  skippedProductsMap.put(uuid, 0);
+                  
+                  if (!skippedProducts)
+                  {
+                     // force lastCreated update in case of skip
+                     this.lastCreated.setTime(getCreationDate(pdt));
+                     this.dateChanged = true;
+                  }
                }
                continue;
             }
 
-            IngestibleODataProduct product = entryToProducts(pdt, false);
+            IngestibleODataProduct product = entryToProducts(pdt, false, true);
 
             String productUuid = product.getUuid();
             // check product accessibility
@@ -1050,9 +1293,13 @@ public class ODataProductSynchronizer extends Synchronizer
                   LOGGER.warn("Synchronizer#{} PRODUCT SKIPPED from '{}', creationDate: {}",
                         getId(), product.getOrigin(), product.getCreationDate());
                   skip++;
-                  // force lsatCreated update in case of skip
-                  this.lastCreated.setTime(getCreationDate(pdt));
-                  this.dateChanged = true;
+                  skippedProductsMap.put(productUuid,0);
+                  if (!skippedProducts)
+                  {
+                     // force lastCreated update in case of skip
+                     this.lastCreated.setTime(getCreationDate(pdt));
+                     this.dateChanged = true;
+                  }
                   continue;
                }
             }
@@ -1073,9 +1320,13 @@ public class ODataProductSynchronizer extends Synchronizer
                LOGGER.warn("Synchronizer#{} PRODUCT SKIPPED from '{}', creationDate: {}",
                      getId(), product.getOrigin(), product.getCreationDate());
                skip++;
-               // force lsatCreated update in case of skip
-               this.lastCreated.setTime(getCreationDate(pdt));
-               this.dateChanged = true;
+               skippedProductsMap.put(productUuid, 0);
+               if (!skippedProducts)
+               {
+                  // force lastCreated update in case of skip
+                  this.lastCreated.setTime(getCreationDate(pdt));
+                  this.dateChanged = true;
+               }
                continue;
             }
 
@@ -1084,8 +1335,15 @@ public class ODataProductSynchronizer extends Synchronizer
 
             res++;
             successCounter.inc();
-            this.lastCreated.setTime(getCreationDate(pdt));
-            this.dateChanged = true;
+            if (skippedProducts)
+            {
+               skippedProductsMap.remove(product.getUuid());
+            }
+            else
+            {
+               this.lastCreated.setTime(getCreationDate(pdt));
+               this.dateChanged = true;
+            }
 
             reportTimelinessMetrics(product);
 
@@ -1110,26 +1368,101 @@ public class ODataProductSynchronizer extends Synchronizer
       return res;
    }
 
+   private int synchronizeOfflineProducts(ODataEntry pdt, Counter failureCounter, Counter successCounter)
+   {
+      try
+      {
+         int res = 0;
+         IngestibleODataProduct product = entryToProducts(pdt, false, false);
+         String productUuid = product.getUuid();
+         try
+         {
+            // adding product and derived products
+            // If there is a problem to access the QL or the thumbnail(resource not available) the process stopped
+            // In fact, no information about the product is added (metadata and derived product references)
+            DERIVED_PRODUCT_STORE_SERVICE.addDefaultDerivedProductReferences(product);
+            METADATA_SERVICE.addProduct(product, targetCollectionName);
+         }
+         catch (StoreException e)
+         {
+            LOGGER.error("Synchronizer#{} Cannot synchronise product '{}'", getId(), productUuid, e);
+            if (failureCounter != null)
+            {
+               failureCounter.inc();
+            }
+            if (!this.skipOnError)
+            {
+               throw new SyncException(e);
+            }
+            LOGGER.warn("Synchronizer#{} PRODUCT SKIPPED from '{}', creationDate: {}", getId(), product.getOrigin(),
+                  product.getCreationDate());
+            skippedProductsMap.put(productUuid, 0);
+            // force lastCreated update in case of skip
+            this.lastCreated.setTime(getCreationDate(pdt));
+            this.dateChanged = true;
+            return res;
+         }
+
+         LOGGER.info("Synchronizer#{} Offline Product {} ({} bytes compressed) successfully synchronized from {}",
+               getId(), product.getIdentifier(), product.getProperty(ProductConstants.DATA_SIZE),
+               this.client.getServiceRoot());
+
+         res++;
+         if (successCounter != null)
+         {
+            successCounter.inc();
+         }
+         this.lastCreated.setTime(getCreationDate(pdt));
+         this.dateChanged = true;
+
+         reportTimelinessMetrics(product);
+
+         // Checks if we have to abandon the current pass
+         if (Thread.interrupted())
+         {
+            throw new InterruptedException();
+         }
+
+         return res;
+      }
+      catch (ODataException | IOException | InterruptedException
+            | MissingProductsException ex)
+      {
+         LOGGER.error("Synchronizer#{} OData failure", getId(), ex);
+         throw new SyncException(ex);
+      }
+   }
+
    @Override
    public boolean synchronize() throws InterruptedException
    {
       int retrieved = 0;
+      int retrievedSkipped = 0;
 
       LOGGER.info("Synchronizer#{} started", getId());
       try (Timer.Context ctx = METRIC_REGISTRY.timer("prod_sync.sync" + getId() + ".timer").time())
       {
+         if (processSkippedTurns >= MAX_TURNS_SKIPPED_PRODUCTS)
+         {
+            checkSkippedProducts();
+         }
+         else
+         {
+            incrementProcessSkippedTurns();
+         }
+         
          if (this.copyProduct)
          {
             // synchronization with copy
             if (checkDownloadTasks())
             {
-               retrieved = getAndCopyNewProduct();
+               retrieved = getAndCopyNewProduct(false);
             }
          }
          else
          {
             // synchronization without copy
-            retrieved = getNewProducts();
+            retrieved = getNewProducts(false);
          }
          if (Thread.interrupted())
          {
@@ -1138,6 +1471,7 @@ public class ODataProductSynchronizer extends Synchronizer
       }
       catch (LockAcquisitionException | CannotAcquireLockException e)
       {
+         LOGGER.warn("Synchronizer#{} - An exception occured {} Skipped products found", getId(), e);
          throw new InterruptedException(e.getMessage());
       }
       finally
@@ -1150,8 +1484,102 @@ public class ODataProductSynchronizer extends Synchronizer
             this.dateChanged = false;
          }
       }
+      return retrieved + retrievedSkipped > 0;
+   }
 
-      return retrieved > 0;
+   private void checkSkippedProducts() throws InterruptedException
+   {
+      //First check skipped product before each sync
+      if (skippedProductsMap != null && !skippedProductsMap.isEmpty())
+      {
+         LOGGER.debug("Synchronizer#{} - Execute the thread for skipped products", getId());
+         ExecutorService executor = Executors.newSingleThreadExecutor();
+         @SuppressWarnings("unchecked")
+         Future<String> future = executor.submit(new Callable()
+         {
+
+            public String call() throws Exception
+            {
+               return String.valueOf(processSkippedProducts());
+            }
+         });
+         try
+         {
+            future.get(this.getSkippedProductsTimeout(), TimeUnit.MILLISECONDS);  //timeout in milliseconds
+         }
+         catch (TimeoutException | ExecutionException e)
+         {
+            LOGGER.warn("Synchronizer#{} - skipped products - Exception {} }", getId(), e);
+         }
+         executor.shutdownNow();
+      }
+      setProcessSkippedTurns(0);
+   }
+
+   private String buildQueryFilterForSkippedProducts(Integer optionalSkip)
+   {
+      // If we do not have skipped products, no need to continue
+      if (skippedProductsMap == null || skippedProductsMap.isEmpty())
+      {
+         return null;
+      }
+
+      StringBuilder filterBuilder = new StringBuilder("(");
+      Object[] tabUuid = skippedProductsMap.keySet().toArray();
+      int length =  tabUuid.length;
+      
+      if (optionalSkip != null && optionalSkip > 0)
+      {
+         length = optionalSkip;
+      }
+      
+      for (int i=0; i<length; i++)
+      {
+         if (i == 0)
+          {
+             filterBuilder.append("Id eq '").append(tabUuid[i].toString()).append("' ");
+          }
+          else
+          {
+             filterBuilder.append("or Id eq '").append(tabUuid[i].toString()).append("' ");
+          }
+      }
+
+      filterBuilder.append(")");
+      LOGGER.debug("Synchronizer#{} - Filter for skipped products: {}", getId(), filterBuilder.toString());
+      return filterBuilder.toString();
+   }
+   
+   /**
+    * Process skipped products which was found during previous launching
+    * @return
+    * @throws InterruptedException 
+    */
+   private int processSkippedProducts() throws InterruptedException
+   {
+      int retrieved = 0;
+      try
+      {
+         if (this.copyProduct)
+         {
+            // synchronization with copy
+            if (checkDownloadTasks())
+            {
+               retrieved = getAndCopyNewProduct(true);
+            }
+         }
+         else
+         {
+            // synchronization without copy
+            retrieved = getNewProducts(true);
+         }
+         LOGGER.info("Synchronizer#{} - {} skipped products copied", getId(), retrieved);
+      }
+      catch (LockAcquisitionException | CannotAcquireLockException e)
+      {
+         throw new InterruptedException(e.getMessage());
+      }
+      return retrieved;
    }
 
    @Override
@@ -1188,9 +1616,54 @@ public class ODataProductSynchronizer extends Synchronizer
       return "OData Product Synchronizer on " + syncConf.getServiceUrl();
    }
 
+   public int getRetriesSkippedProduct()
+   {
+      return retriesSkippedProduct;
+   }
+
+   public void setRetriesSkippedProduct(int retriesSkippedProduct)
+   {
+      this.retriesSkippedProduct = retriesSkippedProduct;
+   }
+
+   public long getSkippedProductsTimeout()
+   {
+      return skippedProductsTimeout;
+   }
+
+   public void setSkippedProductsTimeout(long skippedProductsTimeout)
+   {
+      this.skippedProductsTimeout = skippedProductsTimeout;
+   }
+   
+   public int getProcessSkippedTurns()
+   {
+      return processSkippedTurns;
+   }
+
+   private void incrementProcessSkippedTurns()
+   {
+      ++processSkippedTurns;
+   }
+   
+   private void setProcessSkippedTurns(int processSkippedTurn)
+   {
+      this.processSkippedTurns = processSkippedTurn;
+   }
+
    /** Creates a client producer that produces HTTP Basic auth aware clients. */
-   private class BasicAuthHttpClientProducer implements HttpAsyncClientProducer
+   public class BasicAuthHttpClientProducer implements HttpAsyncClientProducer
    {
+      public String getUsername()
+      {
+        return serviceUser;
+      }
+
+      public String getPassword()
+      {
+        return servicePass;
+      }
+
       @Override
       public CloseableHttpAsyncClient generateClient()
       {
diff --git a/core/src/main/java/fr/gael/dhus/sync/impl/ODataUserSynchronizer.java b/core/src/main/java/fr/gael/dhus/sync/impl/ODataUserSynchronizer.java
index 2e5d05366..5432ed4a5 100755
--- a/core/src/main/java/fr/gael/dhus/sync/impl/ODataUserSynchronizer.java
+++ b/core/src/main/java/fr/gael/dhus/sync/impl/ODataUserSynchronizer.java
@@ -29,10 +29,12 @@ import fr.gael.dhus.olingo.v1.entityset.SystemRoleEntitySet;
 import fr.gael.dhus.olingo.v1.entityset.UserEntitySet;
 import fr.gael.dhus.service.ISynchronizerService;
 import fr.gael.dhus.service.UserService;
+import fr.gael.dhus.service.exception.GDPREnabledException;
 import fr.gael.dhus.service.exception.RequiredFieldMissingException;
 import fr.gael.dhus.service.exception.RootNotModifiableException;
 import fr.gael.dhus.spring.context.ApplicationContextProvider;
 import fr.gael.dhus.sync.Synchronizer;
+import fr.gael.dhus.system.config.ConfigurationManager;
 
 import java.io.IOException;
 import java.net.URISyntaxException;
@@ -74,6 +76,9 @@ public class ODataUserSynchronizer extends Synchronizer
    /** User Service, to create user objects.  */
    private static final UserService USER_SERVICE =
          ApplicationContextProvider.getBean(UserService.class);
+   
+   private ConfigurationManager cfgManager =
+         ApplicationContextProvider.getBean(ConfigurationManager.class);
 
    /** An {@link ODataClient} configured to query another DHuS OData service. */
    private final ODataClient client;
@@ -158,6 +163,12 @@ public class ODataUserSynchronizer extends Synchronizer
    @Override
    public boolean synchronize() throws InterruptedException
    {
+    //FIXME: Check if GDPR is enabled
+      if (!cfgManager.isGDPREnabled())
+      {
+         LOGGER.warn ("GDPR enabled. User management not done by DHuS. Cannot synchronisze users.");
+         throw new InterruptedException ("GDPR enabled. User management not done by DHuS. Cannot synchronize users.");
+      }
       log(Level.INFO, "started");
       int created = 0, updated = 0, skipped = 0;
       try
@@ -374,7 +385,7 @@ public class ODataUserSynchronizer extends Synchronizer
                   log(Level.ERROR, "Namesake '" + username + "' detected!");
                }
             }
-            catch (RootNotModifiableException e) { } // Ignored exception
+            catch (GDPREnabledException | RootNotModifiableException e) { } // Ignored exception
             catch (RequiredFieldMissingException | RuntimeException e)
             {
                // The user service throws runtime exceptions, which is bad practice
diff --git a/core/src/main/java/fr/gael/dhus/system/config/ConfigurationManager.java b/core/src/main/java/fr/gael/dhus/system/config/ConfigurationManager.java
index 2481be6eb..fee36f4c9 100644
--- a/core/src/main/java/fr/gael/dhus/system/config/ConfigurationManager.java
+++ b/core/src/main/java/fr/gael/dhus/system/config/ConfigurationManager.java
@@ -445,6 +445,24 @@ public class ConfigurationManager
       return loader.getConf().getSystemConfiguration().getAdministratorConfiguration();
    }
 
+   public boolean isGDPREnabled()
+   {
+      if (loader.getConf().getSystemConfiguration().getGdprConfiguration() == null)
+      {
+         return false;
+      }
+      return loader.getConf().getSystemConfiguration().getGdprConfiguration().isActive();
+   }
+   
+   public String getSAMLUserId()
+   {
+      if (loader.getConf().getSystemConfiguration().getGdprConfiguration() == null)
+      {
+         return null;
+      }
+      return loader.getConf().getSystemConfiguration().getGdprConfiguration().getSAMLUserId();
+   }
+
    public NameConfiguration getNameConfiguration()
    {
       return loader.getConf().getSystemConfiguration().getNameConfiguration();
diff --git a/core/src/main/java/fr/gael/dhus/system/init/DhusInitializer.java b/core/src/main/java/fr/gael/dhus/system/init/DhusInitializer.java
index 603d4815f..99d013c29 100644
--- a/core/src/main/java/fr/gael/dhus/system/init/DhusInitializer.java
+++ b/core/src/main/java/fr/gael/dhus/system/init/DhusInitializer.java
@@ -29,6 +29,7 @@ import org.springframework.stereotype.Component;
 import fr.gael.dhus.database.dao.UserDao;
 import fr.gael.dhus.database.dao.interfaces.DaoListener;
 import fr.gael.dhus.database.object.User;
+import fr.gael.dhus.system.config.ConfigurationManager;
 
 /**
  * Gather all the DHuS initialization required by the web services.
@@ -38,7 +39,10 @@ import fr.gael.dhus.database.object.User;
 public class DhusInitializer implements InitializingBean
 {
    private static final Logger LOGGER = LogManager.getLogger(DhusInitializer.class);
-   
+
+   @Autowired
+   private ConfigurationManager cfgManager;
+
    @Autowired
    private UserDao userDao;
    
@@ -49,8 +53,11 @@ public class DhusInitializer implements InitializingBean
    @Override
    public void afterPropertiesSet () throws Exception
    {
-      LOGGER.debug("Adding USER listeners.");
-      userDao.addListener (listener);
+      if(!cfgManager.isGDPREnabled())
+      {
+         LOGGER.debug("Adding USER listeners.");
+         userDao.addListener (listener);
+      }
    }
 
 }
diff --git a/core/src/main/java/fr/gael/dhus/util/http/BasicAuthHttpClientProducer.java b/core/src/main/java/fr/gael/dhus/util/http/BasicAuthHttpClientProducer.java
index 37e301f08..446525b4d 100644
--- a/core/src/main/java/fr/gael/dhus/util/http/BasicAuthHttpClientProducer.java
+++ b/core/src/main/java/fr/gael/dhus/util/http/BasicAuthHttpClientProducer.java
@@ -54,6 +54,16 @@ public class BasicAuthHttpClientProducer implements HttpAsyncClientProducer
       this.timeout = timeout;
    }
 
+   public String getUsername()
+   {
+     return username;
+   }
+
+   public String getPassword()
+   {
+     return password;
+   }
+
    @Override
    public CloseableHttpAsyncClient generateClient()
    {
diff --git a/core/src/main/java/fr/gael/dhus/util/http/InterruptibleHttpClient.java b/core/src/main/java/fr/gael/dhus/util/http/InterruptibleHttpClient.java
index 7ef42b318..4677fb251 100755
--- a/core/src/main/java/fr/gael/dhus/util/http/InterruptibleHttpClient.java
+++ b/core/src/main/java/fr/gael/dhus/util/http/InterruptibleHttpClient.java
@@ -26,10 +26,17 @@ import java.nio.channels.Channels;
 import java.nio.channels.ClosedChannelException;
 import java.nio.channels.InterruptibleChannel;
 import java.nio.channels.WritableByteChannel;
+import java.nio.charset.StandardCharsets;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 
+import fr.gael.dhus.sync.impl.ODataProductSynchronizer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import org.apache.commons.net.util.Base64;
 import org.apache.http.HttpException;
+import org.apache.http.HttpHeaders;
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpDelete;
@@ -59,6 +66,7 @@ import org.apache.http.protocol.HttpContext;
  */
 public class InterruptibleHttpClient
 {
+   private static final Logger LOGGER = LogManager.getLogger(InterruptibleHttpClient.class);
 
    /** An HttpClient producer. */
    private final HttpAsyncClientProducer clientProducer;
@@ -113,6 +121,28 @@ public class InterruptibleHttpClient
       // Creates a new client for each request, because we want to close it to interrupt the request.
       try (CloseableHttpAsyncClient httpClient = clientProducer.generateClient())
       {
+         if (clientProducer instanceof BasicAuthHttpClientProducer)
+         {
+            BasicAuthHttpClientProducer cp = (BasicAuthHttpClientProducer) clientProducer;
+            String username = cp.getUsername();
+            String password = cp.getPassword();
+            // Force basic auth in request
+            String auth = username + ":" + password;
+            byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
+            String authHeader = "Basic " + new String(encodedAuth);
+            request.addHeader(HttpHeaders.AUTHORIZATION, authHeader);
+         }
+         else if (clientProducer instanceof ODataProductSynchronizer.BasicAuthHttpClientProducer)
+         {
+            ODataProductSynchronizer.BasicAuthHttpClientProducer cp = (ODataProductSynchronizer.BasicAuthHttpClientProducer) clientProducer;
+            String username = cp.getUsername();
+            String password = cp.getPassword();
+            // Force basic auth in request
+            String auth = username + ":" + password;
+            byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
+            String authHeader = "Basic " + new String(encodedAuth);
+            request.addHeader(HttpHeaders.AUTHORIZATION, authHeader);
+         }
 
          HttpAsyncRequestProducer producer = HttpAsyncMethods.create(request);
          // Creates a consumer callback that is called each time bytes are received
diff --git a/core/src/main/java/org/dhus/migration/GDPRUsersMigration.java b/core/src/main/java/org/dhus/migration/GDPRUsersMigration.java
new file mode 100644
index 000000000..feeb0160b
--- /dev/null
+++ b/core/src/main/java/org/dhus/migration/GDPRUsersMigration.java
@@ -0,0 +1,129 @@
+package org.dhus.migration;
+
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.io.IoBuilder;
+import org.springframework.context.support.ClassPathXmlApplicationContext;
+
+import fr.gael.dhus.util.UncaughtExceptionHandler;
+
+/**
+ * GDPR users migration to clean users data 
+ */
+public class GDPRUsersMigration
+{
+   private static final Logger LOGGER;
+
+   // Migration context location
+   private static final String MIGR_CTX = "classpath:fr/gael/dhus/spring/dhus-core-gdpr-users-migration.xml";
+
+   private static String JDBCDriver = "";
+   private static String JDBCUrl = "";
+   private static String username = "";
+   private static String password = "";
+
+   // Getters used by the migration context (SpEL expressions)
+
+   public static String getJDBCDriver()
+   {
+      return JDBCDriver;
+   }
+
+   public static String getJDBCUrl()
+   {
+      return JDBCUrl;
+   }
+
+   public static String getUsername()
+   {
+      return username;
+   }
+
+   public static String getPassword()
+   {
+      return password;
+   }
+
+   static
+   {
+      // Sets up the JUL --> Log4J brigde
+      System.setProperty("java.util.logging.manager", "org.apache.logging.log4j.jul.LogManager");
+
+      // Sets version property
+      System.setProperty("fr.gael.dhus.version", "GDPRUsersMigration");
+
+      LOGGER = LogManager.getLogger();
+
+      // Transfer System.err in logger
+      IoBuilder iob = IoBuilder.forLogger(LOGGER).setAutoFlush(true).setLevel(Level.ERROR);
+      System.setErr(iob.buildPrintStream());
+   }
+
+   /**
+    * Entry point for the GDPR users migration 
+    *
+    * @param args JDBCDriver JDBCUrl username password
+    */
+   public static void main(String[] args)
+   {
+      Thread.setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler.INSTANCE);
+      Thread.currentThread().setUncaughtExceptionHandler(UncaughtExceptionHandler.INSTANCE);
+
+      LOGGER.info("GDPR Users Migration");
+
+      if (args.length < 2)
+      {
+         LOGGER.fatal("This tool expects 4 arguments: <JDBCDriver> <JDBCUrl> [username] [password]");
+         System.exit(1);
+      }
+
+      JDBCDriver = args[0];
+      JDBCUrl    = args[1];
+      if (args.length > 2) username = args[2];
+      if (args.length > 3) password = args[3];
+
+      LOGGER.info("Configuration:");
+      LOGGER.info("  JDBCDriver: '{}'", JDBCDriver);
+      LOGGER.info("  JDBCUrl   : '{}'", JDBCUrl);
+      LOGGER.info("  username  : '{}'", username);
+      LOGGER.info("  password  : '{}'", password);
+
+      try (ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(MIGR_CTX))
+      {
+         LOGGER.info("GDPR Users Migration finished!");
+      }
+
+      // Need to clean last changeset record from databasechangelog because it blocks dhus from starting in case of postgres db use.
+      // The reason is that this changeset/changelog is not added in the changelog-master.
+      // It is a manually executed script run when needed.
+      final String errorMessage = "Failed cleaning databasechangelog table after users migration. Please do it manually by executing the following sql query : " +
+            "delete from databasechangelog where id = 'cleanUsersForGDPR';";
+
+      try (Connection connection = DriverManager.getConnection(JDBCUrl, username, password);
+            PreparedStatement preparedStatement = connection
+                  .prepareStatement("delete from databasechangelog where id = 'cleanUsersForGDPR';");)
+      {
+         if(preparedStatement.executeUpdate() == 1)
+         {
+            LOGGER.info("Cleaning databasechangelog table successful!");
+         }
+         else
+         {
+            LOGGER.error(errorMessage);
+         }
+      }
+      catch (SQLException e)
+      {
+         LOGGER.error(errorMessage);
+         LOGGER.debug(e);
+      }
+
+      LOGGER.info("Success!");
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/OData4Client.java b/core/src/main/java/org/dhus/olingo/v2/OData4Client.java
new file mode 100644
index 000000000..3b4fdedbf
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/OData4Client.java
@@ -0,0 +1,235 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2;
+
+import java.io.InputStream;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Base64;
+import java.util.Objects;
+
+import org.apache.http.client.methods.HttpUriRequest;
+
+import org.apache.olingo.client.api.ODataClient;
+import org.apache.olingo.client.api.communication.request.cud.ODataDeleteRequest;
+import org.apache.olingo.client.api.communication.request.invoke.ODataInvokeRequest;
+import org.apache.olingo.client.api.communication.request.retrieve.ODataEntityRequest;
+import org.apache.olingo.client.api.communication.request.retrieve.ODataEntitySetIteratorRequest;
+import org.apache.olingo.client.api.communication.request.retrieve.ODataMediaRequest;
+import org.apache.olingo.client.api.communication.response.ODataDeleteResponse;
+import org.apache.olingo.client.api.communication.response.ODataRetrieveResponse;
+import org.apache.olingo.client.api.domain.ClientEntity;
+import org.apache.olingo.client.api.domain.ClientEntitySet;
+import org.apache.olingo.client.api.domain.ClientEntitySetIterator;
+import org.apache.olingo.client.api.http.HttpUriRequestFactory;
+import org.apache.olingo.client.api.uri.URIBuilder;
+import org.apache.olingo.client.core.ODataClientFactory;
+import org.apache.olingo.commons.api.http.HttpMethod;
+
+/**
+ * OData4 client.
+ */
+public class OData4Client
+{
+   private final String serviceRootURI;
+   private final String basicAuthHeader;
+   private final ODataClient client;
+
+   /**
+    * Creates an ODataClient for the given service URL and credentials (HTTP Basic authentication).
+    *
+    * @param serviceRootURL an URL to an OData service (root document). syntax: {@code http://hostname:port/path/...}
+    * @param username       HTTP basic username
+    * @param password       HTTP basic password
+    * @throws URISyntaxException param serviceRootURL cannot be parsed into a URI
+    */
+   public OData4Client(String serviceRootURL, String username, String password)
+         throws URISyntaxException
+   {
+      Objects.requireNonNull(serviceRootURL, "Parameter serviceRootURL must be set");
+      serviceRootURI = new URI(serviceRootURL).toString();
+
+      // Cannot use an EdmEnabledODataClient due to https://issues.apache.org/jira/browse/OLINGO-1440
+      // client = ODataClientFactory.getEdmEnabledClient(this.serviceRootURI);
+      client = ODataClientFactory.getClient();
+
+      if (username != null && password != null)
+      {
+         basicAuthHeader = "Basic " + Base64.getEncoder().encodeToString((username + ":" + password).getBytes());
+         // Decorator to add the HTTP basic Authorization header
+         final HttpUriRequestFactory clientFactory = client.getConfiguration().getHttpUriRequestFactory();
+         client.getConfiguration().setHttpUriRequestFactory((HttpMethod method, URI uri) ->
+         {
+            HttpUriRequest res = clientFactory.create(method, uri);
+            res.addHeader("Authorization", basicAuthHeader);
+            return res;
+         });
+      }
+      else
+      {
+         basicAuthHeader = null;
+      }
+   }
+
+   /**
+    * Perform bound action.
+    *
+    * @param key           entity key
+    * @param entitySetName Name of the entitySet
+    * @param actionName    action name
+    *
+    * @return the entity result of the action
+    */
+   public ClientEntity performAction(Object key, String entitySetName, String actionName)
+   {
+      final URI actionUri = getAbsoluteUri(entitySetName)
+            .appendKeySegment(key)
+            .appendActionCallSegment(actionName).build();
+
+      ODataInvokeRequest<ClientEntity> request = client.getInvokeRequestFactory()
+            .getActionInvokeRequest(actionUri, ClientEntity.class);
+      request.setAccept("application/json");
+
+      return request.execute().getBody();
+   }
+
+   /**
+    * Get a navigation link entity (ex: /odata/Orders(uuid)/Product).
+    *
+    * @param key           entity key
+    * @param entitySetName entityset name
+    * @param navLinkName   the name of the navigation link entity
+    *
+    * @return the navigation link entity
+    */
+   public ClientEntity navigationLinkEntity(Object key, String entitySetName, String navLinkName)
+   {
+      final URI navigationUri = getAbsoluteUri(entitySetName)
+            .appendKeySegment(key)
+            .appendNavigationSegment(navLinkName).build();
+
+      ODataEntityRequest<ClientEntity> request =
+            client.getRetrieveRequestFactory().getEntityRequest(navigationUri);
+      request.setAccept("application/json");
+
+      return request.execute().getBody();
+   }
+
+   /**
+    * Get filtered entities
+    *
+    * @param entitySetName the name of the entitySet to filter (may be null)
+    * @param filter        the filter expression (search must be null)
+    * @param search        the $search parameter (filter must be null)
+    *
+    * @return the filtered entities
+    */
+   public ClientEntitySetIterator<ClientEntitySet, ClientEntity> readEntitySet(String entitySetName,
+         String filter, String search)
+   {
+      URIBuilder uriBuilder = getAbsoluteUri(entitySetName);
+      if (filter != null)
+      {
+         uriBuilder.filter(filter);
+      }
+      else if (search != null)
+      {
+         uriBuilder.search(search);
+      }
+      URI absoluteUri = uriBuilder.build();
+
+      ODataEntitySetIteratorRequest<ClientEntitySet, ClientEntity> request =
+            client.getRetrieveRequestFactory().getEntitySetIteratorRequest(absoluteUri);
+      request.setAccept("application/json");
+      ODataRetrieveResponse<ClientEntitySetIterator<ClientEntitySet, ClientEntity>> response = request.execute();
+
+      return response.getBody();
+   }
+
+   /**
+    * Read single entity
+    *
+    * @param entitySetName the name of the entitySet to filter (may be null)
+    * @param key           entity key
+    *
+    * @return the single entity
+    */
+   public ClientEntity readSingleEntity(String entitySetName, Object key)
+   {
+      URI absoluteUri = getAbsoluteUri(entitySetName).appendKeySegment(key).build();
+      ODataEntityRequest<ClientEntity> request = client.getRetrieveRequestFactory().getEntityRequest(absoluteUri);
+      request.setAccept("application/json");
+      ODataRetrieveResponse<ClientEntity> response = request.execute();
+
+      return response.getBody();
+   }
+
+   /**
+    * Download the media attached to an entity.
+    *
+    * @param entitySetName the name of the entitySet
+    * @param key           the entity key
+    *
+    * @return an inputStream
+    */
+   public InputStream downloadEntityMedia(String entitySetName, Object key)
+   {
+      URI absoluteUri = getAbsoluteUri(entitySetName).appendKeySegment(key).build();
+
+      final ODataEntityRequest<ClientEntity> entityRequest = client.getRetrieveRequestFactory().getEntityRequest(absoluteUri);
+      final ODataMediaRequest streamRequest = client.getRetrieveRequestFactory().getMediaEntityRequest(absoluteUri);
+
+      entityRequest.setAccept("application/octet-stream");
+      final ODataRetrieveResponse<InputStream> streamResponse = streamRequest.execute();
+      return streamResponse.getBody();
+   }
+
+   /**
+    * Delete an entity.
+    *
+    * @param entitySetName the name of the entity to delete
+    * @param key           the entity key
+    * @return an http status code
+    */
+   public int deleteEntity(String entitySetName, Object key)
+   {
+      URI absoluteUri = getAbsoluteUri(entitySetName).appendKeySegment(key).build();
+      ODataDeleteRequest request = client.getCUDRequestFactory().getDeleteRequest(absoluteUri);
+      request.setAccept("application/json;odata.metadata=minimal");
+      ODataDeleteResponse response = request.execute();
+      return response.getStatusCode();
+   }
+
+   private URIBuilder getAbsoluteUri(String entitySetName)
+   {
+      return client.newURIBuilder(this.serviceRootURI).appendEntitySetSegment(entitySetName);
+   }
+
+   /**
+    * Returns the service root URI passed to the constructor.
+    *
+    * @return service root URI
+    */
+   public String getServiceRoot()
+   {
+      return serviceRootURI;
+   }
+
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/data/AbstractSynchronizerDataHandler.java b/core/src/main/java/org/dhus/olingo/v2/data/AbstractSynchronizerDataHandler.java
new file mode 100644
index 000000000..be9eb76ed
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/data/AbstractSynchronizerDataHandler.java
@@ -0,0 +1,76 @@
+package org.dhus.olingo.v2.data;
+
+import static fr.gael.odata.engine.data.DataHandlerUtil.containsProperty;
+
+import java.util.List;
+
+import org.apache.olingo.commons.api.data.ComplexValue;
+import org.apache.olingo.commons.api.data.Entity;
+import org.apache.olingo.commons.api.data.Property;
+import org.dhus.olingo.v2.datamodel.SynchronizerModel;
+import org.dhus.olingo.v2.datamodel.complex.CronComplexType;
+
+import fr.gael.dhus.database.object.config.synchronizer.SynchronizerConfiguration;
+import fr.gael.odata.engine.data.DataHandlerUtil;
+
+public abstract class AbstractSynchronizerDataHandler
+{
+   private static final Integer DEFAULT_PAGE_SIZE = new Integer(2);
+
+   public void updateSynchronizerProperties(Entity updatedEntity, SynchronizerConfiguration sync)
+   {
+      if (containsProperty(updatedEntity, SynchronizerModel.PROPERTY_LABEL))
+      {
+         sync.setLabel((String) DataHandlerUtil.getPropertyValue(updatedEntity,SynchronizerModel.PROPERTY_LABEL));
+      }
+      
+      if (containsProperty(updatedEntity, SynchronizerModel.PROPERTY_SERVICE_LOGIN))
+      {
+         sync.setServiceLogin((String) DataHandlerUtil.getPropertyValue(updatedEntity,SynchronizerModel.PROPERTY_SERVICE_LOGIN));
+      }
+      
+      if (containsProperty(updatedEntity, SynchronizerModel.PROPERTY_SERVICE_PASSWD))
+      {
+         sync.setServicePassword((String) DataHandlerUtil.getPropertyValue(updatedEntity,SynchronizerModel.PROPERTY_SERVICE_PASSWD));
+      }
+      
+      if (containsProperty(updatedEntity, SynchronizerModel.PROPERTY_SERVICE_URL))
+      {
+         sync.setServiceUrl((String) DataHandlerUtil.getPropertyValue(updatedEntity,SynchronizerModel.PROPERTY_SERVICE_URL));
+      }
+      
+      if (containsProperty(updatedEntity, SynchronizerModel.PROPERTY_PAGE_SIZE))
+      {
+         Long pageSize = (Long) DataHandlerUtil.getPropertyValue(updatedEntity,SynchronizerModel.PROPERTY_PAGE_SIZE);
+         sync.setPageSize(pageSize == null || pageSize <= 0 ? DEFAULT_PAGE_SIZE : pageSize.intValue());
+      }
+      
+      extractCron(updatedEntity, sync);
+      updateSpecificProperties(updatedEntity, sync);
+   }
+   
+   private void extractCron(Entity updatedEntity, SynchronizerConfiguration syncConf)
+   {
+      Property cronProperty = updatedEntity.getProperty(SynchronizerModel.PROPERTY_CRON);
+
+      if (cronProperty != null && cronProperty.getValue() != null)
+      {
+         List<Property> cronProperties = ((ComplexValue) cronProperty.getValue()).getValue();
+         for (Property property: cronProperties)
+         {
+            switch (property.getName())
+            {
+               case CronComplexType.PROPERTY_ACTIVE:
+                  syncConf.setActive((Boolean) property.getValue());
+                  break;
+
+               case CronComplexType.PROPERTY_SCHEDULE:
+                  syncConf.setSchedule((String) property.getValue());
+                  break;
+            }
+         }
+      }
+   }
+   
+   protected abstract void updateSpecificProperties(Entity updatedEntity, SynchronizerConfiguration sync);
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/data/CollectionDataHandler.java b/core/src/main/java/org/dhus/olingo/v2/data/CollectionDataHandler.java
index 3379180ae..5272e616b 100644
--- a/core/src/main/java/org/dhus/olingo/v2/data/CollectionDataHandler.java
+++ b/core/src/main/java/org/dhus/olingo/v2/data/CollectionDataHandler.java
@@ -22,8 +22,11 @@ package org.dhus.olingo.v2.data;
 import fr.gael.dhus.database.object.Collection;
 import fr.gael.dhus.database.object.Role;
 import fr.gael.dhus.database.object.config.scanner.ScannerConfiguration.Collections;
+import fr.gael.dhus.database.object.config.synchronizer.ProductSynchronizer;
+import fr.gael.dhus.database.object.config.synchronizer.SynchronizerConfiguration;
 import fr.gael.dhus.datastore.scanner.Scanner;
 import fr.gael.dhus.service.CollectionService;
+import fr.gael.dhus.service.ISynchronizerService;
 import fr.gael.dhus.service.exception.CollectionNameExistingException;
 import fr.gael.dhus.service.exception.RequiredFieldMissingException;
 import fr.gael.dhus.spring.context.ApplicationContextProvider;
@@ -46,7 +49,9 @@ import org.apache.olingo.server.api.uri.UriParameter;
 
 import org.dhus.olingo.v2.ODataSecurityManager;
 import org.dhus.olingo.v2.datamodel.CollectionModel;
+import org.dhus.olingo.v2.datamodel.ProductSynchronizerModel;
 import org.dhus.olingo.v2.datamodel.ScannerModel;
+import org.dhus.olingo.v2.datamodel.SynchronizerModel;
 import org.dhus.scanner.service.ScannerServiceImpl;
 
 public class CollectionDataHandler implements DataHandler
@@ -55,6 +60,8 @@ public class CollectionDataHandler implements DataHandler
          ApplicationContextProvider.getBean(CollectionService.class);
    private static final ScannerServiceImpl SCANNER_SERVICE =
          ApplicationContextProvider.getBean(ScannerServiceImpl.class);
+   private static final ISynchronizerService SYNC_SERVICE =
+         ApplicationContextProvider.getBean(ISynchronizerService.class);
 
    private Collection getCollectionFromParameters(List<UriParameter> keyParameters)
    {
@@ -130,6 +137,19 @@ public class CollectionDataHandler implements DataHandler
          }
          return entities;
       }
+      if (ProductSynchronizerModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()
+            .equals(sourceEntity.getType()))
+      {
+         ProductSynchronizer sync = (ProductSynchronizer)SYNC_SERVICE.getSynchronizerConfById((Long) sourceEntity.getProperty(SynchronizerModel.PROPERTY_ID).getValue(),
+               SynchronizerConfiguration.class);
+         EntityCollection entities = new EntityCollection();
+         String collectionName = sync.getTargetCollection();
+         if (collectionName != null)
+         {
+            entities.getEntities().add(toOlingoEntity(COLLECTION_SVC.getCollectionByName(collectionName)));
+         }
+         return entities;
+      }
       else
       {
          return null;
diff --git a/core/src/main/java/org/dhus/olingo/v2/data/DataStoreDataHandler.java b/core/src/main/java/org/dhus/olingo/v2/data/DataStoreDataHandler.java
index 0d2ef15a0..216bce7b3 100644
--- a/core/src/main/java/org/dhus/olingo/v2/data/DataStoreDataHandler.java
+++ b/core/src/main/java/org/dhus/olingo/v2/data/DataStoreDataHandler.java
@@ -1,6 +1,6 @@
 /*
  * Data Hub Service (DHuS) - For Space data distribution.
- * Copyright (C) 2017-2019 GAEL Systems
+ * Copyright (C) 2017-2020 GAEL Systems
  *
  * This file is part of DHuS software sources.
  *
@@ -19,40 +19,47 @@
  */
 package org.dhus.olingo.v2.data;
 
-import fr.gael.dhus.database.object.Role;
-import fr.gael.dhus.service.DataStoreService;
-import fr.gael.dhus.spring.context.ApplicationContextProvider;
-import fr.gael.odata.engine.data.DataHandler;
-import fr.gael.odata.engine.data.DataHandlerUtil;
-
+import java.math.BigDecimal;
+import java.sql.Timestamp;
+import java.time.LocalDateTime;
 import java.util.List;
 import java.util.Locale;
 
+import javax.xml.datatype.DatatypeConfigurationException;
+import javax.xml.datatype.DatatypeFactory;
+import javax.xml.datatype.XMLGregorianCalendar;
+
+import org.apache.commons.lang.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
 import org.apache.olingo.commons.api.data.ComplexValue;
 import org.apache.olingo.commons.api.data.Entity;
 import org.apache.olingo.commons.api.data.EntityCollection;
+import org.apache.olingo.commons.api.data.Link;
 import org.apache.olingo.commons.api.data.Property;
 import org.apache.olingo.commons.api.edm.EdmNavigationProperty;
 import org.apache.olingo.commons.api.http.HttpMethod;
 import org.apache.olingo.commons.api.http.HttpStatusCode;
 import org.apache.olingo.server.api.ODataApplicationException;
 import org.apache.olingo.server.api.uri.UriParameter;
-
 import org.dhus.olingo.v2.ODataSecurityManager;
 import org.dhus.olingo.v2.datamodel.AsyncDataStoreModel;
 import org.dhus.olingo.v2.datamodel.DataStoreModel;
 import org.dhus.olingo.v2.datamodel.EvictionModel;
 import org.dhus.olingo.v2.datamodel.GmpDataStoreModel;
 import org.dhus.olingo.v2.datamodel.HfsDataStoreModel;
-import org.dhus.olingo.v2.datamodel.ParamPdgsDataStoreModel;
+import org.dhus.olingo.v2.datamodel.HttpAsyncDataStoreModel;
+import org.dhus.olingo.v2.datamodel.LtaDataStoreModel;
+import org.dhus.olingo.v2.datamodel.OndaDataStoreModel;
 import org.dhus.olingo.v2.datamodel.OpenstackDataStoreModel;
+import org.dhus.olingo.v2.datamodel.ParamPdgsDataStoreModel;
 import org.dhus.olingo.v2.datamodel.PdgsDataStoreModel;
 import org.dhus.olingo.v2.datamodel.RemoteDhusDataStoreModel;
+import org.dhus.olingo.v2.datamodel.complex.CronComplexType;
 import org.dhus.olingo.v2.datamodel.complex.GMPConfigurationComplexType;
 import org.dhus.olingo.v2.datamodel.complex.MySQLConnectionInfoComplexType;
+import org.dhus.olingo.v2.datamodel.complex.ObjectStorageComplexType;
+import org.dhus.olingo.v2.datamodel.complex.OndaScannerComplexType;
 import org.dhus.olingo.v2.datamodel.complex.PatternReplaceComplexType;
 import org.dhus.olingo.v2.entity.TypeStore;
 import org.dhus.store.datastore.DataStore;
@@ -60,19 +67,32 @@ import org.dhus.store.datastore.DataStoreFactory;
 import org.dhus.store.datastore.DataStoreFactory.InvalidConfigurationException;
 import org.dhus.store.datastore.DataStoreManager;
 import org.dhus.store.datastore.config.AsyncDataStoreConf;
+import org.dhus.store.datastore.config.DataStoreConf;
 import org.dhus.store.datastore.config.DataStoreManager.UnavailableNameException;
 import org.dhus.store.datastore.config.DataStoreRestriction;
 import org.dhus.store.datastore.config.GmpDataStoreConf;
 import org.dhus.store.datastore.config.GmpDataStoreConf.Configuration;
 import org.dhus.store.datastore.config.GmpDataStoreConf.MysqlConnectionInfo;
 import org.dhus.store.datastore.config.HfsDataStoreConf;
-import org.dhus.store.datastore.config.ParamPdgsDataStoreConf;
+import org.dhus.store.datastore.config.HttpAsyncDataStoreConf;
+import org.dhus.store.datastore.config.LtaDataStoreConf;
 import org.dhus.store.datastore.config.NamedDataStoreConf;
+import org.dhus.store.datastore.config.ObjectStorageCredentialConf;
+import org.dhus.store.datastore.config.OndaDataStoreConf;
+import org.dhus.store.datastore.config.OndaScannerConf;
 import org.dhus.store.datastore.config.OpenStackDataStoreConf;
+import org.dhus.store.datastore.config.ParamPdgsDataStoreConf;
 import org.dhus.store.datastore.config.PatternReplace;
 import org.dhus.store.datastore.config.PdgsDataStoreConf;
 import org.dhus.store.datastore.config.RemoteDhusDataStoreConf;
 
+import fr.gael.dhus.database.object.Role;
+import fr.gael.dhus.database.object.config.cron.Cron;
+import fr.gael.dhus.service.DataStoreService;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.odata.engine.data.DataHandler;
+import fr.gael.odata.engine.data.DataHandlerUtil;
+
 /**
  * Provides data for DataStore entities.
  */
@@ -197,6 +217,120 @@ public class DataStoreDataHandler implements DataHandler
       }
       return configuration;
    }
+   
+   private ObjectStorageCredentialConf extractObjectStorageCredential(Entity entity, ObjectStorageCredentialConf objectStorageConf)
+   {
+      Property objectStorageCredentials = entity.getProperty(OndaDataStoreModel.PROPERTY_OBJECT_STORAGE_CREDENTIAL);
+      if (objectStorageCredentials != null && objectStorageCredentials.getValue() != null)
+      {
+         for (Property property : ((ComplexValue) objectStorageCredentials.getValue()).getValue())
+         {
+            switch (property.getName())
+            {     
+               case ObjectStorageComplexType.PROPERTY_PROVIDER:
+                  objectStorageConf.setProvider((String)property.getValue());
+                  break;
+                 
+               case ObjectStorageComplexType.PROPERTY_IDENTITY:
+                  objectStorageConf.setIdentity((String)property.getValue());
+                  break;
+                  
+               case ObjectStorageComplexType.PROPERTY_CREDENTIAL:
+                  objectStorageConf.setCredential((String)property.getValue());
+                  break;
+                  
+               case ObjectStorageComplexType.PROPERTY_URL:
+                  objectStorageConf.setUrl((String)property.getValue());
+                  break;
+                  
+               case ObjectStorageComplexType.PROPERTY_REGION:
+                  objectStorageConf.setRegion((String)property.getValue());
+                  break;
+                  
+            }
+         }
+         return objectStorageConf;
+      }
+      return null;
+   }
+
+   private OndaScannerConf extractOndaScanner(Entity entity, OndaScannerConf ondaScannerConf)
+   {
+      Property ondaScanner = entity.getProperty(OndaDataStoreModel.PROPERTY_ONDA_SCANNER);
+      if (ondaScanner != null && ondaScanner.getValue() != null)
+      {
+         for (Property property : ((ComplexValue) ondaScanner.getValue()).getValue())
+         {
+            switch (property.getName())
+            {
+               case OndaScannerComplexType.PROPERTY_OPENSEARCH_URL:
+                  ondaScannerConf.setOpensearchUrl((String)property.getValue());
+                  break;
+                  
+               case OndaScannerComplexType.PROPERTY_LAST_CREATION_DATE:
+                  Timestamp time = (Timestamp) property.getValue();
+                  
+                  LocalDateTime ldt = time.toLocalDateTime();
+
+                  XMLGregorianCalendar cal;
+                  try
+                  {
+                     cal = DatatypeFactory.newInstance().newXMLGregorianCalendar();
+
+                     cal.setYear(ldt.getYear());
+                     cal.setMonth(ldt.getMonthValue());
+                     cal.setDay(ldt.getDayOfMonth());
+                     cal.setHour(ldt.getHour());
+                     cal.setMinute(ldt.getMinute());
+                     cal.setSecond(ldt.getSecond());
+                     String nanos = "0." + StringUtils.leftPad(String.valueOf(ldt.getNano()), 9, '0');
+                     cal.setFractionalSecond(new BigDecimal(nanos));
+                     
+                     ondaScannerConf.setLastCreationDate(cal);
+                  }
+                  catch (DatatypeConfigurationException e)
+                  {
+                     LOGGER.error("Error while updating "+OndaScannerComplexType.PROPERTY_LAST_CREATION_DATE+".", e);
+                  }
+                  break;
+                  
+               case OndaScannerComplexType.PROPERTY_FILTER:
+                  ondaScannerConf.setFilter((String)property.getValue());
+                  break;
+                  
+               case OndaScannerComplexType.PROPERTY_PAGE_SIZE:
+                  Object pageSize = property.getValue();
+                  if (pageSize != null)
+                  {
+                     ondaScannerConf.setPageSize((int) pageSize);
+                  }
+                  break;
+
+               case OndaScannerComplexType.PROPERTY_CRON:
+                  if (ondaScannerConf.getCron() == null)
+                  {
+                     ondaScannerConf.setCron(new Cron());
+                  }
+                  for (Property cronProperty : ((ComplexValue) property.getValue()).getValue())
+                  {
+                     switch (cronProperty.getName())
+                     {
+                        case CronComplexType.PROPERTY_ACTIVE: ondaScannerConf.getCron()
+                        .setActive((boolean) cronProperty.getValue());
+                           break;
+                           
+                        case CronComplexType.PROPERTY_SCHEDULE: ondaScannerConf.getCron()
+                        .setSchedule((String) cronProperty.getValue());
+                           break;
+                     }
+                  }
+                  break;
+            }
+         }
+         return ondaScannerConf;
+      }
+      return null;
+   }
 
    @Override
    public EntityCollection getEntityCollectionData() throws ODataApplicationException
@@ -225,7 +359,10 @@ public class DataStoreDataHandler implements DataHandler
          {
             String dataStoreName = DataHandlerUtil.trimStringKeyParameter(keyParameter);
             NamedDataStoreConf dsConf = DS_SERVICE.getNamedDataStore(dataStoreName);
-            return toOlingoEntity(dsConf);
+            if (dsConf != null)
+            {
+               return toOlingoEntity(dsConf);
+            }
          }
       }
       return null;
@@ -236,49 +373,35 @@ public class DataStoreDataHandler implements DataHandler
    {
       ODataSecurityManager.checkPermission(Role.SYSTEM_MANAGER);
 
-      // Required properties
+      // check datastore name
       String datastoreName = DataHandlerUtil.<String>getRequiredProperty(entity, DataStoreModel.PROPERTY_NAME, String.class);
-
-      NamedDataStoreConf dataStore = null;
-
-      if (entity.getType().equals(HfsDataStoreModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()))
+      if (DS_MANAGER.getDataStoreByName(datastoreName) != null)
       {
-         HfsDataStoreConf hfsDataStore = new HfsDataStoreConf();
-         hfsDataStore.setPath((String) DataHandlerUtil.getPropertyValue(entity, HfsDataStoreModel.PROPERTY_PATH));
-
-         // if MaxFileDepth is null, set to 10
-         Object maxFileDepth = DataHandlerUtil.getPropertyValue(entity, HfsDataStoreModel.PROPERTY_MAXFILEDEPTH);
-         if (maxFileDepth == null)
-         {
-            hfsDataStore.setMaxFileNo(10);
-         }
-         else
+         throw new ODataApplicationException("The DataStore name '" + datastoreName + "' is unavailable", HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+      }
+      
+      // check cache name
+      Link link = entity.getNavigationLink(DataStoreModel.NAVIGATION_CACHE);
+      if (link != null)
+      {
+         Entity cacheEntity = link.getInlineEntity();
+         String cacheName = DataHandlerUtil.<String>getRequiredProperty(cacheEntity, DataStoreModel.PROPERTY_NAME, String.class);
+         if (DS_MANAGER.getDataStoreByName(cacheName) != null)
          {
-            hfsDataStore.setMaxFileNo((Integer) maxFileDepth);
+            throw new ODataApplicationException("The cache DataStore name '" + cacheName + "' is unavailable", HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
          }
+      }
 
-         Object maxItems = DataHandlerUtil.getPropertyValue(entity, HfsDataStoreModel.PROPERTY_MAXITEMS);
-         if (maxItems == null)
-         {
-            hfsDataStore.setMaxItems(1024);
-         }
-         else
-         {
-            hfsDataStore.setMaxItems((Integer) maxItems);
-         }
+      NamedDataStoreConf dataStore = null;
 
+      if (entity.getType().equals(HfsDataStoreModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()))
+      {  
+         HfsDataStoreConf hfsDataStore = createHfsDataStoreEntity(entity);
          dataStore = hfsDataStore;
       }
       else if (entity.getType().equals(OpenstackDataStoreModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()))
       {
-         OpenStackDataStoreConf openstackDataStore = new OpenStackDataStoreConf();
-         openstackDataStore.setProvider((String) DataHandlerUtil.getPropertyValue(entity, OpenstackDataStoreModel.PROPERTY_PROVIDER));
-         openstackDataStore.setIdentity((String) DataHandlerUtil.getPropertyValue(entity, OpenstackDataStoreModel.PROPERTY_IDENTITY));
-         openstackDataStore.setCredential((String) DataHandlerUtil.getPropertyValue(entity, OpenstackDataStoreModel.PROPERTY_CREDENTIAL));
-         openstackDataStore.setUrl((String) DataHandlerUtil.getPropertyValue(entity, OpenstackDataStoreModel.PROPERTY_URL));
-         openstackDataStore.setContainer((String) DataHandlerUtil.getPropertyValue(entity, OpenstackDataStoreModel.PROPERTY_CONTAINER));
-         openstackDataStore.setRegion((String) DataHandlerUtil.getPropertyValue(entity, OpenstackDataStoreModel.PROPERTY_REGION));
-
+         OpenStackDataStoreConf openstackDataStore = createOpenStackEntity(entity);
          dataStore = openstackDataStore;
       }
 
@@ -327,16 +450,68 @@ public class DataStoreDataHandler implements DataHandler
 
          // common async
          createAsyncDataStoreConf(pdgsDhusDataStore, entity);
-
-         pdgsDhusDataStore.setServiceUrl((String) DataHandlerUtil.getPropertyValue(entity, PdgsDataStoreModel.PROPERTY_SERVICE_URL));
-         pdgsDhusDataStore.setLogin((String) DataHandlerUtil.getPropertyValue(entity, PdgsDataStoreModel.PROPERTY_LOGIN));
-         pdgsDhusDataStore.setPassword((String) DataHandlerUtil.getPropertyValue(entity, PdgsDataStoreModel.PROPERTY_PASSWORD));
-         pdgsDhusDataStore.setMaxConcurrentsDownloads(((int) DataHandlerUtil.getPropertyValue(entity, PdgsDataStoreModel.PROPERTY_MAX_CONCURRENTS_DOWNLOADS)));
-         pdgsDhusDataStore.setInterval(((long) DataHandlerUtil.getPropertyValue(entity, PdgsDataStoreModel.PROPERTY_INTERVAL)));
+         // common httpAsync
+         createhttpAsyncDataStore(pdgsDhusDataStore, entity);
 
          dataStore = pdgsDhusDataStore;
       }
 
+      else if (entity.getType().equals(LtaDataStoreModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()))
+      {
+         LtaDataStoreConf ltaDataStoreConf = new LtaDataStoreConf();
+
+         // common async
+         createAsyncDataStoreConf(ltaDataStoreConf, entity);
+         // common httpAsync
+         createhttpAsyncDataStore(ltaDataStoreConf, entity);
+         // optional order
+         Object order = DataHandlerUtil.getPropertyValue(entity, LtaDataStoreModel.PROPERTY_ORDER);
+         if (order == null)
+         {
+            ltaDataStoreConf.setOrder(false);
+         }
+         else
+         {
+            ltaDataStoreConf.setOrder((boolean) order);
+         }
+         dataStore = ltaDataStoreConf;
+      }
+
+      else if (entity.getType().equals(OndaDataStoreModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()))
+      {
+         OndaDataStoreConf ondaDataStoreConf = new OndaDataStoreConf();
+
+         // common async
+         createAsyncDataStoreConf(ondaDataStoreConf, entity);
+         // common httpAsync
+         createhttpAsyncDataStore(ondaDataStoreConf, entity);
+         // optional order
+         Object order = DataHandlerUtil.getPropertyValue(entity, LtaDataStoreModel.PROPERTY_ORDER);
+         if (order == null)
+         {
+            ondaDataStoreConf.setOrder(false);
+         }
+         else
+         {
+            ondaDataStoreConf.setOrder((boolean) order);
+         }
+         // objectStorageCredentials
+         ObjectStorageCredentialConf objectStorageProperty = extractObjectStorageCredential(entity, new ObjectStorageCredentialConf());
+         if (objectStorageProperty != null)
+         {
+            ondaDataStoreConf.setObjectStorageCredential(objectStorageProperty);
+         }
+
+         // ondaScanner
+         OndaScannerConf ondaScannerProperty = extractOndaScanner(entity, new OndaScannerConf());
+         if (ondaScannerProperty != null)
+         {
+            ondaDataStoreConf.setOndaScanner(ondaScannerProperty);
+         }
+
+         dataStore = ondaDataStoreConf;
+      }
+
       // this means none of the expected type instantiated it
       if (dataStore == null)
       {
@@ -344,18 +519,7 @@ public class DataStoreDataHandler implements DataHandler
                HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
       }
 
-      // set properties common to all dataStore subtypes
-      dataStore.setName(datastoreName);
-      String restriction = (String) DataHandlerUtil.getPropertyValue(entity, DataStoreModel.PROPERTY_RESTRICTION);
-      if (restriction != null)
-      {
-         dataStore.setRestriction(DataStoreRestriction.fromValue(restriction));
-      }
-      dataStore.setPriority((Integer) DataHandlerUtil.getPropertyValue(entity, DataStoreModel.PROPERTY_PRIORITY));
-      dataStore.setMaximumSize((Long) DataHandlerUtil.getPropertyValue(entity, DataStoreModel.PROPERTY_MAXIMUMSIZE));
-      dataStore.setCurrentSize((Long) DataHandlerUtil.getPropertyValue(entity, DataStoreModel.PROPERTY_CURRENTSIZE));
-      dataStore.setAutoEviction((Boolean) DataHandlerUtil.getPropertyValue(entity, DataStoreModel.PROPERTY_AUTOEVICTION));
-      dataStore.setFilter((String) DataHandlerUtil.getPropertyValue(entity, DataStoreModel.PROPERTY_FILTER));
+      setCommonProperties(entity, dataStore);
 
       DataStore liveDataStore;
       try
@@ -375,9 +539,36 @@ public class DataStoreDataHandler implements DataHandler
    }
 
    private void createAsyncDataStoreConf(AsyncDataStoreConf asyncDataStore, Entity entity)
+         throws ODataApplicationException
    {
-      asyncDataStore.setHfsLocation((String) DataHandlerUtil.getPropertyValue(entity, AsyncDataStoreModel.PROPERTY_HFS_LOCATION));
-      asyncDataStore.setIsMaster(((Boolean) DataHandlerUtil.getPropertyValue(entity, AsyncDataStoreModel.PROPERTY_IS_MASTER)));
+      Link link = entity.getNavigationLink(DataStoreModel.NAVIGATION_CACHE);
+      Entity cacheEntity = link.getInlineEntity();
+
+      if (HfsDataStoreModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()
+            .equals(cacheEntity.getType()))
+      {
+         HfsDataStoreConf hfsCache = createHfsDataStoreEntity(cacheEntity);
+         setCommonProperties(cacheEntity, hfsCache);
+         asyncDataStore.setDataStore(hfsCache);
+      }
+      else if (OpenstackDataStoreModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()
+            .equals(cacheEntity.getType()))
+      {
+         OpenStackDataStoreConf openStackCache = createOpenStackEntity(cacheEntity);
+         setCommonProperties(cacheEntity, openStackCache);
+         asyncDataStore.setDataStore(openStackCache);
+      }
+
+      // isMaster
+      Object isMaster = DataHandlerUtil.getPropertyValue(entity, AsyncDataStoreModel.PROPERTY_IS_MASTER);
+      if(isMaster == null)
+      {
+         asyncDataStore.setIsMaster(false);   
+      }
+      else
+      {
+         asyncDataStore.setIsMaster((Boolean)(isMaster));
+      }
 
       // extract product naming
       asyncDataStore.setPatternReplaceIn(extractPatternReplace(entity, new PatternReplace(), true));
@@ -391,6 +582,37 @@ public class DataStoreDataHandler implements DataHandler
       asyncDataStore.setMaxParallelFetchRequestsPerUser((Integer) DataHandlerUtil.getPropertyValue(entity, AsyncDataStoreModel.PROPERTY_MAX_PFRPU));
    }
 
+   private void createhttpAsyncDataStore(HttpAsyncDataStoreConf httpAsyncDataStoreConf, Entity entity)
+   {
+      // ServiceUrl
+      httpAsyncDataStoreConf.setServiceUrl((String) DataHandlerUtil.getPropertyValue(entity, HttpAsyncDataStoreModel.PROPERTY_SERVICE_URL));
+      // Login
+      httpAsyncDataStoreConf.setLogin((String) DataHandlerUtil.getPropertyValue(entity, HttpAsyncDataStoreModel.PROPERTY_LOGIN));
+      // Password
+      httpAsyncDataStoreConf.setPassword((String) DataHandlerUtil.getPropertyValue(entity, HttpAsyncDataStoreModel.PROPERTY_PASSWORD));
+      
+      // MaxConcurrentDownloads
+      Object maxConcurrentsDownloads = DataHandlerUtil.getPropertyValue(entity, HttpAsyncDataStoreModel.PROPERTY_MAX_CONCURRENTS_DOWNLOADS);
+      if(maxConcurrentsDownloads == null)
+      {
+         httpAsyncDataStoreConf.setMaxConcurrentsDownloads(4);
+      }
+      else
+      {
+         httpAsyncDataStoreConf.setMaxConcurrentsDownloads((int)maxConcurrentsDownloads);
+      }   
+      // Interval
+      Object interval = DataHandlerUtil.getPropertyValue(entity, HttpAsyncDataStoreModel.PROPERTY_INTERVAL);
+      if (interval == null)
+      {
+         httpAsyncDataStoreConf.setInterval((long) 600000);
+      }
+      else
+      {
+         httpAsyncDataStoreConf.setInterval((long) interval);
+      }
+   }
+
    @Override
    public void updateEntityData(List<UriParameter> keyParameters, Entity updatedEntity, HttpMethod httpMethod)
          throws ODataApplicationException
@@ -411,198 +633,192 @@ public class DataStoreDataHandler implements DataHandler
       // get updated properties
       List<Property> updatedProperties = updatedEntity.getProperties();
 
-      for (Property updatedproperty: updatedProperties)
+      if (updatedProperties.isEmpty() && dataStoreConf instanceof AsyncDataStoreConf)
       {
-         String propertyName = updatedproperty.getName();
-
-         // set properties common to all datastores
-         if (propertyName.equals(DataStoreModel.PROPERTY_RESTRICTION))
-         {
-            dataStoreConf.setRestriction(DataStoreRestriction.fromValue(restriction));
-         }
-         if (propertyName.equals(DataStoreModel.PROPERTY_PRIORITY))
-         {
-            dataStoreConf.setPriority(priority);
-         }
-         if (propertyName.equals(DataStoreModel.PROPERTY_MAXIMUMSIZE))
-         {
-            dataStoreConf.setMaximumSize(maximumSize);
-         }
-         if (propertyName.equals(DataStoreModel.PROPERTY_AUTOEVICTION))
-         {
-            dataStoreConf.setAutoEviction(autoEviction);
-         }
-         if (propertyName.equals(DataStoreModel.PROPERTY_FILTER))
-         {
-            dataStoreConf.setFilter(filter);
-         }
-
-         if (dataStoreConf instanceof HfsDataStoreConf)
-         {
-            HfsDataStoreConf hfsDataStore = (HfsDataStoreConf) dataStoreConf;
-
-            if (propertyName.equals(HfsDataStoreModel.PROPERTY_PATH))
-            {
-               String path = (String) DataHandlerUtil.getPropertyValue(updatedEntity, HfsDataStoreModel.PROPERTY_PATH);
-               hfsDataStore.setPath(path);
-            }
-            if (propertyName.equals(HfsDataStoreModel.PROPERTY_MAXFILEDEPTH))
-            {
-               Integer maxFileDepth = (Integer) DataHandlerUtil.getPropertyValue(updatedEntity, HfsDataStoreModel.PROPERTY_MAXFILEDEPTH);
-               hfsDataStore.setMaxFileNo(maxFileDepth);
-            }
-            if (propertyName.equals(HfsDataStoreModel.PROPERTY_MAXITEMS))
-            {
-               Integer maxItems = (Integer) DataHandlerUtil.getPropertyValue(updatedEntity, HfsDataStoreModel.PROPERTY_MAXITEMS);
-               hfsDataStore.setMaxItems(maxItems);
-            }
-         }
-         else if (dataStoreConf instanceof OpenStackDataStoreConf)
+         AsyncDataStoreConf asyncDataStore = (AsyncDataStoreConf) dataStoreConf;
+         updateAsyncDataStoreCacheProperty(updatedEntity, asyncDataStore);
+      }
+      else
+      {
+         for (Property updatedproperty : updatedProperties)
          {
-            OpenStackDataStoreConf openstackDataStore = (OpenStackDataStoreConf) dataStoreConf;
+            String propertyName = updatedproperty.getName();
 
-            if (propertyName.equals(OpenstackDataStoreModel.PROPERTY_PROVIDER))
+            // set properties common to all datastores
+            if (propertyName.equals(DataStoreModel.PROPERTY_RESTRICTION))
             {
-               String provider = (String) DataHandlerUtil.getPropertyValue(updatedEntity, OpenstackDataStoreModel.PROPERTY_PROVIDER);
-               openstackDataStore.setProvider(provider);
+               dataStoreConf.setRestriction(DataStoreRestriction.fromValue(restriction));
             }
-            if (propertyName.equals(OpenstackDataStoreModel.PROPERTY_IDENTITY))
+            if (propertyName.equals(DataStoreModel.PROPERTY_PRIORITY))
             {
-               String identity = (String) DataHandlerUtil.getPropertyValue(updatedEntity, OpenstackDataStoreModel.PROPERTY_IDENTITY);
-               openstackDataStore.setIdentity(identity);
+               dataStoreConf.setPriority(priority);
             }
-            if (propertyName.equals(OpenstackDataStoreModel.PROPERTY_CREDENTIAL))
+            if (propertyName.equals(DataStoreModel.PROPERTY_MAXIMUMSIZE))
             {
-               String credential = (String) DataHandlerUtil.getPropertyValue(updatedEntity, OpenstackDataStoreModel.PROPERTY_CREDENTIAL);
-               openstackDataStore.setCredential(credential);
+               dataStoreConf.setMaximumSize(maximumSize);
             }
-            if (propertyName.equals(OpenstackDataStoreModel.PROPERTY_URL))
+            if (propertyName.equals(DataStoreModel.PROPERTY_AUTOEVICTION))
             {
-               String url = (String) DataHandlerUtil.getPropertyValue(updatedEntity, OpenstackDataStoreModel.PROPERTY_URL);
-               openstackDataStore.setUrl(url);
+               dataStoreConf.setAutoEviction(autoEviction);
             }
-            if (propertyName.equals(OpenstackDataStoreModel.PROPERTY_CONTAINER))
+            if (propertyName.equals(DataStoreModel.PROPERTY_FILTER))
             {
-               String container = (String) DataHandlerUtil.getPropertyValue(updatedEntity, OpenstackDataStoreModel.PROPERTY_CONTAINER);
-               openstackDataStore.setContainer(container);
+               dataStoreConf.setFilter(filter);
             }
-            if (propertyName.equals(OpenstackDataStoreModel.PROPERTY_REGION))
-            {
-               String region = (String) DataHandlerUtil.getPropertyValue(updatedEntity, OpenstackDataStoreModel.PROPERTY_REGION);
-               openstackDataStore.setRegion(region);
-            }
-         }
-         else if (dataStoreConf instanceof RemoteDhusDataStoreConf)
-         {
-            RemoteDhusDataStoreConf remoteDhusDataStore = (RemoteDhusDataStoreConf) dataStoreConf;
 
-            if (propertyName.equals(RemoteDhusDataStoreModel.PROPERTY_SERVICE_URL))
+            if (dataStoreConf instanceof HfsDataStoreConf)
             {
-               String serviceUrl = (String) DataHandlerUtil.getPropertyValue(updatedEntity, RemoteDhusDataStoreModel.PROPERTY_SERVICE_URL);
-               remoteDhusDataStore.setServiceUrl(serviceUrl);
+               HfsDataStoreConf hfsDataStore = (HfsDataStoreConf) dataStoreConf;
+               updateHfsDataStoreEntity(updatedEntity, propertyName, hfsDataStore);
             }
-            if (propertyName.equals(RemoteDhusDataStoreModel.PROPERTY_LOGIN))
+            else if (dataStoreConf instanceof OpenStackDataStoreConf)
             {
-               String login = (String) DataHandlerUtil.getPropertyValue(updatedEntity, RemoteDhusDataStoreModel.PROPERTY_LOGIN);
-               remoteDhusDataStore.setLogin(login);
+               OpenStackDataStoreConf openstackDataStore = (OpenStackDataStoreConf) dataStoreConf;
+               updateOpenStackDataStoreEntity(updatedEntity, propertyName, openstackDataStore);
             }
-            if (propertyName.equals(RemoteDhusDataStoreModel.PROPERTY_PASSWORD))
+            else if (dataStoreConf instanceof RemoteDhusDataStoreConf)
             {
-               String password = (String) DataHandlerUtil.getPropertyValue(updatedEntity, RemoteDhusDataStoreModel.PROPERTY_PASSWORD);
-               remoteDhusDataStore.setPassword(password);
+               RemoteDhusDataStoreConf remoteDhusDataStore = (RemoteDhusDataStoreConf) dataStoreConf;
+
+               if (propertyName.equals(RemoteDhusDataStoreModel.PROPERTY_SERVICE_URL))
+               {
+                  String serviceUrl = (String) DataHandlerUtil.getPropertyValue(updatedEntity, RemoteDhusDataStoreModel.PROPERTY_SERVICE_URL);
+                  remoteDhusDataStore.setServiceUrl(serviceUrl);
+               }
+               if (propertyName.equals(RemoteDhusDataStoreModel.PROPERTY_LOGIN))
+               {
+                  String login = (String) DataHandlerUtil.getPropertyValue(updatedEntity, RemoteDhusDataStoreModel.PROPERTY_LOGIN);
+                  remoteDhusDataStore.setLogin(login);
+               }
+               if (propertyName.equals(RemoteDhusDataStoreModel.PROPERTY_PASSWORD))
+               {
+                  String password = (String) DataHandlerUtil.getPropertyValue(updatedEntity, RemoteDhusDataStoreModel.PROPERTY_PASSWORD);
+                  remoteDhusDataStore.setPassword(password);
+               }
+               if (propertyName.equals(RemoteDhusDataStoreModel.PROPERTY_ALIVE_INTERVAL))
+               {
+                  Long aliveInterval = (Long) DataHandlerUtil.getPropertyValue(updatedEntity, RemoteDhusDataStoreModel.PROPERTY_ALIVE_INTERVAL);
+                  remoteDhusDataStore.setAliveInterval(aliveInterval);
+               }
             }
-            if (propertyName.equals(RemoteDhusDataStoreModel.PROPERTY_ALIVE_INTERVAL))
+
+            else if (dataStoreConf instanceof GmpDataStoreConf)
             {
-               Long aliveInterval = (Long) DataHandlerUtil.getPropertyValue(updatedEntity, RemoteDhusDataStoreModel.PROPERTY_ALIVE_INTERVAL);
-               remoteDhusDataStore.setAliveInterval(aliveInterval);
-            }
-         }
+               GmpDataStoreConf gmpDataStore = (GmpDataStoreConf) dataStoreConf;
 
-         else if (dataStoreConf instanceof GmpDataStoreConf)
-         {
-            GmpDataStoreConf gmpDataStore = (GmpDataStoreConf) dataStoreConf;
+               // common async
+               updateAsyncDataStoreProperty(updatedEntity, gmpDataStore, propertyName);
 
-            // common async
-            updateAsyncDataStoreProperty(updatedEntity, gmpDataStore, propertyName);
+               if (propertyName.equals(GmpDataStoreModel.PROPERTY_REPO_LOCATION))
+               {
+                  String repoLocation = (String) DataHandlerUtil.getPropertyValue(updatedEntity,  GmpDataStoreModel.PROPERTY_REPO_LOCATION);
+                  gmpDataStore.setRepoLocation(repoLocation);
+               }
+               if (gmpDataStore.getMysqlConnectionInfo() == null)
+               {
+                  gmpDataStore.setMysqlConnectionInfo(new MysqlConnectionInfo());
+               }
+               if (propertyName.equals(GmpDataStoreModel.PROPERTY_MYSQLCONNECTIONINFO))
+               {
+                  // extract mysql complex property
+                  MysqlConnectionInfo mysqlConnectionInfo = extractMySQLConnectionInfo(updatedEntity, gmpDataStore.getMysqlConnectionInfo());
+                  gmpDataStore.setMysqlConnectionInfo(mysqlConnectionInfo);
+               }
+               if (propertyName.equals(GmpDataStoreModel.PROPERTY_CONFIGURATION))
+               {
+                  // extract gmp configuration
+                  Configuration configuration = extractConfiguration(updatedEntity, gmpDataStore.getConfiguration() == null ? new Configuration(): gmpDataStore.getConfiguration());
 
-            if (propertyName.equals(GmpDataStoreModel.PROPERTY_REPO_LOCATION))
-            {
-               String repoLocation = (String) DataHandlerUtil.getPropertyValue(updatedEntity, GmpDataStoreModel.PROPERTY_REPO_LOCATION);
-               gmpDataStore.setRepoLocation(repoLocation);
-            }
-            if (gmpDataStore.getMysqlConnectionInfo() == null)
-            {
-               gmpDataStore.setMysqlConnectionInfo(new MysqlConnectionInfo());
-            }
-            if (propertyName.equals(GmpDataStoreModel.PROPERTY_MYSQLCONNECTIONINFO))
-            {
-               // extract mysql complex property
-               MysqlConnectionInfo mysqlConnectionInfo = extractMySQLConnectionInfo(updatedEntity, gmpDataStore.getMysqlConnectionInfo());
-               gmpDataStore.setMysqlConnectionInfo(mysqlConnectionInfo);
+                  gmpDataStore.setConfiguration(configuration);
+               }
             }
-            if (propertyName.equals(GmpDataStoreModel.PROPERTY_CONFIGURATION))
+            else if (dataStoreConf instanceof PdgsDataStoreConf)
             {
-               // extract gmp configuration
-               Configuration configuration = extractConfiguration(
-                     updatedEntity,
-                     gmpDataStore.getConfiguration() == null ? new Configuration() : gmpDataStore.getConfiguration());
+               PdgsDataStoreConf pdgsDataStore = (PdgsDataStoreConf) dataStoreConf;
 
-               gmpDataStore.setConfiguration(configuration);
-            }
-         }
-         else if (dataStoreConf instanceof PdgsDataStoreConf)
-         {
-            PdgsDataStoreConf pdgsDataStore = (PdgsDataStoreConf) dataStoreConf;
+               // common async
+               updateAsyncDataStoreProperty(updatedEntity, pdgsDataStore, propertyName);
 
-            // common async
-            updateAsyncDataStoreProperty(updatedEntity, pdgsDataStore, propertyName);
+               // common httpAsync
+               updatehttpAsyncDataStoreProperty(updatedEntity, pdgsDataStore, propertyName);
 
-            if (propertyName.equals(PdgsDataStoreModel.PROPERTY_SERVICE_URL))
-            {
-               String serviceUrl = (String) DataHandlerUtil.getPropertyValue(updatedEntity, PdgsDataStoreModel.PROPERTY_SERVICE_URL);
-               pdgsDataStore.setServiceUrl(serviceUrl);
-            }
-            if (propertyName.equals(PdgsDataStoreModel.PROPERTY_LOGIN))
-            {
-               String login = (String) DataHandlerUtil.getPropertyValue(updatedEntity, PdgsDataStoreModel.PROPERTY_LOGIN);
-               pdgsDataStore.setLogin(login);
-            }
-            if (propertyName.equals(PdgsDataStoreModel.PROPERTY_PASSWORD))
-            {
-               String password = (String) DataHandlerUtil.getPropertyValue(updatedEntity, PdgsDataStoreModel.PROPERTY_PASSWORD);
-               pdgsDataStore.setPassword(password);
+               if (dataStoreConf instanceof ParamPdgsDataStoreConf)
+               {
+                  ParamPdgsDataStoreConf paramDataStore = (ParamPdgsDataStoreConf) dataStoreConf;
+
+                  if (propertyName.equals(ParamPdgsDataStoreModel.PROPERTY_GPUP_PATTERN))
+                  {
+                     String gpup = (String) DataHandlerUtil.getPropertyValue(updatedEntity, ParamPdgsDataStoreModel.PROPERTY_GPUP_PATTERN);
+                     paramDataStore.setUrlParamPattern(gpup);
+                  }
+                  if (propertyName.equals(ParamPdgsDataStoreModel.PROPERTY_PNAME_PATTERN))
+                  {
+                     String pname = (String) DataHandlerUtil.getPropertyValue(updatedEntity, ParamPdgsDataStoreModel.PROPERTY_PNAME_PATTERN);
+                     paramDataStore.setProductNamePattern(pname);
+                  }
+               }
             }
-            if (propertyName.equals(PdgsDataStoreModel.PROPERTY_MAX_CONCURRENTS_DOWNLOADS))
+            else if (dataStoreConf instanceof LtaDataStoreConf)
             {
-               int maxConcurrentsDownloads = (int) DataHandlerUtil.getPropertyValue(updatedEntity, PdgsDataStoreModel.PROPERTY_MAX_CONCURRENTS_DOWNLOADS);
-               pdgsDataStore.setMaxConcurrentsDownloads(maxConcurrentsDownloads);
+               LtaDataStoreConf ltaDataStore = (LtaDataStoreConf) dataStoreConf;
+
+               // common async
+               updateAsyncDataStoreProperty(updatedEntity, ltaDataStore, propertyName);
+
+               // common httpAsync
+               updatehttpAsyncDataStoreProperty(updatedEntity, ltaDataStore, propertyName);
+
+               // optional order
+               if (propertyName.equals(LtaDataStoreModel.PROPERTY_ORDER))
+               {
+                  Object order = DataHandlerUtil.getPropertyValue(updatedEntity, LtaDataStoreModel.PROPERTY_ORDER);
+                  if (order != null)
+                  {
+                     ltaDataStore.setOrder((boolean) order);
+                  }
+               }
             }
-            if (propertyName.equals(PdgsDataStoreModel.PROPERTY_INTERVAL))
+            else if (dataStoreConf instanceof OndaDataStoreConf)
             {
-               long interval = (long) DataHandlerUtil.getPropertyValue(updatedEntity, PdgsDataStoreModel.PROPERTY_INTERVAL);
-               pdgsDataStore.setInterval(interval);
-            }
+               OndaDataStoreConf ondaDataStore = (OndaDataStoreConf) dataStoreConf;
 
-            if (dataStoreConf instanceof ParamPdgsDataStoreConf)
-            {
-               ParamPdgsDataStoreConf paramDataStore = (ParamPdgsDataStoreConf) dataStoreConf;
+               // common async
+               updateAsyncDataStoreProperty(updatedEntity, ondaDataStore, propertyName);
+
+               // common httpAsync
+               updatehttpAsyncDataStoreProperty(updatedEntity, ondaDataStore, propertyName);
+
+               // optional order
+               if (propertyName.equals(OndaDataStoreModel.PROPERTY_ORDER))
+               {
+                  Object order = DataHandlerUtil.getPropertyValue(updatedEntity,
+                        OndaDataStoreModel.PROPERTY_ORDER);
+                  if (order != null)
+                  {
+                     ondaDataStore.setOrder((Boolean) order);
+                  }
+               }
 
-               if (propertyName.equals(ParamPdgsDataStoreModel.PROPERTY_GPUP_PATTERN))
+               // extract objectStorageCredentials
+               if (propertyName.equals(OndaDataStoreModel.PROPERTY_OBJECT_STORAGE_CREDENTIAL))
                {
-                  String gpup = (String) DataHandlerUtil.getPropertyValue(updatedEntity, ParamPdgsDataStoreModel.PROPERTY_GPUP_PATTERN);
-                  paramDataStore.setUrlParamPattern(gpup);
+                  ObjectStorageCredentialConf objectStorage = extractObjectStorageCredential(updatedEntity, ondaDataStore.getObjectStorageCredential());
+
+                  ondaDataStore.setObjectStorageCredential(objectStorage);
                }
-               if (propertyName.equals(ParamPdgsDataStoreModel.PROPERTY_PNAME_PATTERN))
+
+               // extract ondaScanner
+               if (propertyName.equals(OndaDataStoreModel.PROPERTY_ONDA_SCANNER))
                {
-                  String pname = (String) DataHandlerUtil.getPropertyValue(updatedEntity, ParamPdgsDataStoreModel.PROPERTY_PNAME_PATTERN);
-                  paramDataStore.setProductNamePattern(pname);
+                  OndaScannerConf ondaScanner = extractOndaScanner(updatedEntity, ondaDataStore.getOndaScanner());
+
+                  ondaDataStore.setOndaScanner(ondaScanner);
                }
             }
-         }
-         else
-         {
-            throw new ODataApplicationException("Unknown DataStore type",
-                  HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+            else
+            {
+               throw new ODataApplicationException("Unknown DataStore type", HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+            }
          }
       }
 
@@ -629,17 +845,72 @@ public class DataStoreDataHandler implements DataHandler
       DS_MANAGER.add(newLiveDataStore);
    }
 
-   private void updateAsyncDataStoreProperty(Entity updatedEntity, AsyncDataStoreConf asyncDataStore, String propertyName)
+   private void updateAsyncDataStoreCacheProperty(Entity updatedEntity, AsyncDataStoreConf asyncDataStore)
    {
-      if (propertyName.equals(AsyncDataStoreModel.PROPERTY_HFS_LOCATION))
+      DataStoreConf dataStoreCache = asyncDataStore.getDataStore();
+      Link link = updatedEntity.getNavigationLink(DataStoreModel.NAVIGATION_CACHE);
+      if (link != null)
       {
-         String hfsLocation = (String) DataHandlerUtil.getPropertyValue(updatedEntity, AsyncDataStoreModel.PROPERTY_HFS_LOCATION);
-         asyncDataStore.setHfsLocation(hfsLocation);
+         Entity cacheEntity = link.getInlineEntity();
+         String restriction = (String) DataHandlerUtil.getPropertyValue(cacheEntity, DataStoreModel.PROPERTY_RESTRICTION);
+         Integer priority = (Integer) DataHandlerUtil.getPropertyValue(cacheEntity, DataStoreModel.PROPERTY_PRIORITY);
+         Long maximumSize = (Long) DataHandlerUtil.getPropertyValue(cacheEntity, DataStoreModel.PROPERTY_MAXIMUMSIZE);
+         Boolean autoEviction = (Boolean) DataHandlerUtil.getPropertyValue(cacheEntity, DataStoreModel.PROPERTY_AUTOEVICTION);
+         String filter = (String) DataHandlerUtil.getPropertyValue(cacheEntity, DataStoreModel.PROPERTY_FILTER);
+
+         List<Property> properties = cacheEntity.getProperties();
+         for (Property property : properties)
+         {
+            String cacheProperty = property.getName();
+            // set properties common to all datastores
+            if (cacheProperty.equals(DataStoreModel.PROPERTY_RESTRICTION))
+            {
+               dataStoreCache.setRestriction(DataStoreRestriction.fromValue(restriction));
+            }
+            if (cacheProperty.equals(DataStoreModel.PROPERTY_PRIORITY))
+            {
+               dataStoreCache.setPriority(priority);
+            }
+            if (cacheProperty.equals(DataStoreModel.PROPERTY_MAXIMUMSIZE))
+            {
+               dataStoreCache.setMaximumSize(maximumSize);
+            }
+            if (cacheProperty.equals(DataStoreModel.PROPERTY_AUTOEVICTION))
+            {
+               dataStoreCache.setAutoEviction(autoEviction);
+            }
+            if (cacheProperty.equals(DataStoreModel.PROPERTY_FILTER))
+            {
+               dataStoreCache.setFilter(filter);
+            }
+
+            if (dataStoreCache instanceof HfsDataStoreConf)
+            {
+               HfsDataStoreConf hfsCache = (HfsDataStoreConf) dataStoreCache;
+               updateHfsDataStoreEntity(cacheEntity, cacheProperty, hfsCache);
+            }
+            else if (dataStoreCache instanceof OpenStackDataStoreConf)
+            {
+               OpenStackDataStoreConf openStackCache = (OpenStackDataStoreConf) dataStoreCache;
+               updateOpenStackDataStoreEntity(cacheEntity, cacheProperty, openStackCache);
+            }
+         }
       }
+   }
+   
+   private void updateAsyncDataStoreProperty(Entity updatedEntity, AsyncDataStoreConf asyncDataStore,
+         String propertyName)
+   {
+      //update cache navigation link  
+      updateAsyncDataStoreCacheProperty(updatedEntity, asyncDataStore);
+
       if (propertyName.equals(AsyncDataStoreModel.PROPERTY_IS_MASTER))
       {
-         Boolean isMaster = (Boolean) DataHandlerUtil.getPropertyValue(updatedEntity, AsyncDataStoreModel.PROPERTY_IS_MASTER);
-         asyncDataStore.setIsMaster(isMaster);
+         Object isMaster = DataHandlerUtil.getPropertyValue(updatedEntity, AsyncDataStoreModel.PROPERTY_IS_MASTER);
+         if (isMaster != null)
+         {
+            asyncDataStore.setIsMaster((Boolean) isMaster);
+         }
       }
       if (propertyName.equals(AsyncDataStoreModel.PROPERTY_MAX_PFRPU))
       {
@@ -674,6 +945,41 @@ public class DataStoreDataHandler implements DataHandler
       }
    }
 
+   private void updatehttpAsyncDataStoreProperty(Entity updatedEntity, HttpAsyncDataStoreConf httpDataStoreConf, String propertyName)
+   {
+      if (propertyName.equals(HttpAsyncDataStoreModel.PROPERTY_SERVICE_URL))
+      {
+         String serviceUrl = (String) DataHandlerUtil.getPropertyValue(updatedEntity, HttpAsyncDataStoreModel.PROPERTY_SERVICE_URL);
+         httpDataStoreConf.setServiceUrl(serviceUrl);
+      }
+      else if (propertyName.equals(HttpAsyncDataStoreModel.PROPERTY_LOGIN))
+      {
+         String login = (String) DataHandlerUtil.getPropertyValue(updatedEntity, HttpAsyncDataStoreModel.PROPERTY_LOGIN);
+         httpDataStoreConf.setLogin(login);
+      }
+      else if (propertyName.equals(HttpAsyncDataStoreModel.PROPERTY_PASSWORD))
+      {
+         String password = (String) DataHandlerUtil.getPropertyValue(updatedEntity, HttpAsyncDataStoreModel.PROPERTY_PASSWORD);
+         httpDataStoreConf.setPassword(password);
+      }
+      else if (propertyName.equals(HttpAsyncDataStoreModel.PROPERTY_MAX_CONCURRENTS_DOWNLOADS))
+      {
+         Object maxConcurrentsDownloads = DataHandlerUtil.getPropertyValue(updatedEntity, HttpAsyncDataStoreModel.PROPERTY_MAX_CONCURRENTS_DOWNLOADS);
+         if (maxConcurrentsDownloads != null)
+         {
+            httpDataStoreConf.setMaxConcurrentsDownloads((Integer) maxConcurrentsDownloads);
+         }
+      }
+      else if (propertyName.equals(HttpAsyncDataStoreModel.PROPERTY_INTERVAL))
+      {
+         Object interval = DataHandlerUtil.getPropertyValue(updatedEntity, HttpAsyncDataStoreModel.PROPERTY_INTERVAL);
+         if (interval != null)
+         {
+            httpDataStoreConf.setInterval((long) interval);
+         }
+      }
+   }
+
    @Override
    public void deleteEntityData(List<UriParameter> keyParameters) throws ODataApplicationException
    {
@@ -715,24 +1021,33 @@ public class DataStoreDataHandler implements DataHandler
    }
 
    @Override
-   public void updateReference(List<UriParameter> sourceKeyPredicates, EdmNavigationProperty navigationProperty, List<UriParameter> targetKeyPredicates)
+   public void updateReference(List<UriParameter> sourceKeyPredicates,
+         EdmNavigationProperty navigationProperty, List<UriParameter> targetKeyPredicates, Entity relatedEntity)
          throws ODataApplicationException
    {
       if (navigationProperty.getName().equals(DataStoreModel.NAVIGATION_EVICTION))
       {
-         // get datastore
          NamedDataStoreConf dataStoreConf = getDataStoreFromService(sourceKeyPredicates);
-
-         // get and set eviction name
-         for (UriParameter keyParameter: targetKeyPredicates)
+         String fullQualifiedName = HfsDataStoreModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString();
+         // get datastore
+         // case example : http://serviceUrl/odata/v2/DataStores('DSName')/DataStoreCache/Eviction/\$ref
+         if (dataStoreConf instanceof AsyncDataStoreConf && relatedEntity != null && relatedEntity.getType() != null && relatedEntity.getType()
+                     .equals(fullQualifiedName))
          {
-            if (keyParameter.getName().equals(EvictionModel.NAME))
+            AsyncDataStoreConf asyncDS = (AsyncDataStoreConf) dataStoreConf;
+            String cacheName = (String) relatedEntity.getProperty(HfsDataStoreModel.PROPERTY_NAME).getValue();
+            NamedDataStoreConf dataStorecache = DS_SERVICE.getNamedDataStore(cacheName);
+            if (dataStorecache == null)
             {
-               String evictionName = DataHandlerUtil.trimStringKeyParameter(keyParameter);
-               dataStoreConf.setEvictionName(evictionName);
-               DS_SERVICE.update(dataStoreConf);
-               return;
+               throw new ODataApplicationException("DataStore Cache not found: " + cacheName,
+                     HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
             }
+              setDataStoreEvictionName(targetKeyPredicates, dataStorecache, asyncDS);
+         }
+         else
+         {
+            // case example : http://serviceUrl/odata/v2/DataStores('DSName')/Eviction/\$ref
+            setDataStoreEvictionName(targetKeyPredicates, dataStoreConf, null);
          }
       }
       else
@@ -742,15 +1057,52 @@ public class DataStoreDataHandler implements DataHandler
       }
    }
 
+   private void setDataStoreEvictionName(List<UriParameter> targetKeyPredicates, NamedDataStoreConf dataStoreConf, AsyncDataStoreConf asyncDS)
+   {
+      // get and set eviction name
+      for (UriParameter keyParameter : targetKeyPredicates)
+      {
+         if (keyParameter.getName().equals(EvictionModel.NAME))
+         {
+            String evictionName = DataHandlerUtil.trimStringKeyParameter(keyParameter);
+            dataStoreConf.setEvictionName(evictionName);
+            if(asyncDS != null)
+            {
+               asyncDS.setDataStore(dataStoreConf);
+               DS_SERVICE.update(asyncDS);
+            }
+            else
+            {
+               DS_SERVICE.update(dataStoreConf);
+            }
+         }
+      }
+   }
+ 
    @Override
-   public void deleteReference(List<UriParameter> sourceKeyPredicates, EdmNavigationProperty navigationProperty)
+   public void deleteReference(List<UriParameter> sourceKeyPredicates, EdmNavigationProperty navigationProperty, Entity relatedEntity)
          throws ODataApplicationException
    {
       if (navigationProperty.getName().equals(DataStoreModel.NAVIGATION_EVICTION))
       {
          NamedDataStoreConf dataStoreConf = getDataStoreFromService(sourceKeyPredicates);
-         dataStoreConf.setEvictionName(null);
-         DS_SERVICE.update(dataStoreConf);
+         String fullQualifiedName = HfsDataStoreModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString();
+ 
+         if (dataStoreConf instanceof AsyncDataStoreConf && relatedEntity != null && relatedEntity.getType() != null &&
+               relatedEntity.getType().equals(fullQualifiedName))
+         {
+            AsyncDataStoreConf asyncDS = (AsyncDataStoreConf) dataStoreConf;
+            String cacheName = (String) relatedEntity.getProperty(HfsDataStoreModel.PROPERTY_NAME).getValue();
+            NamedDataStoreConf dataStorecache = DS_SERVICE.getNamedDataStore(cacheName);
+            dataStorecache.setEvictionName(null);
+            asyncDS.setDataStore(dataStorecache);
+            DS_SERVICE.update(asyncDS);
+         }
+         else
+         {
+            dataStoreConf.setEvictionName(null);
+            DS_SERVICE.update(dataStoreConf);
+         }
       }
       else
       {
@@ -758,4 +1110,134 @@ public class DataStoreDataHandler implements DataHandler
                HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
       }
    }
+
+   @Override
+   public Entity getRelatedEntityData(Entity entity, EdmNavigationProperty edmNavigationProperty)
+         throws ODataApplicationException
+   {
+      String name = (String) entity.getProperty(DataStoreModel.PROPERTY_NAME).getValue();
+      NamedDataStoreConf dsConf = DS_SERVICE.getNamedDataStore(name);
+
+      if (dsConf instanceof AsyncDataStoreConf)
+      {
+         NamedDataStoreConf cacheConf = (NamedDataStoreConf) ((AsyncDataStoreConf) dsConf).getDataStore();
+         return toOlingoEntity(cacheConf);
+      }
+      throw new ODataApplicationException("Only AsyncDataStores can navigate to " + DataStoreModel.NAVIGATION_CACHE,
+            HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+   }
+   
+   private HfsDataStoreConf createHfsDataStoreEntity(Entity entity)
+   {
+      HfsDataStoreConf hfsDataStore = new HfsDataStoreConf();
+      hfsDataStore.setPath((String) DataHandlerUtil.getPropertyValue(entity, HfsDataStoreModel.PROPERTY_PATH));
+
+      // if MaxFileDepth is null, set to 10
+      Object maxFileDepth = DataHandlerUtil.getPropertyValue(entity, HfsDataStoreModel.PROPERTY_MAXFILEDEPTH);
+      if (maxFileDepth == null)
+      {
+         hfsDataStore.setMaxFileNo(10);
+      }
+      else
+      {
+         hfsDataStore.setMaxFileNo((Integer) maxFileDepth);
+      }
+
+      Object maxItems = DataHandlerUtil.getPropertyValue(entity, HfsDataStoreModel.PROPERTY_MAXITEMS);
+      if (maxItems == null)
+      {
+         hfsDataStore.setMaxItems(1024);
+      }
+      else
+      {
+         hfsDataStore.setMaxItems((Integer) maxItems);
+      }      
+      return hfsDataStore;    
+   }
+   
+   private OpenStackDataStoreConf createOpenStackEntity(Entity entity)
+   {
+      OpenStackDataStoreConf openstackDataStore = new OpenStackDataStoreConf();
+      openstackDataStore.setProvider((String) DataHandlerUtil.getPropertyValue(entity, OpenstackDataStoreModel.PROPERTY_PROVIDER));
+      openstackDataStore.setIdentity((String) DataHandlerUtil.getPropertyValue(entity, OpenstackDataStoreModel.PROPERTY_IDENTITY));
+      openstackDataStore.setCredential((String) DataHandlerUtil.getPropertyValue(entity, OpenstackDataStoreModel.PROPERTY_CREDENTIAL));
+      openstackDataStore.setUrl((String) DataHandlerUtil.getPropertyValue(entity, OpenstackDataStoreModel.PROPERTY_URL));
+      openstackDataStore.setContainer((String) DataHandlerUtil.getPropertyValue(entity, OpenstackDataStoreModel.PROPERTY_CONTAINER));
+      openstackDataStore.setRegion((String) DataHandlerUtil.getPropertyValue(entity, OpenstackDataStoreModel.PROPERTY_REGION));
+
+      return openstackDataStore;
+   }
+
+   private void updateHfsDataStoreEntity(Entity updatedEntity, String propertyName, HfsDataStoreConf hfsDataStore)
+   {
+      if (propertyName.equals(HfsDataStoreModel.PROPERTY_PATH))
+      {
+         String path = (String) DataHandlerUtil.getPropertyValue(updatedEntity, HfsDataStoreModel.PROPERTY_PATH);
+         hfsDataStore.setPath(path);
+      }
+      if (propertyName.equals(HfsDataStoreModel.PROPERTY_MAXFILEDEPTH))
+      {
+         Integer maxFileDepth = (Integer) DataHandlerUtil.getPropertyValue(updatedEntity, HfsDataStoreModel.PROPERTY_MAXFILEDEPTH);
+         hfsDataStore.setMaxFileNo(maxFileDepth);
+      }
+      if (propertyName.equals(HfsDataStoreModel.PROPERTY_MAXITEMS))
+      {
+         Integer maxItems = (Integer) DataHandlerUtil.getPropertyValue(updatedEntity, HfsDataStoreModel.PROPERTY_MAXITEMS);
+         hfsDataStore.setMaxItems(maxItems);
+      }
+   }
+
+   private void updateOpenStackDataStoreEntity(Entity updatedEntity, String propertyName,
+         OpenStackDataStoreConf openstackDataStore)
+   {
+      if (propertyName.equals(OpenstackDataStoreModel.PROPERTY_PROVIDER))
+      {
+         String provider = (String) DataHandlerUtil.getPropertyValue(updatedEntity, OpenstackDataStoreModel.PROPERTY_PROVIDER);
+         openstackDataStore.setProvider(provider);
+      }
+      if (propertyName.equals(OpenstackDataStoreModel.PROPERTY_IDENTITY))
+      {
+         String identity = (String) DataHandlerUtil.getPropertyValue(updatedEntity, OpenstackDataStoreModel.PROPERTY_IDENTITY);
+         openstackDataStore.setIdentity(identity);
+      }
+      if (propertyName.equals(OpenstackDataStoreModel.PROPERTY_CREDENTIAL))
+      {
+         String credential = (String) DataHandlerUtil.getPropertyValue(updatedEntity, OpenstackDataStoreModel.PROPERTY_CREDENTIAL);
+         openstackDataStore.setCredential(credential);
+      }
+      if (propertyName.equals(OpenstackDataStoreModel.PROPERTY_URL))
+      {
+         String url = (String) DataHandlerUtil.getPropertyValue(updatedEntity, OpenstackDataStoreModel.PROPERTY_URL);
+         openstackDataStore.setUrl(url);
+      }
+      if (propertyName.equals(OpenstackDataStoreModel.PROPERTY_CONTAINER))
+      {
+         String container = (String) DataHandlerUtil.getPropertyValue(updatedEntity, OpenstackDataStoreModel.PROPERTY_CONTAINER);
+         openstackDataStore.setContainer(container);
+      }
+      if (propertyName.equals(OpenstackDataStoreModel.PROPERTY_REGION))
+      {
+         String region = (String) DataHandlerUtil.getPropertyValue(updatedEntity, OpenstackDataStoreModel.PROPERTY_REGION);
+         openstackDataStore.setRegion(region);
+      }
+   }
+   
+   private void setCommonProperties(Entity entity, NamedDataStoreConf dataStore) throws ODataApplicationException
+   {
+   // Required properties
+      String datastoreName = DataHandlerUtil.<String>getRequiredProperty(entity, DataStoreModel.PROPERTY_NAME, String.class);
+      
+   // set properties common to all dataStore subtypes
+      dataStore.setName(datastoreName);
+      String restriction = (String) DataHandlerUtil.getPropertyValue(entity, DataStoreModel.PROPERTY_RESTRICTION);
+      if (restriction != null)
+      {
+         dataStore.setRestriction(DataStoreRestriction.fromValue(restriction));
+      }
+      dataStore.setPriority((Integer) DataHandlerUtil.getPropertyValue(entity, DataStoreModel.PROPERTY_PRIORITY));
+      dataStore.setMaximumSize((Long) DataHandlerUtil.getPropertyValue(entity, DataStoreModel.PROPERTY_MAXIMUMSIZE));
+      dataStore.setCurrentSize((Long) DataHandlerUtil.getPropertyValue(entity, DataStoreModel.PROPERTY_CURRENTSIZE));
+      dataStore.setAutoEviction((Boolean) DataHandlerUtil.getPropertyValue(entity, DataStoreModel.PROPERTY_AUTOEVICTION));
+      dataStore.setFilter((String) DataHandlerUtil.getPropertyValue(entity, DataStoreModel.PROPERTY_FILTER));
+   }
 }
diff --git a/core/src/main/java/org/dhus/olingo/v2/data/DeletedProductDataHandler.java b/core/src/main/java/org/dhus/olingo/v2/data/DeletedProductDataHandler.java
new file mode 100644
index 000000000..80fd43ea6
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/data/DeletedProductDataHandler.java
@@ -0,0 +1,312 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2019 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.data;
+
+import java.sql.Timestamp;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.olingo.commons.api.data.ComplexValue;
+import org.apache.olingo.commons.api.data.Entity;
+import org.apache.olingo.commons.api.data.EntityCollection;
+import org.apache.olingo.commons.api.data.Parameter;
+import org.apache.olingo.commons.api.data.Property;
+import org.apache.olingo.commons.api.data.ValueType;
+import org.apache.olingo.commons.api.edm.EdmAction;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.http.HttpStatusCode;
+import org.apache.olingo.server.api.ODataApplicationException;
+import org.apache.olingo.server.api.uri.UriInfo;
+import org.apache.olingo.server.api.uri.UriParameter;
+import org.apache.olingo.server.api.uri.queryoption.CountOption;
+import org.apache.olingo.server.api.uri.queryoption.FilterOption;
+import org.apache.olingo.server.api.uri.queryoption.OrderByOption;
+import org.apache.olingo.server.api.uri.queryoption.SkipOption;
+import org.apache.olingo.server.api.uri.queryoption.TopOption;
+import org.dhus.olingo.v2.ODataSecurityManager;
+import org.dhus.olingo.v2.datamodel.DeletedProductModel;
+import org.dhus.olingo.v2.datamodel.ItemModel;
+import org.dhus.olingo.v2.datamodel.ProductModel;
+import org.dhus.olingo.v2.datamodel.action.DeleteDeletedProductsAction;
+import org.dhus.olingo.v2.datamodel.complex.ChecksumComplexType;
+import org.dhus.olingo.v2.datamodel.complex.TimeRangeComplexType;
+import org.dhus.olingo.v2.visitor.DeletedProductSqlVisitor;
+
+import fr.gael.dhus.database.object.DeletedProduct;
+import fr.gael.dhus.database.object.Role;
+import fr.gael.dhus.olingo.Security;
+import fr.gael.dhus.service.DeletedProductService;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.odata.engine.data.DataHandlerUtil;
+import fr.gael.odata.engine.data.DatabaseDataHandler;
+
+
+public class DeletedProductDataHandler implements DatabaseDataHandler
+{
+   private static final DeletedProductService DELETED_PRODUCT_SERVICE =
+         ApplicationContextProvider.getBean(DeletedProductService.class);
+
+   private static final Logger LOGGER = LogManager.getLogger(ProductDataHandler.class);
+
+   @Override
+   public EntityCollection getEntityCollectionData() throws ODataApplicationException
+   {
+      return getEntityCollectionData(null, null, null, null, null);
+   }
+
+   @Override
+   public Entity getEntityData(List<UriParameter> keyParameters) throws ODataApplicationException
+   {
+      for (UriParameter uriParameter : keyParameters)
+      {
+         if (DeletedProductModel.PROPERTY_ID.equals(uriParameter.getName()))
+         {
+            String uuid = DataHandlerUtil.trimStringKeyParameter(uriParameter);
+            DeletedProduct deletedProduct = DELETED_PRODUCT_SERVICE.getProduct(uuid);
+            return toDeletedProductEntity(deletedProduct);
+         }
+      }
+      return null;
+   }
+
+   @Override
+   public EntityCollection getEntityCollectionData(FilterOption filterOption,
+         OrderByOption orderByOption, TopOption topOption, SkipOption skipOption,
+         CountOption countOption) throws ODataApplicationException
+   {
+      DeletedProductSqlVisitor visitor = new DeletedProductSqlVisitor(filterOption, orderByOption, topOption, skipOption);
+      List<DeletedProduct> deletedProducts = DELETED_PRODUCT_SERVICE.getProducts(visitor, visitor.getSkip(), visitor.getTop());
+
+      EntityCollection entityCollection = new EntityCollection();
+      for (DeletedProduct deletedProduct: deletedProducts)
+      {
+         Entity entityProduct = toDeletedProductEntity(deletedProduct);
+         entityCollection.getEntities().add(entityProduct);
+      }
+      return entityCollection;
+   }
+
+   @Override
+   public Integer countEntities(FilterOption filterOption) throws ODataApplicationException
+   {
+      return DELETED_PRODUCT_SERVICE.count();
+   }
+
+   @Override
+   public Object performBoundActionEntityCollection(UriInfo uriInfo,
+         List<UriParameter> keyPredicates, EdmAction action, Map<String, Parameter> parameters)
+         throws ODataApplicationException
+   {
+      FullQualifiedName actionFQN = action.getFullQualifiedName();
+      if (actionFQN.equals(DeleteDeletedProductsAction.ACTION_DELETE_PRODUCTS_FQN))
+      {
+         if (parameters == null || parameters.isEmpty())
+         {
+            LOGGER.error("Parameters need to be filled");
+            throw new ODataApplicationException("Parameters need to be filled",
+                  HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+         }
+         performDeleteProductListBoundAction(parameters);
+
+         return new Property(null, DeleteDeletedProductsAction.PARAMETER_PRODUCT_LIST, ValueType.PRIMITIVE,
+               "The deletion is successfully done");
+      }
+      throw new ODataApplicationException("Action not found",
+            HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+   }
+
+   private void performDeleteProductListBoundAction(Map<String, Parameter> parameters) throws ODataApplicationException
+   {
+      ODataSecurityManager.checkPermission(Role.DATA_MANAGER);
+      EntityCollection productParameters =
+         (EntityCollection) parameters.get(DeleteDeletedProductsAction.PARAMETER_PRODUCT_LIST).getValue();
+
+      List<Entity> entities = productParameters.getEntities();
+
+      for (Entity entity : entities)
+      {
+         String uuid = (String) entity.getProperty("Id").getValue();
+
+         DeletedProduct deletedProduct = DELETED_PRODUCT_SERVICE.getProduct(uuid);
+         if (deletedProduct == null)
+         {
+            LOGGER.error("The product id {} is not valid", uuid);
+         }
+         long start = System.currentTimeMillis();
+         DELETED_PRODUCT_SERVICE.delete(deletedProduct);
+
+         long totalTime = System.currentTimeMillis() - start;
+         LOGGER.info("Deletion of product '{}' ({} bytes) successful spent {}ms",
+               deletedProduct.getIdentifier(), deletedProduct.getSize(), totalTime);
+      }
+   }
+
+   private Entity toDeletedProductEntity(DeletedProduct deletedProduct)
+   {
+      if (deletedProduct == null)
+      {
+         return null;
+      }
+
+      Entity deletedProductEntity = new Entity();
+
+      // UUID
+      deletedProductEntity.addProperty(new Property(
+            null,
+            DeletedProductModel.PROPERTY_ID,
+            ValueType.PRIMITIVE,
+            deletedProduct.getUuid()));
+
+      // Name
+      deletedProductEntity.addProperty(new Property(
+            null,
+            DeletedProductModel.PROPERTY_NAME,
+            ValueType.PRIMITIVE,
+            deletedProduct.getIdentifier()));
+
+      // CreationDate
+      deletedProductEntity.addProperty(new Property(
+            null,
+            DeletedProductModel.PROPERTY_CREATION_DATE,
+            ValueType.PRIMITIVE,
+            deletedProduct.getCreated()));
+
+      // FootPrint
+      deletedProductEntity.addProperty(new Property(
+            null,
+            DeletedProductModel.PROPERTY_FOOTPRINT,
+            ValueType.PRIMITIVE,
+            deletedProduct.getFootPrint()));
+
+      // Size
+      deletedProductEntity.addProperty(new Property(
+            null,
+            DeletedProductModel.PROPERTY_SIZE,
+            ValueType.PRIMITIVE,
+            deletedProduct.getSize()));
+
+      // IngestionDate
+      deletedProductEntity.addProperty(new Property(
+            null,
+            DeletedProductModel.PROPERTY_INGESTION_DATE,
+            ValueType.PRIMITIVE,
+            deletedProduct.getIngestionDate()));
+
+      // DeletionDate
+      deletedProductEntity.addProperty(new Property(
+            null,
+            DeletedProductModel.PROPERTY_DELETION_DATE,
+            ValueType.PRIMITIVE,
+            deletedProduct.getDeletionDate()));
+
+      // DeletionCause
+      deletedProductEntity.addProperty(new Property(
+            null,
+            DeletedProductModel.PROPERTY_DELETION_CAUSE,
+            ValueType.PRIMITIVE,
+            deletedProduct.getDeletionCause()));
+
+      // Checksum
+      deletedProductEntity.addProperty(checksumProperty(deletedProduct));
+
+      // TimeRange (Begin-End positions)
+      deletedProductEntity.addProperty(timeRangeProperty(deletedProduct.getContentStart(), deletedProduct.getContentEnd()));
+
+      deletedProductEntity.setId(DataHandlerUtil.createEntityId(DeletedProductModel.ENTITY_SET_NAME, deletedProduct.getUuid()));
+
+      return deletedProductEntity;
+   }
+
+   private Property checksumProperty(DeletedProduct deletedProduct)
+   {
+      List<ComplexValue> checksumComplexCollection = new ArrayList<>();
+      Map<String, String> checksumsMap = deletedProduct.getChecksums();
+      if (checksumsMap != null)
+      {
+         for (Entry<String, String> checksum : checksumsMap.entrySet())
+         {
+            ComplexValue checksumValue = new ComplexValue();
+            // checksum algorithm
+            checksumValue.getValue().add(new Property(
+                  null,
+                  ChecksumComplexType.PROPERTY_ALGORITHM,
+                  ValueType.PRIMITIVE,
+                  checksum.getKey()));
+
+            // checksum value
+            checksumValue.getValue().add(new Property(
+                  null,
+                  ChecksumComplexType.PROPERTY_VALUE,
+                  ValueType.PRIMITIVE,
+                  checksum.getValue()));
+
+            checksumComplexCollection.add(checksumValue);
+         }
+         return new Property(
+               null,
+               ChecksumComplexType.COMPLEX_TYPE_NAME,
+               ValueType.COLLECTION_COMPLEX,
+               checksumComplexCollection);
+      }
+      return null;
+   }
+
+   private Property timeRangeProperty(Date contentStart, Date contentEnd)
+   {
+      ComplexValue complexValue = new ComplexValue();
+      complexValue.getValue().add(new Property(
+            null,
+            TimeRangeComplexType.PROPERTY_START,
+            ValueType.PRIMITIVE,
+            new Timestamp(contentStart.getTime())));
+      complexValue.getValue().add(new Property(
+            null,
+            TimeRangeComplexType.PROPERTY_END,
+            ValueType.PRIMITIVE,
+            new Timestamp(contentEnd.getTime())));
+
+      return new Property(
+            null,
+            ProductModel.PROPERTY_CONTENTDATE,
+            ValueType.COMPLEX,
+            complexValue);
+   }
+
+   @Override
+   public void deleteEntityData(List<UriParameter> keyParameters) throws ODataApplicationException
+   {
+      ODataSecurityManager.checkPermission(Role.DATA_MANAGER);
+      String productId = DataHandlerUtil.getSingleStringKeyParameterValue(keyParameters, ItemModel.PROPERTY_ID);
+
+      DeletedProduct deletedProduct = DELETED_PRODUCT_SERVICE.getProduct(productId);
+      if (deletedProduct == null)
+      {
+         throw new ODataApplicationException("Deleted product not found",
+               HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+      }
+      DELETED_PRODUCT_SERVICE.delete(deletedProduct);
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/data/EvictionDataHandler.java b/core/src/main/java/org/dhus/olingo/v2/data/EvictionDataHandler.java
index 954b91568..8a45cb1b2 100644
--- a/core/src/main/java/org/dhus/olingo/v2/data/EvictionDataHandler.java
+++ b/core/src/main/java/org/dhus/olingo/v2/data/EvictionDataHandler.java
@@ -21,6 +21,7 @@ package org.dhus.olingo.v2.data;
 
 import fr.gael.dhus.database.object.Role;
 import fr.gael.dhus.database.object.config.eviction.Eviction;
+import fr.gael.dhus.database.object.config.eviction.EvictionBaseDate;
 import fr.gael.dhus.database.object.config.eviction.EvictionConfiguration.Cron;
 import fr.gael.dhus.database.object.config.eviction.EvictionStatusEnum;
 import fr.gael.dhus.service.DataStoreService;
@@ -109,12 +110,27 @@ public class EvictionDataHandler implements DataHandler
                   EvictionModel.SOFT_EVICTION,
                   ValueType.PRIMITIVE,
                   eviction.isSoftEviction()))
+            .addProperty(new Property(
+                  null,
+                  EvictionModel.BASE_DATE,
+                  ValueType.PRIMITIVE,
+                  eviction.getBaseDate().value()))
+            .addProperty(new Property(
+                  null,
+                  EvictionModel.SAFE_MODE,
+                  ValueType.PRIMITIVE,
+                  eviction.isSafeMode()))
+            .addProperty(new Property(
+                  null,
+                  EvictionModel.TARGET_DATASTORE,
+                  ValueType.PRIMITIVE,
+                  eviction.getTargetDataStore()))
             .addProperty(new Property(
                   null,
                   EvictionModel.STATUS,
                   ValueType.PRIMITIVE,
                   eviction.getStatus()));
-
+      
       // cron may be null
       if (eviction.getCron() != null)
       {
@@ -153,7 +169,10 @@ public class EvictionDataHandler implements DataHandler
    @Override
    public EntityCollection getEntityCollectionData() throws ODataApplicationException
    {
-      ODataSecurityManager.checkPermission(Role.SYSTEM_MANAGER);
+      if(!ODataSecurityManager.hasPermission(Role.FEDERATION_USER))
+      {
+         ODataSecurityManager.checkPermission(Role.SYSTEM_MANAGER);
+      }
 
       List<Eviction> evictions = EVICTION_SERVICE.getEvictions();
 
@@ -168,7 +187,10 @@ public class EvictionDataHandler implements DataHandler
    @Override
    public Entity getEntityData(List<UriParameter> keyParameters) throws ODataApplicationException
    {
-      ODataSecurityManager.checkPermission(Role.SYSTEM_MANAGER);
+      if(!ODataSecurityManager.hasPermission(Role.FEDERATION_USER))
+      {
+         ODataSecurityManager.checkPermission(Role.SYSTEM_MANAGER);
+      }
 
       for (UriParameter keyParameter: keyParameters)
       {
@@ -334,6 +356,32 @@ public class EvictionDataHandler implements DataHandler
          eviction.setTargetCollection((String) DataHandlerUtil.getPropertyValue(entity, EvictionModel.TARGET_COLLECTION));
       }
       // targetCollection is nullable
+      if (DataHandlerUtil.containsProperty(entity, EvictionModel.TARGET_DATASTORE))
+      {
+         eviction.setTargetDataStore((String) DataHandlerUtil.getPropertyValue(entity, EvictionModel.TARGET_DATASTORE));
+      }
+      // targetCollection is nullable
+      if (DataHandlerUtil.containsProperty(entity, EvictionModel.SAFE_MODE))
+      {
+         eviction.setSafeMode(
+               (Boolean) DataHandlerUtil.getPropertyValue(entity, EvictionModel.SAFE_MODE));
+      }
+      else
+      {
+         eviction.setSafeMode(
+               (Boolean) EvictionModel.getDefaultValue(EvictionModel.SAFE_MODE));
+      }
+      if (DataHandlerUtil.containsProperty(entity, EvictionModel.BASE_DATE))
+      {
+         eviction.setBaseDate(EvictionBaseDate.fromValue(
+               (String) DataHandlerUtil.getPropertyValue(entity, EvictionModel.BASE_DATE)));
+      }
+      else
+      {
+         eviction.setBaseDate(EvictionBaseDate.fromValue(
+               (String) EvictionModel.getDefaultValue(EvictionModel.BASE_DATE)));
+      }
+
 
       EVICTION_SERVICE.create(eviction);
 
@@ -397,6 +445,9 @@ public class EvictionDataHandler implements DataHandler
       String orderBy = (String) DataHandlerUtil.getPropertyValue(updatedEntity, EvictionModel.ORDER_BY);
       String targetCollection = (String) DataHandlerUtil.getPropertyValue(updatedEntity, EvictionModel.TARGET_COLLECTION);
       Boolean softEviction = (Boolean) DataHandlerUtil.getPropertyValue(updatedEntity, EvictionModel.SOFT_EVICTION);
+      String targetDatastore = (String) DataHandlerUtil.getPropertyValue(updatedEntity, EvictionModel.TARGET_DATASTORE);
+      String baseDate = (String) DataHandlerUtil.getPropertyValue(updatedEntity, EvictionModel.BASE_DATE);
+      Boolean safeMode = (Boolean) DataHandlerUtil.getPropertyValue(updatedEntity, EvictionModel.SAFE_MODE);
 
       EvictionStatusEnum previousStatus = eviction.getStatus();
 
@@ -439,6 +490,18 @@ public class EvictionDataHandler implements DataHandler
          {
             eviction.setTargetCollection(targetCollection);
          }
+         if (propertyName.equals(EvictionModel.TARGET_DATASTORE))
+         {
+            eviction.setTargetDataStore(targetDatastore);
+         }
+         if (propertyName.equals(EvictionModel.BASE_DATE))
+         {
+            eviction.setBaseDate(EvictionBaseDate.fromValue(baseDate));
+         }
+         if (propertyName.equals(EvictionModel.SAFE_MODE))
+         {
+            eviction.setSafeMode(safeMode);
+         }
          if (propertyName.equals(EvictionModel.SOFT_EVICTION))
          {
             eviction.setSoftEviction(softEviction);
diff --git a/core/src/main/java/org/dhus/olingo/v2/data/MetricDataHandler.java b/core/src/main/java/org/dhus/olingo/v2/data/MetricDataHandler.java
index ac9fcfe9f..0d5438877 100644
--- a/core/src/main/java/org/dhus/olingo/v2/data/MetricDataHandler.java
+++ b/core/src/main/java/org/dhus/olingo/v2/data/MetricDataHandler.java
@@ -71,7 +71,10 @@ public class MetricDataHandler implements DatabaseDataHandler
    @Override
    public EntityCollection getEntityCollectionData() throws ODataApplicationException
    {
-      ODataSecurityManager.checkPermission(Role.STATISTICS);
+      if(!ODataSecurityManager.hasPermission(Role.FEDERATION_USER))
+      {
+         ODataSecurityManager.checkPermission(Role.STATISTICS);
+      }
 
       EntityCollection entityCollection = new EntityCollection();
       List<Entity> entities = entityCollection.getEntities();
@@ -85,7 +88,10 @@ public class MetricDataHandler implements DatabaseDataHandler
    @Override
    public Entity getEntityData(List<UriParameter> keyParameters) throws ODataApplicationException
    {
-      ODataSecurityManager.checkPermission(Role.STATISTICS);
+      if(!ODataSecurityManager.hasPermission(Role.FEDERATION_USER))
+      {
+         ODataSecurityManager.checkPermission(Role.STATISTICS);
+      }
 
       // Fetch, Parse and Check Key Parameters
       Map<String, String> keyPredicates = Util.uriParametersToMap(keyParameters);
@@ -126,6 +132,10 @@ public class MetricDataHandler implements DatabaseDataHandler
          TopOption topOption, SkipOption skipOption, CountOption countOption)
          throws ODataApplicationException
    {
+      if(!ODataSecurityManager.hasPermission(Role.FEDERATION_USER))
+      {
+         ODataSecurityManager.checkPermission(Role.STATISTICS);
+      }
       MetricSQLVisitor sqlVisitor = new MetricSQLVisitor(filterOption, orderByOption, topOption, skipOption);
 
       EntityCollection entityCollection = new EntityCollection();
diff --git a/core/src/main/java/org/dhus/olingo/v2/data/NodeDataHandler.java b/core/src/main/java/org/dhus/olingo/v2/data/NodeDataHandler.java
index b6d691464..26a95bf62 100644
--- a/core/src/main/java/org/dhus/olingo/v2/data/NodeDataHandler.java
+++ b/core/src/main/java/org/dhus/olingo/v2/data/NodeDataHandler.java
@@ -47,6 +47,7 @@ import org.dhus.store.StoreException;
 import org.dhus.store.StoreService;
 import org.dhus.store.datastore.DataStoreException;
 import org.dhus.store.datastore.DataStoreProduct;
+import org.dhus.store.datastore.openstack.OpenStackProduct;
 import org.dhus.store.derived.DerivedProductStore;
 import org.dhus.store.derived.DerivedProductStoreService;
 
@@ -58,6 +59,7 @@ public class NodeDataHandler implements DataHandler
          ApplicationContextProvider.getBean(DerivedProductStoreService.class);
 
    private static final Logger LOGGER = LogManager.getLogger(NodeDataHandler.class);
+   private static final String DEFAULT_CONTENT_TYPE = "application/octet-stream";
 
    @Override
    public EntityCollection getEntityCollectionData() throws ODataApplicationException
@@ -228,10 +230,16 @@ public class NodeDataHandler implements DataHandler
          if (product.hasImpl(DrbNode.class))
          {
             drbNode = product.getImpl(DrbNode.class);
-            if (DrbChildren.shouldODataUseFirstChild(product.getName(), drbNode))
+
+            if (product instanceof OpenStackProduct)
+            {
+               OpenStackProduct openStackProduct = (OpenStackProduct) product;
+               String productName = openStackProduct.getRemoteName();
+               return getDrbNode(productName, drbNode);
+            }
+            else
             {
-               // skip product zip node
-               drbNode = drbNode.getFirstChild();
+               return getDrbNode(product.getName(), drbNode);
             }
          }
       }
@@ -243,6 +251,16 @@ public class NodeDataHandler implements DataHandler
       return drbNode;
    }
 
+   private DrbNode getDrbNode(String productName, DrbNode drbNode)
+   {
+      if (DrbChildren.shouldODataUseFirstChild(productName, drbNode))
+      {
+         // skip product zip node
+         return drbNode.getFirstChild();
+      }
+      return drbNode;
+   }
+
    @Override
    public void prepareResponseForDownload(ODataRequest request, ODataResponse response, Entity entity)
    {
@@ -251,9 +269,6 @@ public class NodeDataHandler implements DataHandler
          NodeEntity nodeEntity = (NodeEntity) entity;
          DrbNode drbNode = nodeEntity.getDrbNode();
 
-         // ContentType
-         String contentType = (String) entity.getProperty(ItemModel.PROPERTY_CONTENTTYPE).getValue();
-
          // ContentLength
          long contentLength = (long) entity.getProperty(ItemModel.PROPERTY_CONTENTLENGTH).getValue();
 
@@ -262,7 +277,7 @@ public class NodeDataHandler implements DataHandler
             MediaResponseBuilder.prepareMediaResponse(
                   null,
                   drbNode.getName(),
-                  contentType,
+                  DEFAULT_CONTENT_TYPE,
                   0,
                   contentLength,
                   request,
diff --git a/core/src/main/java/org/dhus/olingo/v2/data/NodeEntity.java b/core/src/main/java/org/dhus/olingo/v2/data/NodeEntity.java
index 720e9b6db..caf8c6d40 100644
--- a/core/src/main/java/org/dhus/olingo/v2/data/NodeEntity.java
+++ b/core/src/main/java/org/dhus/olingo/v2/data/NodeEntity.java
@@ -23,7 +23,7 @@ import fr.gael.dhus.datastore.processing.ProcessingUtils;
 
 import fr.gael.drb.DrbAttribute;
 import fr.gael.drb.DrbNode;
-import fr.gael.drb.impl.spi.DrbNodeSpi;
+import fr.gael.drb.impl.DrbNodeImpl;
 import fr.gael.drb.value.Value;
 
 import fr.gael.odata.engine.data.DataHandlerUtil;
@@ -121,65 +121,57 @@ public class NodeEntity extends Entity
 
    private static Long getContentLength(DrbNode drbNode)
    {
-      Long contentLength = -1L;
-      if (hasStream(drbNode))
+      if (!hasStream(drbNode))
       {
-         InputStream stream = getStream(drbNode);
-         if (contentLength == -1)
-         {
-            DrbAttribute attr = drbNode.getAttribute("size");
-            if (attr != null)
-            {
-               try
-               {
-                  contentLength = Long.decode(attr.getValue().toString());
-               }
-               catch (NumberFormatException nfe)
-               {
-                  // Error in attribute...
-               }
-            }
-         }
-         // Still not initialized ?
-         if (stream instanceof FileInputStream)
+         return 0L;
+      }
+      // Using 'contentLength' attribute
+      DrbAttribute attr = drbNode.getAttribute("contentLength");
+      if (attr != null)
+      {
+         try
          {
-            try
-            {
-               contentLength = ((FileInputStream) stream).getChannel().size();
-            }
-            catch (IOException e)
-            {
-               // Error while accessing file size: using -1L
-            }
+            return Long.decode(attr.getValue().toString());
          }
-         // Stil not iniitalized, forcing to 0
-         if (contentLength == -1)
+         catch (NumberFormatException suppressed) {}
+      }
+      // Using 'size' attribute
+      attr = drbNode.getAttribute("size");
+      if (attr != null)
+      {
+         try
          {
-            contentLength = 0L;
+            return Long.decode(attr.getValue().toString());
          }
+         catch (NumberFormatException suppressed) {}
       }
-      else
+      // If the input stream is a FileInputStream
+      try (InputStream stream = getStream(drbNode))
       {
-         contentLength = 0L;
+         if (stream instanceof FileInputStream)
+         {
+            return ((FileInputStream) stream).getChannel().size();
+         }
       }
+      catch (IOException suppressed) {}
 
-      return contentLength;
+      return 0L;
    }
 
    public static boolean hasStream(DrbNode drbNode)
    {
-      if (drbNode instanceof DrbNodeSpi)
+      if (drbNode instanceof DrbNodeImpl)
       {
-         return ((DrbNodeSpi) drbNode).hasImpl(InputStream.class);
+         return ((DrbNodeImpl) drbNode).hasImpl(InputStream.class);
       }
       return false;
    }
 
    public static InputStream getStream(DrbNode drbNode)
    {
-      if (drbNode instanceof DrbNodeSpi)
+      if (drbNode instanceof DrbNodeImpl)
       {
-         return (InputStream) ((DrbNodeSpi) drbNode).getImpl(InputStream.class);
+         return (InputStream) ((DrbNodeImpl) drbNode).getImpl(InputStream.class);
       }
       return null;
    }
diff --git a/core/src/main/java/org/dhus/olingo/v2/data/ProductDataHandler.java b/core/src/main/java/org/dhus/olingo/v2/data/ProductDataHandler.java
index d615c3e80..48a98ab36 100644
--- a/core/src/main/java/org/dhus/olingo/v2/data/ProductDataHandler.java
+++ b/core/src/main/java/org/dhus/olingo/v2/data/ProductDataHandler.java
@@ -19,25 +19,6 @@
  */
 package org.dhus.olingo.v2.data;
 
-import com.vividsolutions.jts.geom.Geometry;
-import com.vividsolutions.jts.io.gml2.GMLReader;
-
-import fr.gael.dhus.database.object.Order;
-import fr.gael.dhus.database.object.Product;
-import fr.gael.dhus.database.object.Product.Download;
-import fr.gael.dhus.database.object.Role;
-import fr.gael.dhus.database.object.Transformation;
-import fr.gael.dhus.service.EvictionService;
-import fr.gael.dhus.service.OrderService;
-import fr.gael.dhus.service.ProductService;
-import fr.gael.dhus.service.TransformationService;
-import fr.gael.dhus.spring.context.ApplicationContextProvider;
-import fr.gael.dhus.system.init.WorkingDirectory;
-
-import fr.gael.odata.engine.data.DataHandlerUtil;
-import fr.gael.odata.engine.data.DatabaseDataHandler;
-import fr.gael.odata.engine.processor.MediaResponseBuilder;
-
 import java.io.BufferedOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -49,20 +30,23 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Date;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.Set;
 import java.util.concurrent.ExecutionException;
 import java.util.stream.Collectors;
+
 import javax.xml.parsers.ParserConfigurationException;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
 import org.apache.olingo.commons.api.data.ComplexValue;
 import org.apache.olingo.commons.api.data.Entity;
 import org.apache.olingo.commons.api.data.EntityCollection;
+import org.apache.olingo.commons.api.data.EntityIterator;
 import org.apache.olingo.commons.api.data.GeoUtils;
 import org.apache.olingo.commons.api.data.Parameter;
 import org.apache.olingo.commons.api.data.Property;
@@ -71,6 +55,7 @@ import org.apache.olingo.commons.api.edm.EdmAction;
 import org.apache.olingo.commons.api.edm.EdmFunction;
 import org.apache.olingo.commons.api.edm.EdmNavigationProperty;
 import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
 import org.apache.olingo.commons.api.edm.geo.Geospatial;
 import org.apache.olingo.commons.api.edm.geo.LineString;
 import org.apache.olingo.commons.api.edm.geo.Point;
@@ -79,23 +64,25 @@ import org.apache.olingo.commons.api.http.HttpStatusCode;
 import org.apache.olingo.server.api.ODataApplicationException;
 import org.apache.olingo.server.api.ODataRequest;
 import org.apache.olingo.server.api.ODataResponse;
+import org.apache.olingo.server.api.uri.UriInfo;
 import org.apache.olingo.server.api.uri.UriParameter;
 import org.apache.olingo.server.api.uri.queryoption.CountOption;
 import org.apache.olingo.server.api.uri.queryoption.FilterOption;
 import org.apache.olingo.server.api.uri.queryoption.OrderByOption;
 import org.apache.olingo.server.api.uri.queryoption.SkipOption;
 import org.apache.olingo.server.api.uri.queryoption.TopOption;
-
+import org.dhus.ProductConstants;
 import org.dhus.api.transformation.TransformationException;
-
 import org.dhus.olingo.v2.ODataSecurityManager;
-import org.dhus.olingo.v2.datamodel.JobModel;
 import org.dhus.olingo.v2.datamodel.DataStoreModel;
 import org.dhus.olingo.v2.datamodel.ItemModel;
+import org.dhus.olingo.v2.datamodel.JobModel;
 import org.dhus.olingo.v2.datamodel.NodeModel;
 import org.dhus.olingo.v2.datamodel.OrderModel;
 import org.dhus.olingo.v2.datamodel.ProductModel;
 import org.dhus.olingo.v2.datamodel.TransformationModel;
+import org.dhus.olingo.v2.datamodel.UserModel;
+import org.dhus.olingo.v2.datamodel.action.DeleteProductsAction;
 import org.dhus.olingo.v2.datamodel.action.OrderProductAction;
 import org.dhus.olingo.v2.datamodel.action.RepairProductAction;
 import org.dhus.olingo.v2.datamodel.action.RepairProductsAction;
@@ -117,6 +104,7 @@ import org.dhus.store.datastore.DataStoreProduct;
 import org.dhus.store.datastore.ProductNotFoundException;
 import org.dhus.store.datastore.async.AsyncDataStoreException;
 import org.dhus.store.datastore.async.AsyncProduct;
+import org.dhus.store.datastore.openstack.OpenStackProduct;
 import org.dhus.store.derived.DerivedProductStore;
 import org.dhus.store.derived.DerivedProductStoreService;
 import org.dhus.store.ingestion.IngestibleRawProduct;
@@ -124,13 +112,36 @@ import org.dhus.store.ingestion.ProcessingManager;
 import org.dhus.store.quota.QuotaException;
 import org.dhus.transformation.TransformationManager;
 import org.dhus.transformation.TransformationQuotasException;
-
 import org.xml.sax.SAXException;
 
+import com.vividsolutions.jts.geom.Geometry;
+import com.vividsolutions.jts.io.gml2.GMLReader;
+
+import fr.gael.dhus.database.dao.PagedIterator;
+import fr.gael.dhus.database.object.Order;
+import fr.gael.dhus.database.object.Product;
+import fr.gael.dhus.database.object.Product.Download;
+import fr.gael.dhus.database.object.ProductCart;
+import fr.gael.dhus.database.object.Role;
+import fr.gael.dhus.database.object.Transformation;
+import fr.gael.dhus.database.object.User;
+import fr.gael.dhus.datastore.Destination;
+import fr.gael.dhus.service.EvictionService;
+import fr.gael.dhus.service.OrderService;
+import fr.gael.dhus.service.ProductCartService;
+import fr.gael.dhus.service.ProductService;
+import fr.gael.dhus.service.TransformationService;
+import fr.gael.dhus.service.UserService;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.system.init.WorkingDirectory;
+import fr.gael.odata.engine.data.DataHandlerUtil;
+import fr.gael.odata.engine.data.DatabaseStreamDataHandler;
+import fr.gael.odata.engine.processor.MediaResponseBuilder;
+
 /**
  * Provides data for Product entities.
  */
-public class ProductDataHandler implements DatabaseDataHandler
+public class ProductDataHandler implements DatabaseStreamDataHandler
 {
    private static final DataStoreManager DATASTORE_MANAGER =
          ApplicationContextProvider.getBean(DataStoreManager.class);
@@ -156,6 +167,12 @@ public class ProductDataHandler implements DatabaseDataHandler
    private static final OrderService ORDER_SERVICE =
          ApplicationContextProvider.getBean(OrderService.class);
 
+   private static final ProductCartService PRODUCT_CART_SERVICE =
+      ApplicationContextProvider.getBean(ProductCartService.class);
+
+   private static final UserService USER_SERVICE =
+      ApplicationContextProvider.getBean(UserService.class);
+
    private final TypeStore typeStore;
 
    private static final Logger LOGGER = LogManager.getLogger(ProductDataHandler.class);
@@ -554,55 +571,71 @@ public class ProductDataHandler implements DatabaseDataHandler
             complexValue);
    }
 
-   @Override
-   public EntityCollection getRelatedEntityCollectionData(Entity sourceEntity, EdmNavigationProperty edmNavigationProperty)
-         throws ODataApplicationException
-   {
-      String entityType = sourceEntity.getType();
-      // No product available from derived product
-      if (sourceEntity instanceof DerivedProductEntity)
-      {
-         throw new ODataApplicationException("Invalid navigation from derived product to "
-               + ProductModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString(),
-               HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
-      }
-      else if (DataStoreModel.isDataStoreSubType(entityType))
-      {
-         return getDataStoreNavLink(sourceEntity);
-      }
-      else if (sourceEntity.getType().equals(ProductModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()))
-      {
-         return getProductsNavLink(sourceEntity);
-      }
-      return null; // ?
-   }
-
-   private EntityCollection getDataStoreNavLink(Entity sourceEntity) throws ODataApplicationException
+   private EntityIterator getDataStoreNavLink(Entity sourceEntity) throws ODataApplicationException
    {
-      EntityCollection navigationTargetEntityCollection = new EntityCollection();
       String dataStoreName = (String) sourceEntity.getProperty(DataStoreModel.PROPERTY_NAME).getValue();
-
-      List<DataStore> dataStore = DATASTORE_MANAGER.list();
-      for (int i = 0; i < dataStore.size(); i++)
+      final DataStore ds = DATASTORE_MANAGER.getDataStoreByName(dataStoreName);
+      final Iterator<String> productIterator = ds.getScrollableProductResults();
+      if(productIterator == null)
+      {// In case the datastore does not support product iterator
+         EntityCollection col = new EntityCollection();
+         List<Entity> colEntities = col.getEntities();
+         List<String> uuids = ds.getProductList();
+         for(String uuid : uuids)
+         {
+            Product p = PRODUCT_SERVICE.getProduct(uuid);
+            if(p == null)
+            {
+               continue;
+            }
+            colEntities.add(toProductEntity(p));
+         }
+         final Iterator<Entity> entityIter = col.iterator();
+         return new EntityIterator()
+         {
+            @Override
+            public Entity next()
+            {
+               return entityIter.next();
+            }
+            @Override
+            public boolean hasNext()
+            {
+               return entityIter.hasNext();
+            }
+         };
+      }
+      return new EntityIterator()
       {
-         // retrieve list of product UUIDs from datastore of given name
-         if (dataStore.get(i).getName().equals(dataStoreName))
+         Product cursor = null;
+         @Override
+         public Entity next()
          {
-            List<String> productList = dataStore.get(i).getProductList();
+            if(cursor != null)
+            {
+               Entity entity = toProductEntity(cursor);
+               cursor = null;
+               return entity;
+            }
+            else
+            {
+               return toProductEntity(PRODUCT_SERVICE.getProduct(productIterator.next()));
+            }
+         }
 
-            // make entities
-            for (String uuid: productList)
+         @Override
+         public boolean hasNext()
+         {
+            while(cursor == null && productIterator.hasNext())
             {
-               Product product = PRODUCT_SERVICE.getProduct(uuid);
-               Entity productEntity = toProductEntity(product);
-               navigationTargetEntityCollection.getEntities().add(productEntity);
+               cursor = PRODUCT_SERVICE.getProduct(productIterator.next());
             }
+            return cursor != null;
          }
-      }
-      return navigationTargetEntityCollection;
+      };
    }
 
-   private EntityCollection getProductsNavLink(Entity sourceEntity)
+   private EntityIterator getProductsNavLink(Entity sourceEntity)
    {
       EntityCollection navigationTargetEntityCollection = new EntityCollection();
 
@@ -617,32 +650,105 @@ public class ProductDataHandler implements DatabaseDataHandler
       {
          navigationTargetEntityCollection.getEntities().add(toThumbnailEntity(product));
       }
-      return navigationTargetEntityCollection;
+      final Iterator<Entity> entityIterator = navigationTargetEntityCollection.iterator();
+      return new EntityIterator()
+      {
+         @Override
+         public Entity next()
+         {
+            return entityIterator.next();
+         }
+
+         @Override
+         public boolean hasNext()
+         {
+            return entityIterator.hasNext();
+         }
+      };
    }
 
+   private EntityIterator getCartNavLink(Entity sourceEntity, FilterOption filterOption, OrderByOption orderByOption,
+         TopOption topOption, SkipOption skipOption) throws ODataApplicationException
+   {
+      ProductSQLVisitor productSqlVisitor =
+         new ProductSQLVisitor(filterOption, orderByOption, topOption, skipOption);
+
+      String username = (String) sourceEntity.getProperty(UserModel.PROPERTY_USERNAME).getValue();
+      User user = UserDataHandler.getUser(username);
+      if (user == null)
+      {
+         throw new ODataApplicationException("Unable to get the user", HttpStatusCode.NOT_FOUND.getStatusCode(),
+               Locale.ENGLISH);
+      }
+      String uuid = user.getUUID();
+
+      final Iterator<Product> productIterator = PRODUCT_CART_SERVICE.getCartProducts(productSqlVisitor, uuid);
+      return new EntityIterator()
+      {
+         @Override
+         public Entity next()
+         {
+            return toProductEntity(productIterator.next());
+         }
+ 
+         @Override
+         public boolean hasNext()
+         {
+            return productIterator.hasNext();
+         }
+      };      
+   }
+   
    @Override
    public Entity getRelatedEntityData(Entity entity, List<UriParameter> navigationKeyParameters, EdmNavigationProperty edmNavigationProperty)
          throws ODataApplicationException
    {
-      String productUuid = (String) entity.getProperty(ItemModel.PROPERTY_ID).getValue();
-
-      Product product = PRODUCT_SERVICE.getProduct(productUuid);
-      for (UriParameter keyParameter: navigationKeyParameters)
+      if (entity.getType().equals(ProductModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()))
       {
-         if (keyParameter.getName().equals(ItemModel.PROPERTY_ID))
+         String productUuid = (String) entity.getProperty(ItemModel.PROPERTY_ID).getValue();
+
+         Product product = PRODUCT_SERVICE.getProduct(productUuid);
+         for (UriParameter keyParameter : navigationKeyParameters)
          {
-            String keyParameterValue = DataHandlerUtil.trimStringKeyParameter(keyParameter);
-            if (keyParameterValue.equals(QUICKLOOK_ID)
-                  && DERIVED_PS_SERVICE.hasDerivedProduct(productUuid, DerivedProductStoreService.QUICKLOOK_TAG))
+            if (keyParameter.getName().equals(ItemModel.PROPERTY_ID))
             {
-               return toQuicklookEntity(product);
+               String keyParameterValue = DataHandlerUtil.trimStringKeyParameter(keyParameter);
+               if (keyParameterValue.equals(QUICKLOOK_ID) && DERIVED_PS_SERVICE
+                     .hasDerivedProduct(productUuid, DerivedProductStoreService.QUICKLOOK_TAG))
+               {
+                  return toQuicklookEntity(product);
+               }
+               if (keyParameterValue.equals(THUMBNAIL_ID) && DERIVED_PS_SERVICE
+                     .hasDerivedProduct(productUuid, DerivedProductStoreService.THUMBNAIL_TAG))
+               {
+                  return toThumbnailEntity(product);
+               }
             }
-            if (keyParameterValue.equals(THUMBNAIL_ID)
-                  && DERIVED_PS_SERVICE.hasDerivedProduct(productUuid, DerivedProductStoreService.THUMBNAIL_TAG))
+         }
+      }
+      // Users(USERNAME)/Cart(UUID)
+      else if (entity.getType().equals(UserModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()))
+      {
+         String username = (String) entity.getProperty(UserModel.PROPERTY_USERNAME).getValue();
+         User user = UserDataHandler.getUser(username);
+         if (user == null)
+         {
+            throw new ODataApplicationException("Unable to get the user",
+                  HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+         }
+         ProductCart productCart = PRODUCT_CART_SERVICE.getCartOfUser(user);
+         Set<Product> prductList = productCart.getProducts();
+         for (Product product : prductList)
+         {
+            String uuid = product.getUuid();
+            for (UriParameter uriParameter : navigationKeyParameters)
             {
-               return toThumbnailEntity(product);
+               String key = DataHandlerUtil.trimStringKeyParameter(uriParameter);
+               if (uuid.equals(key))
+               {
+                  return toProductEntity(product);
+               }
             }
-            return null;
          }
       }
       return null;
@@ -688,33 +794,6 @@ public class ProductDataHandler implements DatabaseDataHandler
 
    }
 
-   @Override
-   public EntityCollection getEntityCollectionData(FilterOption filterOption, OrderByOption orderByOption,
-         TopOption topOption, SkipOption skipOption, CountOption countOption)
-         throws ODataApplicationException
-   {
-      // Retrieve data applying the different options
-      ProductSQLVisitor productSqlVisitor = new ProductSQLVisitor(filterOption, orderByOption, topOption, skipOption);
-      // FIXME full list in memory: paginate or stream
-      List<Product> productsCollection = PRODUCT_SERVICE.getProducts(productSqlVisitor, null);
-
-      EntityCollection entityCollection = new EntityCollection();
-      for (Product product: productsCollection)
-      {
-         Entity entityProduct = toProductEntity(product);
-         entityCollection.getEntities().add(entityProduct);
-      }
-
-      // handle count, must ignore skip & top
-      if (countOption != null && countOption.getValue())
-      {
-         // FIXME unnecessary extra request to database?
-         entityCollection.setCount(countEntities(filterOption));
-      }
-
-      return entityCollection;
-   }
-
    @Override
    public Integer countEntities(FilterOption filterOption) throws ODataApplicationException
    {
@@ -724,7 +803,8 @@ public class ProductDataHandler implements DatabaseDataHandler
    @Override
    public EntityCollection getEntityCollectionData() throws ODataApplicationException
    {
-      return getEntityCollectionData(null, null, null, null, null);
+      throw new ODataApplicationException("Not implemented ", HttpStatusCode.NOT_IMPLEMENTED.getStatusCode(),
+            Locale.ENGLISH);
    }
 
    @Override
@@ -788,6 +868,62 @@ public class ProductDataHandler implements DatabaseDataHandler
       return null;
    }
 
+   @Override
+   public Object performBoundActionEntityCollection(UriInfo uriInfo,
+         List<UriParameter> keyPredicates, EdmAction action, Map<String, Parameter> parameters)
+         throws ODataApplicationException
+   {
+      FullQualifiedName actionFQN = action.getFullQualifiedName();
+      if (actionFQN.equals(DeleteProductsAction.ACTION_DELETE_PRODUCTS_FQN))
+      {
+         if (parameters == null || parameters.isEmpty())
+         {
+            LOGGER.error("Parameters need to be filled");
+            throw new ODataApplicationException("Parameters need to be filled",
+                  HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+         }
+         performDeleteProductListBoundAction(parameters);
+
+         return new Property(null, DeleteProductsAction.PARAMETER_PRODUCT_LIST, ValueType.PRIMITIVE,
+               "The deletion is successfully done");
+      }
+      throw new ODataApplicationException("Action not found",
+            HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+   }
+
+   private void performDeleteProductListBoundAction(Map<String, Parameter> parameters) throws ODataApplicationException
+   {
+      ODataSecurityManager.checkPermission(Role.DATA_MANAGER);
+      EntityCollection productParameters = (EntityCollection) parameters.get(DeleteProductsAction.PARAMETER_PRODUCT_LIST).getValue();
+
+      List<Entity> entities = productParameters.getEntities();
+
+      for (Entity entity : entities)
+      {
+         String uuid = (String) entity.getProperty("Id").getValue();
+
+         Product product = PRODUCT_SERVICE.systemGetProduct(uuid);
+         if (product == null)
+         {
+            LOGGER.error("The product id is not valid");
+         }
+         try
+         {
+            long start = System.currentTimeMillis();
+            STORE_SERVICE.deleteProduct(uuid, Destination.TRASH, true, "");
+
+            long totalTime = System.currentTimeMillis() - start;
+            LOGGER.info("Deletion of product '{}' ({} bytes) successful spent {}ms",
+                  product.getIdentifier(), product.getSize(), totalTime);
+
+         }
+         catch (StoreException e)
+         {
+            LOGGER.warn("Cannot delete product {}: {}", uuid, e.getMessage());
+         }
+      }
+   }
+
    private Property singleProductRepairAction(List<UriParameter> keyPredicates)
          throws ODataApplicationException
    {
@@ -1048,6 +1184,13 @@ public class ProductDataHandler implements DatabaseDataHandler
          try
          {
             data = STORE_SERVICE.getPhysicalProduct(productUuid);
+            // particular case of MOST scenario (product no more available in DHuS format but in uuid.zip format)
+            if (data instanceof OpenStackProduct && ((OpenStackProduct)data).getUUID() != null)
+            {
+               ((OpenStackProduct)data).prepareDownloadInformation();
+               contentLength = (Long) data.getProperty(ProductConstants.DATA_SIZE);
+               checksumValue = (String) data.getProperty(ProductConstants.CHECKSUM_MD5);
+            }
             MediaResponseBuilder.prepareMediaResponse(
                   checksumValue,
                   data.getName(),
@@ -1168,4 +1311,77 @@ public class ProductDataHandler implements DatabaseDataHandler
                HttpStatusCode.INTERNAL_SERVER_ERROR.getStatusCode(), Locale.ENGLISH);
       }
    }
+
+   @Override
+   public void deleteEntityData(List<UriParameter> keyParameters) throws ODataApplicationException
+   {
+      ODataSecurityManager.checkPermission(Role.DATA_MANAGER);
+      String productId = DataHandlerUtil.getSingleStringKeyParameterValue(keyParameters, ItemModel.PROPERTY_ID);
+      try
+      {
+         STORE_SERVICE.deleteProduct(productId, Destination.TRASH, true, "");
+      }
+      catch (StoreException e)
+      {
+         LOGGER.error("Cannot delete product {}: {}", productId, e.getMessage());
+      }
+   }
+
+   @Override
+   public EntityIterator getEntityIteratorData(FilterOption filterOption, OrderByOption orderByOption,
+         TopOption topOption, SkipOption skipOption, CountOption countOption) throws ODataApplicationException
+   {
+      ProductSQLVisitor productSqlVisitor = new ProductSQLVisitor(filterOption, orderByOption, topOption, skipOption);
+      PagedIterator<Product> pIter = PRODUCT_SERVICE.getProducts(productSqlVisitor);
+      return new EntityIterator()
+      {
+         @Override
+         public Entity next()
+         {
+            return toProductEntity(pIter.next());
+         }
+
+         @Override
+         public boolean hasNext()
+         {
+            return pIter.hasNext();
+         }
+
+         @Override
+         public Integer getCount()
+         {
+            return pIter.getCount();
+         }
+      };
+   }
+
+   @Override
+   public EntityIterator getRelatedEntityIteratorData(Entity sourceEntity, EdmNavigationProperty edmNavigationProperty,
+         FilterOption filterOption, OrderByOption orderByOption, TopOption topOption, SkipOption skipOption,
+         CountOption countOption) throws ODataApplicationException
+   {
+      String entityType = sourceEntity.getType();
+      // No product available from derived product
+      if (sourceEntity instanceof DerivedProductEntity)
+      {
+         throw new ODataApplicationException(
+               "Invalid navigation from derived product to "
+                     + ProductModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString(),
+               HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+      }
+      else if (DataStoreModel.isDataStoreSubType(entityType))
+      {
+         return getDataStoreNavLink(sourceEntity);
+      }
+      else if (entityType.equals(ProductModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()))
+      {
+         return getProductsNavLink(sourceEntity);
+      }
+      else if (entityType.equals(UserModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()))
+      {
+         return getCartNavLink(sourceEntity, filterOption, orderByOption, topOption, skipOption);
+      }
+      return null;
+   }
+
 }
diff --git a/core/src/main/java/org/dhus/olingo/v2/data/SearchesDataHandler.java b/core/src/main/java/org/dhus/olingo/v2/data/SearchesDataHandler.java
new file mode 100644
index 000000000..caa63b12a
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/data/SearchesDataHandler.java
@@ -0,0 +1,192 @@
+package org.dhus.olingo.v2.data;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.UUID;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.olingo.commons.api.data.ComplexValue;
+import org.apache.olingo.commons.api.data.Entity;
+import org.apache.olingo.commons.api.data.EntityCollection;
+import org.apache.olingo.commons.api.data.Property;
+import org.apache.olingo.commons.api.data.ValueType;
+import org.apache.olingo.commons.api.edm.EdmNavigationProperty;
+import org.apache.olingo.commons.api.http.HttpStatusCode;
+import org.apache.olingo.server.api.ODataApplicationException;
+import org.apache.olingo.server.api.uri.UriParameter;
+import org.apache.olingo.server.api.uri.queryoption.CountOption;
+import org.apache.olingo.server.api.uri.queryoption.FilterOption;
+import org.apache.olingo.server.api.uri.queryoption.OrderByOption;
+import org.apache.olingo.server.api.uri.queryoption.SkipOption;
+import org.apache.olingo.server.api.uri.queryoption.TopOption;
+import org.dhus.olingo.v2.datamodel.SearchModel;
+import org.dhus.olingo.v2.datamodel.UserModel;
+import org.dhus.olingo.v2.datamodel.complex.AdvancedPropertyComplexType;
+
+import fr.gael.dhus.database.object.Search;
+import fr.gael.dhus.database.object.User;
+import fr.gael.dhus.service.UserService;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.odata.engine.data.DataHandlerUtil;
+import fr.gael.odata.engine.data.DatabaseDataHandler;
+
+public class SearchesDataHandler implements DatabaseDataHandler
+{
+   private static final UserService USER_SERVICE = ApplicationContextProvider.getBean(UserService.class);
+
+   @Override
+   public EntityCollection getEntityCollectionData() throws ODataApplicationException
+   {
+      // TODO Auto-generated method stub
+      return null;
+   }
+
+   @Override
+   public Entity getEntityData(List<UriParameter> keyParameters) throws ODataApplicationException
+   {
+      // TODO Auto-generated method stub
+      return null;
+   }
+
+   @Override
+   public EntityCollection getEntityCollectionData(FilterOption filterOption, OrderByOption orderByOption,
+         TopOption topOption, SkipOption skipOption, CountOption countOption) throws ODataApplicationException
+   {
+      // TODO Auto-generated method stub
+      return null;
+   }
+
+   @Override
+   public Integer countEntities(FilterOption filterOption) throws ODataApplicationException
+   {
+      // TODO Auto-generated method stub
+      return null;
+   }
+   
+   private Entity toOlingoEntity(Search search)
+   {  
+      Entity searchEntity = new Entity();
+      searchEntity.addProperty(new Property(null,
+            SearchModel.PROPERTY_ID,
+            ValueType.PRIMITIVE,
+            UUID.fromString(search.getUUID())));
+      
+      searchEntity.addProperty(new Property(null,
+            SearchModel.PROPERTY_NOTIFY,
+            ValueType.PRIMITIVE,
+            search.isNotify()));
+      
+      searchEntity.addProperty(new Property(null,
+            SearchModel.PROPERTY_FOOTPRINT,
+            ValueType.PRIMITIVE,
+            search.getFootprint()));
+      
+      searchEntity.addProperty(new Property(null,
+            SearchModel.PROPERTY_COMPLETE,
+            ValueType.PRIMITIVE,
+            search.getComplete()));
+      
+      searchEntity.addProperty(new Property(null,
+            SearchModel.PROPERTY_VALUE,
+            ValueType.PRIMITIVE,
+            search.getValue()));
+      
+      Map<String, String> advanced = search.getAdvanced();
+
+      List<ComplexValue> advancedComplexCollection = new ArrayList<>();
+      
+      for (String key : advanced.keySet())
+      {
+         String value = advanced.get(key);      
+         ComplexValue advancedValue = new ComplexValue();
+         advancedValue.getValue().add(new Property(
+               null,
+               AdvancedPropertyComplexType.PROPERTY_NAME,
+               ValueType.PRIMITIVE,
+               key));
+
+         advancedValue.getValue().add(new Property(
+               null,
+               AdvancedPropertyComplexType.PROPERTY_VALUE,
+               ValueType.PRIMITIVE,
+               value));
+
+         advancedComplexCollection.add(advancedValue);
+      }
+      
+      searchEntity.addProperty(new Property(null,
+            AdvancedPropertyComplexType.COMPLEX_TYPE_NAME,
+            ValueType.COLLECTION_COMPLEX,
+            advancedComplexCollection));
+      return searchEntity;
+   }
+   
+   @Override
+   public EntityCollection getRelatedEntityCollectionData(Entity sourceEntity,
+         EdmNavigationProperty edmNavigationProperty) throws ODataApplicationException
+   {
+      //Coming from User
+      if (sourceEntity.getType().equals(UserModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()))
+      {
+         EntityCollection navigationTargetEntityCollection = new EntityCollection();
+         String username = (String) sourceEntity.getProperty(UserModel.PROPERTY_USERNAME).getValue();
+         User user = UserDataHandler.getUser(username);
+         if (user == null)
+         {
+            throw new ODataApplicationException("Unable to get the user",
+                  HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+         }
+         List<Search> searches = USER_SERVICE.getAllUserSearches(user.getUUID());
+         if (searches != null)
+         {
+            searches.forEach(search ->
+            {
+               navigationTargetEntityCollection.getEntities().add(toOlingoEntity(search));
+            });
+            return navigationTargetEntityCollection;
+         }
+      }
+      return null;
+   }
+
+   @Override
+   public Entity getRelatedEntityData(Entity entity, List<UriParameter> navigationKeyParameters, EdmNavigationProperty edmNavigationProperty)
+         throws ODataApplicationException
+   {
+      if (entity.getType().equals(UserModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()))
+      {
+            String username = (String) entity.getProperty(UserModel.PROPERTY_USERNAME).getValue();
+            User user = UserDataHandler.getUser(username);
+            if (user == null)
+            {
+               throw new ODataApplicationException("Unable to get the user",
+                     HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+            }
+            List<Search> searches = USER_SERVICE.getAllUserSearches(user.getUUID());
+            if (searches != null)
+            {
+               String key = null;
+               for (UriParameter uriParameter : navigationKeyParameters)
+               {
+                  if (uriParameter.getName().equals(SearchModel.PROPERTY_ID))
+                  {
+                     key = DataHandlerUtil.trimStringKeyParameter(uriParameter);
+                     break;
+                  }
+               }
+               for (Search search : searches)
+               {
+                  if (search.getUUID().equals(key))
+                  {
+                     return toOlingoEntity(search);
+                  }
+               }
+            }
+      }
+      return null;
+   }
+   
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/data/SynchronizerDataHandler.java b/core/src/main/java/org/dhus/olingo/v2/data/SynchronizerDataHandler.java
index 07b2ab20a..0b1fb4e55 100644
--- a/core/src/main/java/org/dhus/olingo/v2/data/SynchronizerDataHandler.java
+++ b/core/src/main/java/org/dhus/olingo/v2/data/SynchronizerDataHandler.java
@@ -20,28 +20,67 @@
 package org.dhus.olingo.v2.data;
 
 import fr.gael.dhus.database.object.Role;
+import fr.gael.dhus.database.object.config.synchronizer.ProductSynchronizer;
 import fr.gael.dhus.database.object.config.synchronizer.SynchronizerConfiguration;
+import fr.gael.dhus.database.object.config.synchronizer.UserSynchronizer;
+import fr.gael.dhus.service.CollectionService;
 import fr.gael.dhus.service.ISynchronizerService;
+import fr.gael.dhus.service.exception.InvokeSynchronizerException;
 import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.system.config.ConfigurationManager;
+import fr.gael.dhus.util.XmlProvider;
 import fr.gael.odata.engine.data.DataHandler;
 import fr.gael.odata.engine.data.DataHandlerUtil;
 
+import static fr.gael.odata.engine.data.DataHandlerUtil.containsProperty;
+import static org.dhus.olingo.v2.datamodel.ScannerModel.PROPERTY_ID;
+
+import java.math.BigDecimal;
+import java.text.ParseException;
+import java.util.GregorianCalendar;
 import java.util.List;
+import java.util.Locale;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
-import org.dhus.api.olingo.v2.EntityProducer;
+import java.time.LocalDateTime;
+import java.sql.Timestamp;
 
+import org.apache.commons.lang.StringUtils;
+import javax.xml.datatype.DatatypeConfigurationException;
+import javax.xml.datatype.DatatypeFactory;
+import javax.xml.datatype.XMLGregorianCalendar;
+import org.dhus.api.olingo.v2.EntityProducer;
 import org.apache.olingo.commons.api.data.Entity;
 import org.apache.olingo.commons.api.data.EntityCollection;
+import org.apache.olingo.commons.api.edm.EdmNavigationProperty;
+import org.apache.olingo.commons.api.http.HttpMethod;
+import org.apache.olingo.commons.api.http.HttpStatusCode;
 import org.apache.olingo.server.api.ODataApplicationException;
 import org.apache.olingo.server.api.uri.UriParameter;
 import org.dhus.olingo.v2.ODataSecurityManager;
+import org.dhus.olingo.v2.datamodel.CollectionModel;
+import org.dhus.olingo.v2.datamodel.ProductSynchronizerModel;
 import org.dhus.olingo.v2.datamodel.SynchronizerModel;
+import org.dhus.olingo.v2.datamodel.complex.CronComplexType;
 import org.dhus.olingo.v2.entity.TypeStore;
 
-public class SynchronizerDataHandler implements DataHandler
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import com.vividsolutions.jts.geom.Geometry;
+import com.vividsolutions.jts.io.WKTReader;
+
+public class SynchronizerDataHandler extends AbstractSynchronizerDataHandler implements DataHandler
 {
-   protected static final ISynchronizerService SYNCHRONIZER_SERVICE =
-         ApplicationContextProvider.getBean(ISynchronizerService.class);
+   private static final ConfigurationManager CONFIG_MANAGER = ApplicationContextProvider.getBean(ConfigurationManager.class);
+   protected static final ISynchronizerService SYNCHRONIZER_SERVICE = ApplicationContextProvider.getBean(ISynchronizerService.class);
+   private static final CollectionService COLLECTION_SVC = ApplicationContextProvider.getBean(CollectionService.class);
+  
+  
+   private static final Logger LOGGER = LogManager.getLogger();
+   
+   private static final java.util.regex.Pattern GEO_FILTER_PATTERN =
+         Pattern.compile("(disjoint|within|contains|intersects) (.+)");
 
    private final TypeStore typeStore;
 
@@ -53,14 +92,26 @@ public class SynchronizerDataHandler implements DataHandler
    @Override
    public EntityCollection getEntityCollectionData() throws ODataApplicationException
    {
-      ODataSecurityManager.checkPermission(Role.SYSTEM_MANAGER);
+      if(!ODataSecurityManager.hasPermission(Role.FEDERATION_USER))
+      {
+         ODataSecurityManager.checkPermission(Role.SYSTEM_MANAGER);
+      }
 
       final EntityCollection entities = new EntityCollection();
       SYNCHRONIZER_SERVICE.getSynchronizerConfs().forEachRemaining(
-            (SynchronizerConfiguration syncConf) -> entities.getEntities().add(toOlingoEntity(syncConf))
+            (SynchronizerConfiguration syncConf) -> checkAndAddSynchronizer(entities, syncConf)
       );
       return entities;
    }
+   
+   private void checkAndAddSynchronizer(EntityCollection entities, SynchronizerConfiguration syncConf)
+   {
+      if (CONFIG_MANAGER.isGDPREnabled() && syncConf instanceof UserSynchronizer)
+      {
+         return;
+      }
+      entities.getEntities().add(toOlingoEntity(syncConf));
+   }
 
    protected Entity toOlingoEntity(SynchronizerConfiguration syncConf)
    {
@@ -70,7 +121,7 @@ public class SynchronizerDataHandler implements DataHandler
       TypeStore.Node entityProducerNode = typeStore.get(syncConf.getClass());
       if (entityProducerNode != null)
       {
-         res = entityProducerNode.<SynchronizerConfiguration>getEntityProducer().toOlingoEntity(syncConf);
+         res = entityProducerNode.getEntityProducer().toOlingoEntity(syncConf);
       }
       else
       {
@@ -83,10 +134,362 @@ public class SynchronizerDataHandler implements DataHandler
    @Override
    public Entity getEntityData(List<UriParameter> keyParameters) throws ODataApplicationException
    {
-      ODataSecurityManager.checkPermission(Role.SYSTEM_MANAGER);
+      if(!ODataSecurityManager.hasPermission(Role.FEDERATION_USER))
+      {
+         ODataSecurityManager.checkPermission(Role.SYSTEM_MANAGER);
+      }
 
       Integer kp = Integer.valueOf(keyParameters.get(0).getText());
       SynchronizerConfiguration config = SYNCHRONIZER_SERVICE.getSynchronizerConfById(kp, SynchronizerConfiguration.class);
+      if (CONFIG_MANAGER.isGDPREnabled() && config instanceof UserSynchronizer)
+      {
+         return null;
+      }
       return toOlingoEntity(config);
    }
+   
+   private long getSyncIdFromParam(List<UriParameter> keyParameters)
+   {
+      return keyParameters.stream()
+            .filter(param -> param.getName().equalsIgnoreCase(PROPERTY_ID))
+            .map(UriParameter::getText)
+            .mapToLong(Long::parseLong)
+            .findFirst()
+            .orElse(-1);
+   }
+   
+   private SynchronizerConfiguration getSynchronizer(List<UriParameter> keyParameters) throws ODataApplicationException
+   {
+      long id = getSyncIdFromParam(keyParameters);
+
+      if (id < 0)
+      {
+         throw new ODataApplicationException("No Id found in request",
+               HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+      }
+
+      SynchronizerConfiguration sync = SYNCHRONIZER_SERVICE.getSynchronizerConfById(id, SynchronizerConfiguration.class);
+      if (null == sync)
+      {
+         throw new ODataApplicationException("No Synchronizer exists with this id",
+               HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+      }
+
+      return sync;
+   }
+   
+   @Override
+   public void updateEntityData(List<UriParameter> keyParameters, Entity updatedEntity, HttpMethod httpMethod)
+         throws ODataApplicationException
+   {
+      ODataSecurityManager.checkPermission(Role.SYSTEM_MANAGER);
+
+      SynchronizerConfiguration sync = getSynchronizer(keyParameters);
+     
+      if (sync == null)
+      {
+         throw new ODataApplicationException(
+               "Cannot update synchronizer: targeted synchronizer does not exist",
+               HttpStatusCode.BAD_REQUEST.getStatusCode(),
+               Locale.ENGLISH);
+      }
+
+      boolean currentState = sync.isActive();
+      //Deactivate the synchronizer before updating it
+      SYNCHRONIZER_SERVICE.deactivateSynchronizer(sync.getId());
+      sync.setActive(currentState);
+
+      updateSynchronizerProperties(updatedEntity, sync);
+      
+      try
+      {
+         SYNCHRONIZER_SERVICE.saveSynchronizerConf(sync);
+      }
+      catch (InvokeSynchronizerException e)
+      {
+         throw new ODataApplicationException("Exception when updating synchronizer: " + e.getMessage(),
+               HttpStatusCode.INTERNAL_SERVER_ERROR.getStatusCode(),
+               Locale.ENGLISH);
+      }
+   }
+
+   @Override
+   public void deleteEntityData(List<UriParameter> keyParameters) throws ODataApplicationException
+   {
+      ODataSecurityManager.checkPermission(Role.SYSTEM_MANAGER);
+      SynchronizerConfiguration sync = getSynchronizer(keyParameters);
+      
+      if (sync == null)
+      {
+         throw new ODataApplicationException(
+               "Cannot update synchronizer: targeted synchronizer does not exist",
+               HttpStatusCode.BAD_REQUEST.getStatusCode(),
+               Locale.ENGLISH);
+      }
+      SYNCHRONIZER_SERVICE.deactivateSynchronizer(sync.getId());
+      SYNCHRONIZER_SERVICE.removeSynchronizer(sync.getId());
+   }
+
+   @Override
+   protected void updateSpecificProperties(Entity updatedEntity, SynchronizerConfiguration sync)
+   {
+      if (sync instanceof ProductSynchronizer)
+      {
+         ProductSynchronizer prodSync = (ProductSynchronizer) sync;
+         
+         if (containsProperty(updatedEntity, ProductSynchronizerModel.PROPERTY_REMOTE_INCOMING))
+         {
+            prodSync.setRemoteIncoming((String) DataHandlerUtil.getPropertyValue(updatedEntity,
+                  ProductSynchronizerModel.PROPERTY_REMOTE_INCOMING));
+         }     
+         
+         if (containsProperty(updatedEntity, ProductSynchronizerModel.PROPERTY_COPY_PRODUCT))
+         {
+            prodSync.setCopyProduct((Boolean) DataHandlerUtil.getPropertyValue(updatedEntity,
+                  ProductSynchronizerModel.PROPERTY_COPY_PRODUCT));
+         }
+
+         if (containsProperty(updatedEntity, ProductSynchronizerModel.PROPERTY_SYNC_OFFLINE))
+         {
+            prodSync.setSyncOfflineProducts((Boolean) DataHandlerUtil.getPropertyValue(updatedEntity,
+                  ProductSynchronizerModel.PROPERTY_SYNC_OFFLINE));
+         }
+
+         if (containsProperty(updatedEntity, ProductSynchronizerModel.PROPERTY_SKIP_ON_ERROR))
+         {
+            prodSync.setSkipOnError((Boolean) DataHandlerUtil.getPropertyValue(updatedEntity,
+                  ProductSynchronizerModel.PROPERTY_SKIP_ON_ERROR));
+         }
+         
+         if (containsProperty(updatedEntity, ProductSynchronizerModel.PROPERTY_FILTER_GEO))
+         {
+            updateGeoFilter((String) DataHandlerUtil.getPropertyValue(updatedEntity, 
+                  ProductSynchronizerModel.PROPERTY_FILTER_GEO), prodSync);
+         }
+         
+         if (containsProperty(updatedEntity, ProductSynchronizerModel.PROPERTY_FILTER_PARAM))
+         {
+            prodSync.setFilterParam((String) DataHandlerUtil.getPropertyValue(updatedEntity, 
+                  ProductSynchronizerModel.PROPERTY_FILTER_PARAM));
+         }
+         
+         if (containsProperty(updatedEntity, ProductSynchronizerModel.PROPERTY_SOURCE_COLLECTION))
+         {
+            prodSync.setSourceCollection((String) DataHandlerUtil.getPropertyValue(updatedEntity, 
+                  ProductSynchronizerModel.PROPERTY_SOURCE_COLLECTION));
+         }
+         
+         if (containsProperty(updatedEntity, ProductSynchronizerModel.PROPERTY_LAST_CREATION_DATE))
+         {
+            Timestamp time = (Timestamp) DataHandlerUtil.getPropertyValue
+                  (updatedEntity, ProductSynchronizerModel.PROPERTY_LAST_CREATION_DATE);
+              
+            LocalDateTime ldt = time.toLocalDateTime();
+            XMLGregorianCalendar cal;
+            try
+            {
+               cal = DatatypeFactory.newInstance().newXMLGregorianCalendar();
+
+               cal.setYear(ldt.getYear());
+               cal.setMonth(ldt.getMonthValue());
+               cal.setDay(ldt.getDayOfMonth());
+               cal.setHour(ldt.getHour());
+               cal.setMinute(ldt.getMinute());
+               cal.setSecond(ldt.getSecond());
+               String nanos = "0." + StringUtils.leftPad(String.valueOf(ldt.getNano()), 9, '0');
+               cal.setFractionalSecond(new BigDecimal(nanos));
+                     
+               prodSync.setLastCreated(cal);
+            }
+            catch (DatatypeConfigurationException e)
+            {
+               LOGGER.error("Error while updating LastCreationDate.", e);
+            }
+         }
+         
+         if (containsProperty(updatedEntity, ProductSynchronizerModel.PROPERTY_RETRIES_SKIPPED_PRODUCTS))         
+         {
+            Long val = (Long) DataHandlerUtil.getPropertyValue(updatedEntity,
+                  ProductSynchronizerModel.PROPERTY_RETRIES_SKIPPED_PRODUCTS);
+            prodSync.setRetriesForSkippedProducts(val.intValue());
+         }
+         
+         if (containsProperty(updatedEntity, ProductSynchronizerModel.PROPERTY_TIMEOUT_SKIPPED_PRODUCTS))
+         {
+            prodSync.setTimeoutSkippedProducts((Long) DataHandlerUtil.getPropertyValue(updatedEntity, 
+                  ProductSynchronizerModel.PROPERTY_TIMEOUT_SKIPPED_PRODUCTS));
+         }
+      }
+   }
+   
+   @Override
+   public Entity createEntityData(Entity entity) throws ODataApplicationException
+   {
+      ODataSecurityManager.checkPermission(Role.SYSTEM_MANAGER);
+      SynchronizerConfiguration sync = null;
+      if (entity.getType().equalsIgnoreCase(ProductSynchronizerModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString()))
+      {
+         sync = buildProductSynchronizerFromEntity(entity);
+      }
+      return toOlingoEntity(sync);
+   }
+   
+   private SynchronizerConfiguration buildProductSynchronizerFromEntity(Entity entity) 
+         throws ODataApplicationException
+   {
+      ProductSynchronizer psync = new ProductSynchronizer();
+
+      String schedule = (String) DataHandlerUtil.getPropertyValueFromComplexProperty(entity,
+            ProductSynchronizerModel.PROPERTY_CRON, CronComplexType.PROPERTY_SCHEDULE);
+
+      String label = (String) DataHandlerUtil.getPropertyValue(entity, 
+            ProductSynchronizerModel.PROPERTY_LABEL);
+      try
+      {
+         // create synchronizer (base)
+         psync = SYNCHRONIZER_SERVICE.createSynchronizer(label, schedule, ProductSynchronizer.class);
+
+         updateSynchronizerProperties(entity, psync);
+
+         SYNCHRONIZER_SERVICE.saveSynchronizerConf(psync);
+      }
+      catch (ParseException | ReflectiveOperationException | InvokeSynchronizerException e)
+      {
+         if (psync != null)
+         {
+            SYNCHRONIZER_SERVICE.removeSynchronizer(psync.getId());
+         }
+
+         throw new ODataApplicationException("Cannot create synchronizer",
+               HttpStatusCode.INTERNAL_SERVER_ERROR.getStatusCode(), Locale.ENGLISH);
+      }
+      catch (IllegalArgumentException e)
+      {
+         throw new ODataApplicationException("Cannot create synchronizer: " + e.getMessage(),
+               HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+      }
+      return psync;
+   }
+
+   /**
+    * Extracts geometry operation and shape.
+    *
+    * @param geoFilter geometry filter
+    * @param syncConf  synchronizer configuration to update
+    * @throws IllegalArgumentException if the <em>geoFilter</em> is not valid
+    */
+   private void updateGeoFilter(String geoFilter, ProductSynchronizer syncConf)
+   {
+      if (geoFilter == null || geoFilter.isEmpty())
+      {
+         syncConf.setGeofilterOp(null);
+         syncConf.setGeofilterShape(null);
+         return;
+      }
+      String baseErrorMessage = "Invalid parameter " + ProductSynchronizerModel.PROPERTY_FILTER_GEO;
+      Matcher matcher = GEO_FILTER_PATTERN.matcher(geoFilter);
+      if (!matcher.matches())
+      {
+         throw new IllegalArgumentException(baseErrorMessage);
+      }
+
+      String operation = matcher.group(1);
+      String shape = matcher.group(2);
+      WKTReader wktReader = new WKTReader();
+
+      try
+      {
+         Geometry geometry = wktReader.read(shape);
+         if (!geometry.isValid())
+         {
+            throw new IllegalArgumentException(baseErrorMessage + ": invalid shape");
+         }
+      }
+      catch (com.vividsolutions.jts.io.ParseException e)
+      {
+         throw new IllegalArgumentException(baseErrorMessage + ": cannot parse shape");
+      }
+
+      syncConf.setGeofilterOp(operation);
+      syncConf.setGeofilterShape(shape);
+   }
+   
+   @Override
+   public void createReferenceInCollection(List<UriParameter> sourceKeyPredicates,
+         EdmNavigationProperty navigationProperty, List<UriParameter> targetKeyPredicates)
+         throws ODataApplicationException
+   {
+      if (navigationProperty.getName().equals(ProductSynchronizerModel.NAVIGATION_TARGET_COLLECTION))
+      {
+         // get collection name
+         String collectionName =
+            DataHandlerUtil.getSingleStringKeyParameterValue(targetKeyPredicates, CollectionModel.PROPERTY_NAME);
+         
+         SynchronizerConfiguration sync = getSynchronizer(sourceKeyPredicates);
+
+         if (COLLECTION_SVC.getCollectionByName(collectionName) == null)
+         {
+            throw new ODataApplicationException("Target collection does not exist: " + collectionName,
+                  HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+         }
+         ProductSynchronizer pSync = (ProductSynchronizer) sync;
+         if (pSync.getTargetCollection() == null)
+         {
+            pSync.setTargetCollection(collectionName);
+         }
+
+         try
+         {
+            SYNCHRONIZER_SERVICE.saveSynchronizerConf(pSync);
+         }
+         catch (InvokeSynchronizerException e)
+         {
+            throw new ODataApplicationException("Exception when updating synchronizer: " + e.getMessage(),
+                  HttpStatusCode.INTERNAL_SERVER_ERROR.getStatusCode(), Locale.ENGLISH);
+         }
+      }
+      else
+      {
+         throw new ODataApplicationException("Cannot update such reference: " + navigationProperty,
+               HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+      }
+   }
+   
+   @Override
+   public void deleteReference(List<UriParameter> sourceKeyPredicates,
+         EdmNavigationProperty navigationProperty, List<UriParameter> targetKeyPredicates) throws ODataApplicationException
+   {
+      if (navigationProperty.getName().equals(ProductSynchronizerModel.NAVIGATION_TARGET_COLLECTION))
+      {
+         // get scanner configuration
+         SynchronizerConfiguration sync = getSynchronizer(sourceKeyPredicates);
+
+         // get collection name
+         String collectionName = DataHandlerUtil.getSingleStringKeyParameterValue(
+               targetKeyPredicates, CollectionModel.PROPERTY_NAME);
+
+         // remove existing collection names
+         ProductSynchronizer pSync = (ProductSynchronizer) sync;
+         String targetCollection = pSync.getTargetCollection();
+
+         boolean removed = false;
+         if (targetCollection != null)
+         {
+            removed = collectionName.equalsIgnoreCase(targetCollection);
+            targetCollection = null;
+         }
+
+         // could not remove collection because it was not listed
+         if (!removed)
+         {
+            throw new ODataApplicationException("Unknown Collection name: " + collectionName,
+                  HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+         }
+      }
+      else
+      {
+         throw new ODataApplicationException("Cannot update such reference: " + navigationProperty,
+               HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+      }
+   }
 }
diff --git a/core/src/main/java/org/dhus/olingo/v2/data/UserDataHandler.java b/core/src/main/java/org/dhus/olingo/v2/data/UserDataHandler.java
new file mode 100644
index 000000000..edb063ef2
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/data/UserDataHandler.java
@@ -0,0 +1,833 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.data;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.stream.Collectors;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.olingo.commons.api.data.ComplexValue;
+import org.apache.olingo.commons.api.data.Entity;
+import org.apache.olingo.commons.api.data.EntityCollection;
+import org.apache.olingo.commons.api.data.Parameter;
+import org.apache.olingo.commons.api.data.Property;
+import org.apache.olingo.commons.api.data.ValueType;
+import org.apache.olingo.commons.api.edm.EdmAction;
+import org.apache.olingo.commons.api.http.HttpMethod;
+import org.apache.olingo.commons.api.http.HttpStatusCode;
+import org.apache.olingo.server.api.ODataApplicationException;
+import org.apache.olingo.server.api.uri.UriParameter;
+import org.apache.olingo.server.api.uri.queryoption.CountOption;
+import org.apache.olingo.server.api.uri.queryoption.FilterOption;
+import org.apache.olingo.server.api.uri.queryoption.OrderByOption;
+import org.apache.olingo.server.api.uri.queryoption.SkipOption;
+import org.apache.olingo.server.api.uri.queryoption.TopOption;
+import org.dhus.olingo.v2.ODataSecurityManager;
+import org.dhus.olingo.v2.datamodel.SearchModel;
+import org.dhus.olingo.v2.datamodel.UserModel;
+import org.dhus.olingo.v2.datamodel.action.AddSearchAction;
+import org.dhus.olingo.v2.datamodel.action.ClearSearchesAction;
+import org.dhus.olingo.v2.datamodel.action.DeleteSearchAction;
+import org.dhus.olingo.v2.datamodel.action.LockUserAction;
+import org.dhus.olingo.v2.datamodel.action.UnlockUserAction;
+import org.dhus.olingo.v2.datamodel.action.EnableSearchAction;
+import org.dhus.olingo.v2.datamodel.complex.RestrictionComplexType;
+import org.dhus.olingo.v2.visitor.UserSQLVisitor;
+
+import fr.gael.dhus.database.object.Country;
+import fr.gael.dhus.database.object.Role;
+import fr.gael.dhus.database.object.Search;
+import fr.gael.dhus.database.object.User;
+import fr.gael.dhus.database.object.restriction.AccessRestriction;
+import fr.gael.dhus.olingo.Security;
+import fr.gael.dhus.service.UserService;
+import fr.gael.dhus.service.exception.EmailNotSentException;
+import fr.gael.dhus.service.exception.GDPREnabledException;
+import fr.gael.dhus.service.exception.RequiredFieldMissingException;
+import fr.gael.dhus.service.exception.RootNotModifiableException;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.system.config.ConfigurationManager;
+import fr.gael.odata.engine.data.DataHandlerUtil;
+import fr.gael.odata.engine.data.DatabaseDataHandler;
+
+public class UserDataHandler implements DatabaseDataHandler
+{
+   private static final UserService USER_SERVICE = ApplicationContextProvider.getBean(UserService.class);
+   
+   private ConfigurationManager CONFIG_MANAGER = 
+         ApplicationContextProvider.getBean(ConfigurationManager.class);
+
+
+   private static final Logger LOGGER = LogManager.getLogger();
+
+   private Entity toOlingoEntity(User user)
+   {
+      Entity userEntity = new Entity();
+
+      // username
+      userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_USERNAME,
+            ValueType.PRIMITIVE,
+            user.getUsername()));
+
+      if (!CONFIG_MANAGER.isGDPREnabled())
+      {
+         // email
+         userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_EMAIL,
+            ValueType.PRIMITIVE,
+            user.getEmail()));
+
+         // firstName
+         userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_FIRSTNAME,
+            ValueType.PRIMITIVE,
+            user.getFirstname()));
+
+         // lastName
+         userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_LASTNAME,
+            ValueType.PRIMITIVE,
+            user.getLastname()));
+
+         // country
+         userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_COUNTRY,
+            ValueType.PRIMITIVE,
+            user.getCountry()));
+
+         // phone
+         userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_PHONE,
+            ValueType.PRIMITIVE,
+            user.getPhone()));
+
+         // adresse
+         userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_ADDRESS,
+            ValueType.PRIMITIVE,
+            user.getAddress()));
+
+         // domain
+         userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_DOMAIN,
+            ValueType.PRIMITIVE,
+            user.getDomain()));
+
+         // subDomain
+         userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_SUBDOMAIN,
+            ValueType.PRIMITIVE,
+            user.getSubDomain()));
+
+         // usage
+         userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_USAGE,
+            ValueType.PRIMITIVE,
+            user.getUsage()));
+
+         // subUsage
+         userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_SUBUSAGE,
+            ValueType.PRIMITIVE,
+            user.getSubUsage()));
+
+         // hash
+         userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_HASH,
+            ValueType.PRIMITIVE,
+            user.getPasswordEncryption().getAlgorithmKey()));
+
+         // password
+         userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_PASSWORD,
+            ValueType.PRIMITIVE,
+            user.getPassword()));
+
+         // Restrictions
+         userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_RESTRICTIONS,
+            ValueType.COLLECTION_COMPLEX,
+            user.getRestrictions().stream().map(UserDataHandler::restrictionToComplexValue).collect(Collectors.toList())));
+
+      }
+      // created
+      userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_CREATED,
+            ValueType.PRIMITIVE,
+            user.getCreated()));
+
+      // SystemRoles
+      userEntity.addProperty(new Property(
+            null,
+            UserModel.PROPERTY_ROLES,
+            ValueType.COLLECTION_ENUM,
+            user.getRoles().stream().<Integer>map((r) -> r.ordinal()).collect(Collectors.toList())));
+
+      userEntity.setId(DataHandlerUtil.createEntityId(UserModel.ENTITY_SET_NAME, user.getUsername()));
+      userEntity.setType(UserModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString());
+
+      return userEntity;
+   }
+
+   private static ComplexValue restrictionToComplexValue(AccessRestriction restriction)
+   {
+      ComplexValue value = new ComplexValue();
+      value.setTypeName(RestrictionComplexType.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString());
+
+      // Id
+      value.getValue().add(new Property(
+            null,
+            RestrictionComplexType.PROPERTY_ID,
+            ValueType.PRIMITIVE,
+            restriction.getUUID()));
+
+      // Type
+      value.getValue().add(new Property(
+            null,
+            RestrictionComplexType.PROPERTY_TYPE,
+            ValueType.PRIMITIVE,
+            restriction.getClass().getSimpleName()));
+
+      // Reason
+      value.getValue().add(new Property(
+            null,
+            RestrictionComplexType.PROPERTY_REASON,
+            ValueType.PRIMITIVE,
+            restriction.getBlockingReason()));
+
+      return value;
+   }
+
+   private static Role enumToRole(Object object)
+   {
+      return Role.values()[(Number.class.cast(object).intValue())];
+   }
+
+   @Override
+   public EntityCollection getEntityCollectionData() throws ODataApplicationException
+   {
+      return getEntityCollectionData(null, null, null, null, null);
+   }
+
+   @Override
+   public Entity getEntityData(List<UriParameter> keyParameters) throws ODataApplicationException
+   {
+      String username = DataHandlerUtil.getSingleStringKeyParameterValue(keyParameters, UserModel.PROPERTY_USERNAME);
+      User user = getUser(username);    
+      return toOlingoEntity(user);      
+   }
+   
+   public static User getUser(String username) throws ODataApplicationException
+   {
+      User user = null;
+      if (Security.currentUserHasRole(Role.SYSTEM_MANAGER, Role.USER_MANAGER))
+      {
+         user = USER_SERVICE.getUserNoCheck(username);
+      }
+      else
+      {
+         User u = Security.getCurrentUser();      
+         if (username != null && u.getUsername ().equals (username))
+         {
+            user = USER_SERVICE.getUserNoCheck(username);
+         }
+         else
+         {
+            throw new ODataApplicationException("You are not allowed to display another User information",
+                  HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+         }
+      }
+
+      if (user == null)
+      {
+         throw new ODataApplicationException("No user exists with this name",
+               HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+      }
+      return user;
+   }
+
+   @Override
+   public EntityCollection getEntityCollectionData(FilterOption filterOption,
+         OrderByOption orderByOption, TopOption topOption, SkipOption skipOption,
+         CountOption countOption) throws ODataApplicationException
+   {
+      EntityCollection entityCollection = new EntityCollection();
+
+      boolean hasRole = Security.currentUserHasRole(Role.SYSTEM_MANAGER, Role.USER_MANAGER);
+      // users that can see only themselves on OData
+      if(!hasRole || CONFIG_MANAGER.isGDPREnabled())
+      {
+         User user = USER_SERVICE.getUserNoCheck(Security.getCurrentUser().getUsername());
+         entityCollection.getEntities().add(toOlingoEntity(user));
+         return entityCollection;
+      }
+
+      // users that can see all users of the service
+      UserSQLVisitor visitor = new UserSQLVisitor(filterOption, orderByOption, topOption, skipOption);
+      List <User> users = USER_SERVICE.getUsers(
+            visitor.getHqlQuery(),
+            visitor.getHqlParameters(),
+            visitor.getSkip(),
+            visitor.getTop());
+
+      users.forEach(user -> entityCollection.getEntities().add(toOlingoEntity(user))); 
+      return entityCollection;
+   }
+
+   @Override
+   public Entity createEntityData(Entity entity) throws ODataApplicationException
+   {
+      if (CONFIG_MANAGER.isGDPREnabled())
+      {
+         LOGGER.warn("GDPR enabled. User management not done by DHuS. Cannot create User.");
+         throw new ODataApplicationException("GDPR enabled. User management not done by DHuS. Cannot create User.",
+               HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+      }
+      String username = (String) DataHandlerUtil.getPropertyValue(entity, UserModel.PROPERTY_USERNAME);
+      if(username == null)
+      {
+         throw new ODataApplicationException("User's name is mandatory",
+               HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+      }
+
+      User user = new User();
+
+      // username
+      user.setUsername(username);
+
+      // email
+      if (DataHandlerUtil.containsProperty(entity, UserModel.PROPERTY_EMAIL))
+      {
+         user.setEmail((String) DataHandlerUtil.getPropertyValue(entity, UserModel.PROPERTY_EMAIL));
+      }
+
+      // firstname
+      if (DataHandlerUtil.containsProperty(entity, UserModel.PROPERTY_FIRSTNAME))
+      {
+         user.setFirstname((String) DataHandlerUtil.getPropertyValue(entity, UserModel.PROPERTY_FIRSTNAME));
+      }
+
+      // lastname
+      if (DataHandlerUtil.containsProperty(entity, UserModel.PROPERTY_LASTNAME))
+      {
+         user.setLastname((String) DataHandlerUtil.getPropertyValue(entity, UserModel.PROPERTY_LASTNAME));
+      }
+
+      // country
+      if (DataHandlerUtil.containsProperty(entity, UserModel.PROPERTY_COUNTRY))
+      {
+         String countryProperty = (String) DataHandlerUtil.getPropertyValue(entity, UserModel.PROPERTY_COUNTRY);
+         Country isoCountry = USER_SERVICE.getCountry(countryProperty);
+         if(isoCountry != null)
+         {
+         user.setCountry(isoCountry.getName());
+         }
+         else
+         {
+            throw new ODataApplicationException("Country not found",
+                  HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+         }
+      }
+
+      // phone
+      if (DataHandlerUtil.containsProperty(entity, UserModel.PROPERTY_PHONE))
+      {
+         user.setPhone((String) DataHandlerUtil.getPropertyValue(entity, UserModel.PROPERTY_PHONE));
+      }
+
+      // adress
+      if (DataHandlerUtil.containsProperty(entity, UserModel.PROPERTY_ADDRESS))
+      {
+         user.setAddress((String) DataHandlerUtil.getPropertyValue(entity, UserModel.PROPERTY_ADDRESS));
+      }
+
+      //domain
+      if (DataHandlerUtil.containsProperty(entity, UserModel.PROPERTY_DOMAIN))
+      {
+         user.setDomain((String) DataHandlerUtil.getPropertyValue(entity, UserModel.PROPERTY_DOMAIN));
+      }
+
+      //subDomain
+      if (DataHandlerUtil.containsProperty(entity, UserModel.PROPERTY_SUBDOMAIN))
+      {
+         user.setSubDomain((String) DataHandlerUtil.getPropertyValue(entity, UserModel.PROPERTY_SUBDOMAIN));
+      }
+
+      // usage
+      if (DataHandlerUtil.containsProperty(entity, UserModel.PROPERTY_USAGE))
+      {
+         user.setUsage((String) DataHandlerUtil.getPropertyValue(entity, UserModel.PROPERTY_USAGE));
+      }
+
+      // subUsage
+      if (DataHandlerUtil.containsProperty(entity, UserModel.PROPERTY_SUBUSAGE))
+      {
+         user.setSubUsage((String) DataHandlerUtil.getPropertyValue(entity, UserModel.PROPERTY_SUBUSAGE));
+      }
+
+      // password
+      if (DataHandlerUtil.containsProperty(entity, UserModel.PROPERTY_PASSWORD))
+      {
+         user.setPassword((String) DataHandlerUtil.getPropertyValue(entity, UserModel.PROPERTY_PASSWORD));
+      }
+      else
+      {
+         user.generatePassword();
+      }
+
+      // roles (some defaults may apply if not set)
+      if (DataHandlerUtil.containsProperty(entity, UserModel.PROPERTY_ROLES))
+      {
+         user.setRoles(entity.getProperty(UserModel.PROPERTY_ROLES).asCollection().stream()
+               .map(UserDataHandler::enumToRole).collect(Collectors.toList()));
+      }
+
+      try
+      {
+         USER_SERVICE.createUser(user);
+         return toOlingoEntity(USER_SERVICE.getUserByName(username));
+      }
+      catch (GDPREnabledException ex)
+      {
+         throw new ODataApplicationException(ex.getMessage(),
+               HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+      }
+      catch (EmailNotSentException ex)
+      {
+         throw new ODataApplicationException("Could not send validation e-mail",
+               HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+      }
+      catch (RequiredFieldMissingException ex)
+      {
+         throw new ODataApplicationException("A required field is missing to create a User: " + ex.getMessage(),
+               HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+      }
+      catch (RootNotModifiableException ex)
+      {
+         throw new ODataApplicationException("Root cannot be created",
+               HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+      }
+   }
+
+   @Override
+   public void updateEntityData(List<UriParameter> keyParameters, Entity updatedEntity, HttpMethod httpMethod)
+         throws ODataApplicationException
+   {
+      if (CONFIG_MANAGER.isGDPREnabled())
+      {
+         LOGGER.warn("GDPR enabled. User management not done by DHuS. Cannot update User.");
+         throw new ODataApplicationException("GDPR enabled. User management not done by DHuS. Cannot update User.",
+               HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+      }
+      User user = getUserFromParameters(keyParameters);
+      if (user == null)
+      {
+         throw new ODataApplicationException("No user exists with this name",
+               HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+      }
+      String email = (String) DataHandlerUtil.getPropertyValue(updatedEntity, UserModel.PROPERTY_EMAIL);
+      String firstName = (String) DataHandlerUtil.getPropertyValue(updatedEntity, UserModel.PROPERTY_FIRSTNAME);
+      String lastName = (String) DataHandlerUtil.getPropertyValue(updatedEntity, UserModel.PROPERTY_LASTNAME);
+      String country = (String) DataHandlerUtil.getPropertyValue(updatedEntity, UserModel.PROPERTY_COUNTRY);
+      String phone = (String) DataHandlerUtil.getPropertyValue(updatedEntity, UserModel.PROPERTY_PHONE);
+      String address = (String) DataHandlerUtil.getPropertyValue(updatedEntity, UserModel.PROPERTY_ADDRESS);
+      String domain = (String) DataHandlerUtil.getPropertyValue(updatedEntity, UserModel.PROPERTY_DOMAIN);
+      String subDomain = (String) DataHandlerUtil.getPropertyValue(updatedEntity, UserModel.PROPERTY_SUBDOMAIN);
+      String usage = (String) DataHandlerUtil.getPropertyValue(updatedEntity, UserModel.PROPERTY_USAGE);
+      String subUsage = (String) DataHandlerUtil.getPropertyValue(updatedEntity, UserModel.PROPERTY_SUBUSAGE);
+      String password = (String) DataHandlerUtil.getPropertyValue(updatedEntity, UserModel.PROPERTY_PASSWORD);
+
+      List<Property> updatedProperties = updatedEntity.getProperties();
+      for(Property updatedProperty : updatedProperties)
+      {
+         String propertyName = updatedProperty.getName();
+
+         // set email
+         if (propertyName.equals(UserModel.PROPERTY_EMAIL) && email != null)
+         {
+            user.setEmail(email);
+         }
+
+         // set fistname
+         if (propertyName.equals(UserModel.PROPERTY_FIRSTNAME))
+         {
+            user.setFirstname(firstName);
+         }
+
+         // set lastName
+         if (propertyName.equals(UserModel.PROPERTY_LASTNAME))
+         {
+            user.setLastname(lastName);
+         }
+
+         // set country
+         if (propertyName.equals(UserModel.PROPERTY_COUNTRY))
+         {
+            Country isoCountry = USER_SERVICE.getCountry(country);
+            if (isoCountry != null)
+            {
+               user.setCountry (isoCountry.getName ());
+            }
+            else
+            {
+               throw new ODataApplicationException("Country not found",
+                     HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+            }
+         }
+
+         // set lastName
+         if (propertyName.equals(UserModel.PROPERTY_PHONE))
+         {
+            user.setPhone(phone);
+         }
+
+         // set address
+         if (propertyName.equals(UserModel.PROPERTY_ADDRESS))
+         {
+            user.setAddress(address);
+         }
+
+         // set domain
+         if (propertyName.equals(UserModel.PROPERTY_DOMAIN))
+         {
+            user.setDomain(domain);
+         }
+
+         // set subDomain
+         if (propertyName.equals(UserModel.PROPERTY_SUBDOMAIN))
+         {
+            user.setSubDomain(subDomain);
+         }
+
+         // set usage
+         if (propertyName.equals(UserModel.PROPERTY_USAGE))
+         {
+            user.setUsage(usage);
+         }
+
+         // set subUsage
+         if (propertyName.equals(UserModel.PROPERTY_SUBUSAGE))
+         {
+            user.setSubUsage(subUsage);
+         }
+
+         // set password
+         if (propertyName.equals(UserModel.PROPERTY_PASSWORD))
+         {
+            user.setPassword(password);
+         }
+
+         // set roles
+         if (propertyName.equals(UserModel.PROPERTY_ROLES))
+         {
+            user.setRoles(updatedEntity.getProperty(UserModel.PROPERTY_ROLES).asCollection().stream()
+                  .map(UserDataHandler::enumToRole).collect(Collectors.toList()));
+         }
+      }
+
+      try
+      {
+         if (Security.getCurrentUser().equals(user))
+         {
+            USER_SERVICE.selfUpdateUser(user);
+         }
+         else
+         {
+            USER_SERVICE.updateUser(user);
+         }
+      }
+      catch (GDPREnabledException | RootNotModifiableException | EmailNotSentException | RequiredFieldMissingException ex)
+      {
+         throw new ODataApplicationException(ex.getMessage(),
+               HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+      }
+   }
+
+   @Override
+   public void deleteEntityData(List<UriParameter> keyParameters) throws ODataApplicationException
+   {
+      if (CONFIG_MANAGER.isGDPREnabled())
+      {
+         LOGGER.warn("GDPR enabled. User management not done by DHuS. Cannot delete User.");
+         throw new ODataApplicationException("GDPR enabled. User management not done by DHuS. Cannot delete User.",
+               HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+      }
+      String username = DataHandlerUtil.getSingleStringKeyParameterValue(keyParameters, UserModel.PROPERTY_USERNAME);
+      try
+      {
+         User user = USER_SERVICE.getUserByName(username);
+         if (user == null)
+         {
+            throw new ODataApplicationException("No user exists with this name",
+                  HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+         }
+         else
+         {
+            try
+            {
+               USER_SERVICE.deleteUser(user.getUUID());
+            }
+            catch (GDPREnabledException ex)
+            {
+               throw new ODataApplicationException(ex.getMessage(),
+                     HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+            }
+         }
+      }
+      catch (RootNotModifiableException e)
+      {
+         LOGGER.error("Cannot delete root user", e.getMessage());
+         throw new ODataApplicationException("Cannot delete root user",
+               HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+      }
+   }
+
+   @Override
+   public Integer countEntities(FilterOption filterOption) throws ODataApplicationException
+   {
+      boolean hasRole = Security.currentUserHasRole(Role.SYSTEM_MANAGER, Role.USER_MANAGER);
+      if (!hasRole || CONFIG_MANAGER.isGDPREnabled())
+      {
+         return 1;
+      }
+      UserSQLVisitor visitor = new UserSQLVisitor(filterOption, null, null, null);
+      return USER_SERVICE.countUsers(visitor.getHqlQuery(), visitor.getHqlParameters());
+   }
+
+   @Override
+   public Object performBoundAction(List<UriParameter> keyPredicates, EdmAction action, Map<String, Parameter> parameters)
+         throws ODataApplicationException
+   {
+      if (action.getFullQualifiedName().equals(LockUserAction.ACTION_LOCK_USER_FQN))
+      {
+         ODataSecurityManager.checkPermission(Role.USER_MANAGER);
+         String username = DataHandlerUtil.trimStringKeyParameter(keyPredicates.get(0));
+         String reason = (String) parameters.get(LockUserAction.PARAMETER_REASON).getValue();
+         try
+         {
+            User user = USER_SERVICE.getUserByName(username);
+            AccessRestriction restriction = USER_SERVICE.lockUser(user, reason);
+            return new Property(null, LockUserAction.ACTION_LOCK_USER, ValueType.COMPLEX, restrictionToComplexValue(restriction));
+         }
+         catch (GDPREnabledException ex)
+         {
+            throw new ODataApplicationException(ex.getMessage(),
+                  HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+         }
+         catch (RootNotModifiableException ex)
+         {
+            throw new ODataApplicationException(ex.getMessage(), HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+         }
+      }
+      else if (action.getFullQualifiedName().equals(UnlockUserAction.ACTION_UNLOCK_USER_FQN))
+      {
+         ODataSecurityManager.checkPermission(Role.USER_MANAGER);
+         String username = DataHandlerUtil.trimStringKeyParameter(keyPredicates.get(0));
+         String uuid = (String) parameters.get(UnlockUserAction.PARAMETER_ID).getValue();
+         try
+         {
+            User user = USER_SERVICE.getUserByName(username);
+            String res = (USER_SERVICE.unlockUser(user, uuid)) ? "Success" : "Restriction '" + uuid + "' not found";
+            return new Property(null, UnlockUserAction.ACTION_UNLOCK_USER, ValueType.PRIMITIVE, res);
+         }
+         catch (GDPREnabledException ex)
+         {
+            throw new ODataApplicationException(ex.getMessage(),
+                  HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+         }
+         catch (RootNotModifiableException ex)
+         {
+            throw new ODataApplicationException(ex.getMessage(), HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+         }
+      }
+      else if (action.getFullQualifiedName().equals(AddSearchAction.ACTION_ADD_SEARCH_FNQ))
+      {
+            String username = DataHandlerUtil.trimStringKeyParameter(keyPredicates.get(0));
+            if (!allowedUser(username))
+            {
+               throw new ODataApplicationException("User is not allowed to perform this action",
+                     HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+            }
+            Entity searchEntity = (Entity) parameters.get(AddSearchAction.PARAM_SEARCH).getValue();
+            if (searchEntity == null)
+            {
+               throw new ODataApplicationException("Cannot have a null object",
+                     HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+            }
+            User user = USER_SERVICE.getUserNoCheck(username);
+            Property advanced = searchEntity.getProperty(SearchModel.PROPERTY_ADVANCED);
+            Property complete = searchEntity.getProperty(SearchModel.PROPERTY_COMPLETE);
+            Property search = searchEntity.getProperty(SearchModel.PROPERTY_VALUE);
+            Property footprint = searchEntity.getProperty(SearchModel.PROPERTY_FOOTPRINT);
+            Search s = USER_SERVICE.storeUserSearch(user.getUUID(), (String) search.getValue(), (String) footprint.getValue(),
+                  processAdvancedProperty(advanced), (String) complete.getValue());
+            if (s == null)
+            {
+               return new Property(null, AddSearchAction.ACTION_ADD_SEARCH_NAME, ValueType.PRIMITIVE, "User search '"+complete.getValue()+"' already exists");
+            }
+            Property notify = searchEntity.getProperty(SearchModel.PROPERTY_NOTIFY);
+            try
+            {
+               USER_SERVICE.activateUserSearchNotification(s.getUUID(), (Boolean) notify.getValue());
+            }
+            catch (GDPREnabledException ex)
+            {
+               throw new ODataApplicationException(ex.getMessage(),
+                     HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+            }
+            return new Property(null, AddSearchAction.ACTION_ADD_SEARCH_NAME, ValueType.PRIMITIVE, "User search added");
+      }
+      else if (action.getFullQualifiedName().equals(EnableSearchAction.ACTION_ENABLE_SEARCH_FNQ))
+      {
+            String username = DataHandlerUtil.trimStringKeyParameter(keyPredicates.get(0));
+            if (!allowedUser(username))
+            {
+               throw new ODataApplicationException("User is not allowed to perform this action",
+                     HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+            }
+            Entity searchEntity = (Entity) parameters.get(AddSearchAction.PARAM_SEARCH).getValue();
+            if (searchEntity == null)
+            {
+               throw new ODataApplicationException("Cannot have a null object",
+                     HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+            }
+            Property uuid = searchEntity.getProperty(SearchModel.PROPERTY_ID);
+            Property notify = searchEntity.getProperty(SearchModel.PROPERTY_NOTIFY);
+            try
+            {
+               USER_SERVICE.activateUserSearchNotification((String) uuid.getValue(), (Boolean) notify.getValue());
+            }
+            catch (GDPREnabledException ex)
+            {
+               throw new ODataApplicationException(ex.getMessage(),
+                     HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+            }
+            return new Property(null, EnableSearchAction.ACTION_ENABLE_SEARCH_NAME, ValueType.PRIMITIVE, "User search "+(((Boolean)notify.getValue())?"enabled":"disabled"));
+      }
+      else if (action.getFullQualifiedName().equals(DeleteSearchAction.ACTION_DELETE_SEARCH_FNQ))
+      {
+            String username = DataHandlerUtil.trimStringKeyParameter(keyPredicates.get(0));
+            if (!allowedUser(username))
+            {
+               throw new ODataApplicationException("User is not allowed to perform this action",
+                     HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+            }
+            String searchId = (String) parameters.get(AddSearchAction.PARAM_SEARCH).getValue();
+            if (searchId == null)
+            {
+               throw new ODataApplicationException("Cannot have a null object",
+                     HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+            }
+            User user = USER_SERVICE.getUserNoCheck(username);
+            USER_SERVICE.removeUserSearch(user.getUUID(), searchId);
+            return new Property(null, DeleteSearchAction.ACTION_DELETE_SEARCH_NAME, ValueType.PRIMITIVE, "User search deleted");
+      }
+      else if (action.getFullQualifiedName().equals(ClearSearchesAction.ACTION_CLEAR_SEARCHES_FNQ))
+      {
+            String username = DataHandlerUtil.trimStringKeyParameter(keyPredicates.get(0));
+            if (!allowedUser(username))
+            {
+               throw new ODataApplicationException("User is not allowed to perform this action",
+                     HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+            }
+            User user = USER_SERVICE.getUserNoCheck(username);
+            USER_SERVICE.clearSavedSearches(user.getUUID());
+            return new Property(null, ClearSearchesAction.ACTION_CLEAR_SEARCHES_NAME, ValueType.PRIMITIVE, "User searches cleared");
+      }
+      throw new ODataApplicationException("Action not found", HttpStatusCode.NOT_FOUND.getStatusCode(), Locale.ENGLISH);
+   }
+   
+   /**
+    * This method verify if the current user has correct rights to perform action
+    * @param username
+    * @return
+    * @throws RootNotModifiableException 
+    */
+   private boolean allowedUser(String username)
+   {
+      User currentUser = USER_SERVICE.getCurrentUserInformation();
+      return currentUser.getUsername().equals(username) || ODataSecurityManager.hasPermission(Role.USER_MANAGER);
+   }
+
+   private HashMap<String, String> processAdvancedProperty(Property property)
+   {
+      if (property == null || !property.isCollection())
+         return null;
+      
+      HashMap<String, String> map = new HashMap<String, String>();
+      ArrayList<ComplexValue> advanced = (ArrayList<ComplexValue>) property.getValue();
+      advanced.forEach(complexValue -> {
+         List<Property> listValue = complexValue.getValue();
+         String key = (String)listValue.get(0).getValue();
+         String value = (String)listValue.get(1).getValue();
+         map.put(key, value);
+      });
+      return map;
+   }
+
+   private User getUserFromParameters(List<UriParameter> keyParameters)
+         throws ODataApplicationException
+   {
+      for (UriParameter keyParameter: keyParameters)
+      {
+         if (UserModel.PROPERTY_USERNAME.equals(keyParameter.getName()))
+         {
+            String username = DataHandlerUtil.trimStringKeyParameter(keyParameter);
+
+            if (!ODataSecurityManager.getCurrentUser().getUsername().equals(username)
+                  && !ODataSecurityManager.hasPermission(Role.USER_MANAGER))
+            {
+               throw new ODataApplicationException("Not allowed to access other users",
+                     HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+            }
+            try
+            {
+               return USER_SERVICE.getUserByName(username);
+            }
+            catch (RootNotModifiableException ex)
+            {
+               throw new ODataApplicationException(ex.getMessage(), HttpStatusCode.FORBIDDEN.getStatusCode(), Locale.ENGLISH);
+            }
+         }
+      }
+      return null;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/AsyncDataStoreModel.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/AsyncDataStoreModel.java
index 081c5beb2..b2d63ef13 100644
--- a/core/src/main/java/org/dhus/olingo/v2/datamodel/AsyncDataStoreModel.java
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/AsyncDataStoreModel.java
@@ -42,7 +42,6 @@ public class AsyncDataStoreModel implements EntityModel
    public static final FullQualifiedName FULL_QUALIFIED_NAME =
          new FullQualifiedName(DHuSODataServlet.NAMESPACE, ENTITY_TYPE_NAME);
 
-   public static final String PROPERTY_HFS_LOCATION = "HFSLocation";
    public static final String PROPERTY_IS_MASTER = "IsMaster";
    public static final String PROPERTY_PATRE_IN = "PatternReplaceIn";
    public static final String PROPERTY_PATRE_OUT = "PatternReplaceOut";
@@ -55,11 +54,6 @@ public class AsyncDataStoreModel implements EntityModel
    @Override
    public CsdlEntityType getEntityType()
    {
-      CsdlProperty hfsLocation = new CsdlProperty()
-            .setName(PROPERTY_HFS_LOCATION)
-            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
-            .setNullable(false);
-
       CsdlProperty isMaster = new CsdlProperty()
             .setName(PROPERTY_IS_MASTER)
             .setType(EdmPrimitiveTypeKind.Boolean.getFullQualifiedName())
@@ -92,7 +86,6 @@ public class AsyncDataStoreModel implements EntityModel
             .setBaseType(DataStoreModel.ABSTRACT_FULL_QUALIFIED_NAME)
             .setName(ENTITY_TYPE_NAME)
             .setProperties(Arrays.asList(
-                  hfsLocation,
                   isMaster,
                   patreIn,
                   patreOut,
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/DataStoreModel.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/DataStoreModel.java
index a0baee851..0079c2bf2 100644
--- a/core/src/main/java/org/dhus/olingo/v2/datamodel/DataStoreModel.java
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/DataStoreModel.java
@@ -56,6 +56,7 @@ public class DataStoreModel implements EntityModel
 
    public static final String NAVIGATION_PRODUCTS = "Products";
    public static final String NAVIGATION_EVICTION = "Eviction";
+   public static final String NAVIGATION_CACHE = "DataStoreCache";
 
    public static boolean isDataStoreSubType(String type)
    {
@@ -113,6 +114,11 @@ public class DataStoreModel implements EntityModel
             .setName(NAVIGATION_EVICTION)
             .setType(EvictionModel.FULL_QUALIFIED_NAME);
 
+      CsdlNavigationProperty cacheNavigationProperty = new CsdlNavigationProperty()
+            .setName(NAVIGATION_CACHE)
+            .setType(DataStoreModel.ABSTRACT_FULL_QUALIFIED_NAME)
+            .setCollection(false);
+
       // TODO handle authorizations
       return new CsdlEntityType()
             .setName(ABSTRACT_ENTITY_TYPE_NAME)
@@ -128,7 +134,8 @@ public class DataStoreModel implements EntityModel
             .setAbstract(true)
             .setNavigationProperties(Arrays.asList(
                   productNavigationProperty,
-                  evictionNavigationProperty
+                  evictionNavigationProperty,
+                  cacheNavigationProperty
             ));
    }
 
@@ -145,7 +152,14 @@ public class DataStoreModel implements EntityModel
       evictionNavigPropBinding.setTarget(EvictionModel.ENTITY_SET_NAME);
       evictionNavigPropBinding.setPath(NAVIGATION_EVICTION);
 
-      return entitySet.setNavigationPropertyBindings(Arrays.asList(productNavigPropBinding, evictionNavigPropBinding));
+      CsdlNavigationPropertyBinding cacheNavigPropBinding = new CsdlNavigationPropertyBinding();
+      cacheNavigPropBinding.setTarget(DataStoreModel.ABSTRACT_ENTITY_SET_NAME);
+      cacheNavigPropBinding.setPath(NAVIGATION_CACHE);
+
+      return entitySet.setNavigationPropertyBindings(Arrays.asList(
+            productNavigPropBinding,
+            evictionNavigPropBinding,
+            cacheNavigPropBinding));
    }
 
    @Override
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/DeletedProductModel.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/DeletedProductModel.java
new file mode 100644
index 000000000..8df598090
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/DeletedProductModel.java
@@ -0,0 +1,151 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2019 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.datamodel;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlEntityType;
+import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
+import org.apache.olingo.commons.api.edm.provider.CsdlPropertyRef;
+import org.dhus.olingo.v2.datamodel.complex.ChecksumComplexType;
+import org.dhus.olingo.v2.datamodel.complex.TimeRangeComplexType;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+import fr.gael.odata.engine.model.EntityModel;
+
+
+public class DeletedProductModel implements EntityModel
+{
+   public static final String ENTITY_TYPE_NAME = "DeletedProduct";
+   public static final String ENTITY_SET_NAME = "DeletedProducts";
+   public static final FullQualifiedName FULL_QUALIFIED_NAME =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ENTITY_TYPE_NAME);
+
+   public static final String PROPERTY_ID = "Id";
+   public static final String PROPERTY_NAME = "Name";
+   public static final String PROPERTY_CREATION_DATE = "CreationDate";
+   public static final String PROPERTY_FOOTPRINT = "FootPrint";
+   public static final String PROPERTY_SIZE = "Size";
+   public static final String PROPERTY_INGESTION_DATE = "IngestionDate";
+   public static final String PROPERTY_CONTENT_DATE = "ContentDate";
+   public static final String PROPERTY_DELETION_DATE = "DeletionDate";
+   public static final String PROPERTY_DELETION_CAUSE = "DeletionCause";
+   public static final String PROPERTY_CHECKSUM = "Checksum";
+
+   @Override
+   public CsdlEntityType getEntityType()
+   {
+      List<CsdlProperty> properties = new ArrayList<>();
+
+      CsdlProperty id = new CsdlProperty()
+            .setName(PROPERTY_ID)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false);
+      properties.add(id);
+
+      CsdlProperty name = new CsdlProperty()
+            .setName(PROPERTY_NAME)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false);
+      properties.add(name);
+
+      CsdlProperty creationDate = new CsdlProperty()
+            .setName(PROPERTY_CREATION_DATE)
+            .setType(EdmPrimitiveTypeKind.DateTimeOffset.getFullQualifiedName())
+            .setPrecision(3)
+            .setNullable(false);
+      properties.add(creationDate);
+
+      CsdlProperty footPrint = new CsdlProperty()
+            .setName(PROPERTY_FOOTPRINT)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(footPrint);
+
+      CsdlProperty size = new CsdlProperty()
+            .setName(PROPERTY_SIZE)
+            .setType(EdmPrimitiveTypeKind.Int64.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(size);
+
+      CsdlProperty ingestionDate = new CsdlProperty()
+            .setName(PROPERTY_INGESTION_DATE)
+            .setType(EdmPrimitiveTypeKind.DateTimeOffset.getFullQualifiedName())
+            .setPrecision(3)
+            .setNullable(true);
+      properties.add(ingestionDate);
+
+      CsdlProperty deletionDate = new CsdlProperty()
+            .setName(PROPERTY_DELETION_DATE)
+            .setType(EdmPrimitiveTypeKind.DateTimeOffset.getFullQualifiedName())
+            .setPrecision(3)
+            .setNullable(true);
+      properties.add(deletionDate);
+
+      CsdlProperty deletionCause = new CsdlProperty()
+            .setName(PROPERTY_DELETION_CAUSE)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(deletionCause);
+
+      // Complex Properties
+      CsdlProperty contentDate = new CsdlProperty()
+            .setName(PROPERTY_CONTENT_DATE)
+            .setType(TimeRangeComplexType.FULL_QUALIFIED_NAME)
+            .setPrecision(3)
+            .setNullable(true);
+      properties.add(contentDate);
+
+      CsdlProperty checksum = new CsdlProperty()
+            .setName(PROPERTY_CHECKSUM)
+            .setType(ChecksumComplexType.FULL_QUALIFIED_NAME)
+            .setCollection(true)
+            .setNullable(true);
+      properties.add(checksum);
+
+      CsdlPropertyRef nameKey = new CsdlPropertyRef().setName(PROPERTY_ID);
+
+      return new CsdlEntityType().setName(ENTITY_TYPE_NAME)
+            .setProperties(properties)
+            .setKey(Collections.<CsdlPropertyRef> singletonList(nameKey));
+   }
+
+   @Override
+   public String getEntitySetName()
+   {
+      return ENTITY_SET_NAME;
+   }
+
+   @Override
+   public String getName()
+   {
+      return ENTITY_TYPE_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return FULL_QUALIFIED_NAME;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/EvictionModel.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/EvictionModel.java
index 9e86ce6ef..4b2795db9 100644
--- a/core/src/main/java/org/dhus/olingo/v2/datamodel/EvictionModel.java
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/EvictionModel.java
@@ -19,6 +19,7 @@
  */
 package org.dhus.olingo.v2.datamodel;
 
+import fr.gael.dhus.database.object.config.eviction.EvictionBaseDate;
 import fr.gael.dhus.database.object.config.eviction.EvictionStatusEnum;
 
 import fr.gael.odata.engine.model.EntityModel;
@@ -57,6 +58,9 @@ public class EvictionModel implements EntityModel
    public static final String SOFT_EVICTION = "SoftEviction";
    public static final String STATUS = "Status";
    public static final String CRON = "Cron";
+   public static final String SAFE_MODE = "SafeMode";
+   public static final String TARGET_DATASTORE = "TargetDataStore";
+   public static final String BASE_DATE = "BaseDate";
 
    private static final Map<String, Object> DEFAULT_VALUES = new HashMap<>();
 
@@ -66,7 +70,9 @@ public class EvictionModel implements EntityModel
       DEFAULT_VALUES.put(KEEP_PERIOD_UNIT, "DAYS");
       DEFAULT_VALUES.put(MAX_EVICTED_PRODUCTS, 1000);
       DEFAULT_VALUES.put(SOFT_EVICTION, false);
+      DEFAULT_VALUES.put(SAFE_MODE, false);
       DEFAULT_VALUES.put(STATUS, EvictionStatusEnum.STOPPED.toString());
+      DEFAULT_VALUES.put(BASE_DATE, EvictionBaseDate.MODIFICATION_DATE.value());
    }
 
    @Override
@@ -111,6 +117,18 @@ public class EvictionModel implements EntityModel
             .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
             .setNullable(false)
             .setDefaultValue(DEFAULT_VALUES.get(STATUS).toString());
+      
+      CsdlProperty safeMode = new CsdlProperty().setName(SAFE_MODE)
+            .setType(EdmPrimitiveTypeKind.Boolean.getFullQualifiedName())
+            .setDefaultValue(DEFAULT_VALUES.get(SAFE_MODE).toString());
+      
+      CsdlProperty targetDatastore = new CsdlProperty().setName(TARGET_DATASTORE)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName());
+
+      CsdlProperty baseDate = new CsdlProperty().setName(BASE_DATE)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false)
+            .setDefaultValue(DEFAULT_VALUES.get(BASE_DATE).toString());
 
       CsdlProperty cron = new CsdlProperty()
             .setName(CRON)
@@ -129,7 +147,11 @@ public class EvictionModel implements EntityModel
                         targetCollection,
                         softEviction,
                         status,
-                        cron))
+                        cron,
+                        safeMode,
+                        targetDatastore,
+                        baseDate
+                        ))
             .setKey(Collections.singletonList(nameKey));
    }
 
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/HttpAsyncDataStoreModel.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/HttpAsyncDataStoreModel.java
new file mode 100644
index 000000000..97b55ccd9
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/HttpAsyncDataStoreModel.java
@@ -0,0 +1,102 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.datamodel;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlEntityType;
+import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+import fr.gael.odata.engine.model.EntityModel;
+
+public class HttpAsyncDataStoreModel implements EntityModel
+{
+   public static final String ENTITY_TYPE_NAME = "HttpAsyncDataStore";
+   public static final String ENTITY_SET_NAME = "HttpAsyncDataStores";
+   public static final FullQualifiedName FULL_QUALIFIED_NAME =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ENTITY_TYPE_NAME);
+
+   public static final String PROPERTY_SERVICE_URL = "ServiceUrl";
+   public static final String PROPERTY_LOGIN = "Login";
+   public static final String PROPERTY_PASSWORD = "Password";
+   public static final String PROPERTY_MAX_CONCURRENTS_DOWNLOADS = "MaxConcurrentsDownloads";
+   public static final String PROPERTY_INTERVAL = "Interval";
+
+   @Override
+   public CsdlEntityType getEntityType()
+   {
+      CsdlProperty url = new CsdlProperty()
+            .setName(PROPERTY_SERVICE_URL)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false);
+
+      CsdlProperty login = new CsdlProperty()
+            .setName(PROPERTY_LOGIN)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+
+      CsdlProperty password = new CsdlProperty()
+            .setName(PROPERTY_PASSWORD)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+
+      CsdlProperty maxConcurrentsDownloads = new CsdlProperty()
+            .setName(PROPERTY_MAX_CONCURRENTS_DOWNLOADS)
+            .setType(EdmPrimitiveTypeKind.Int32.getFullQualifiedName())
+            .setNullable(true);
+
+      CsdlProperty interval = new CsdlProperty()
+            .setName(PROPERTY_INTERVAL)
+            .setType(EdmPrimitiveTypeKind.Int64.getFullQualifiedName())
+            .setNullable(true);
+
+      return new CsdlEntityType()
+            .setBaseType(AsyncDataStoreModel.FULL_QUALIFIED_NAME)
+            .setName(ENTITY_TYPE_NAME)
+            .setProperties(Arrays.asList(
+                  url,
+                  login,
+                  password,
+                  maxConcurrentsDownloads,
+                  interval))
+            .setAbstract(true);
+   }
+
+   @Override
+   public String getName()
+   {
+      return ENTITY_TYPE_NAME;
+   }
+
+   @Override
+   public String getEntitySetName()
+   {
+      return ENTITY_SET_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return FULL_QUALIFIED_NAME;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/LtaDataStoreModel.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/LtaDataStoreModel.java
new file mode 100644
index 000000000..be2522919
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/LtaDataStoreModel.java
@@ -0,0 +1,63 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.datamodel;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlEntityType;
+import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+public class LtaDataStoreModel extends HttpAsyncDataStoreModel
+{
+   public static final String ENTITY_TYPE_NAME = "LTADataStore";
+   public static final FullQualifiedName FULL_QUALIFIED_NAME =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ENTITY_TYPE_NAME);
+
+   public static final String PROPERTY_ORDER = "Order";
+
+   @Override
+   public CsdlEntityType getEntityType()
+   {
+      CsdlProperty order = new CsdlProperty()
+            .setName(PROPERTY_ORDER)
+            .setType(EdmPrimitiveTypeKind.Boolean.getFullQualifiedName())
+            .setNullable(true);
+
+      return new CsdlEntityType()
+            .setBaseType(HttpAsyncDataStoreModel.FULL_QUALIFIED_NAME)
+            .setName(ENTITY_TYPE_NAME)
+            .setProperties(Arrays.asList(order));
+   }
+
+   @Override
+   public String getName()
+   {
+      return ENTITY_TYPE_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return FULL_QUALIFIED_NAME;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/OndaDataStoreModel.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/OndaDataStoreModel.java
new file mode 100644
index 000000000..2ca385128
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/OndaDataStoreModel.java
@@ -0,0 +1,80 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.datamodel;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlEntityType;
+import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
+import org.dhus.olingo.v2.datamodel.complex.ObjectStorageComplexType;
+import org.dhus.olingo.v2.datamodel.complex.OndaScannerComplexType;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+public class OndaDataStoreModel extends HttpAsyncDataStoreModel
+{
+   public static final String ENTITY_TYPE_NAME = "ONDADataStore";
+   public static final FullQualifiedName FULL_QUALIFIED_NAME
+         = new FullQualifiedName(DHuSODataServlet.NAMESPACE, ENTITY_TYPE_NAME);
+
+   public static final String PROPERTY_ORDER = "Order";
+   public static final String PROPERTY_OBJECT_STORAGE_CREDENTIAL = "ObjectStorageCredential";
+   public static final String PROPERTY_ONDA_SCANNER = "OndaScanner";
+
+   @Override
+   public CsdlEntityType getEntityType()
+   {
+      CsdlProperty order = new CsdlProperty()
+            .setName(PROPERTY_ORDER)
+            .setType(EdmPrimitiveTypeKind.Boolean.getFullQualifiedName())
+            .setNullable(true);
+      
+      CsdlProperty objectStorageCredential = new CsdlProperty()
+            .setName(PROPERTY_OBJECT_STORAGE_CREDENTIAL)
+            .setType(ObjectStorageComplexType.FULL_QUALIFIED_NAME)
+            .setNullable(true);
+      
+      CsdlProperty ondaScanner = new CsdlProperty()
+            .setName(PROPERTY_ONDA_SCANNER)
+            .setType(OndaScannerComplexType.FULL_QUALIFIED_NAME)
+            .setNullable(true);
+
+      return new CsdlEntityType()
+            .setBaseType(HttpAsyncDataStoreModel.FULL_QUALIFIED_NAME)
+            .setName(ENTITY_TYPE_NAME)
+            .setProperties(Arrays.asList(
+                  order,
+                  objectStorageCredential,
+                  ondaScanner));
+    }
+
+   @Override
+   public String getName()
+   {
+      return ENTITY_TYPE_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return FULL_QUALIFIED_NAME;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/PdgsDataStoreModel.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/PdgsDataStoreModel.java
index 201f3d0bf..a5ac69304 100644
--- a/core/src/main/java/org/dhus/olingo/v2/datamodel/PdgsDataStoreModel.java
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/PdgsDataStoreModel.java
@@ -1,6 +1,6 @@
 /*
  * Data Hub Service (DHuS) - For Space data distribution.
- * Copyright (C) 2018,2019 GAEL Systems
+ * Copyright (C) 2018-2020 GAEL Systems
  *
  * This file is part of DHuS software sources.
  *
@@ -19,68 +19,27 @@
  */
 package org.dhus.olingo.v2.datamodel;
 
-import java.util.Arrays;
-
-import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
 import org.apache.olingo.commons.api.edm.FullQualifiedName;
 import org.apache.olingo.commons.api.edm.provider.CsdlEntityType;
-import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
 
 import org.dhus.olingo.v2.web.DHuSODataServlet;
 
 /**
  * Describes the PdgsDataStore entity type.
  */
-public class PdgsDataStoreModel extends DataStoreModel
+public class PdgsDataStoreModel extends HttpAsyncDataStoreModel
 {
 
    public static final String ENTITY_TYPE_NAME = "PDGSDataStore";
    public static final FullQualifiedName FULL_QUALIFIED_NAME =
          new FullQualifiedName(DHuSODataServlet.NAMESPACE, ENTITY_TYPE_NAME);
 
-   public static final String PROPERTY_SERVICE_URL = "ServiceUrl";
-   public static final String PROPERTY_LOGIN = "Login";
-   public static final String PROPERTY_PASSWORD = "Password";
-   public static final String PROPERTY_MAX_CONCURRENTS_DOWNLOADS = "MaxConcurrentsDownloads";
-   public static final String PROPERTY_INTERVAL = "Interval";
-
    @Override
    public CsdlEntityType getEntityType()
    {
-      CsdlProperty url = new CsdlProperty()
-            .setName(PROPERTY_SERVICE_URL)
-            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
-            .setNullable(false);
-
-      CsdlProperty login = new CsdlProperty()
-            .setName(PROPERTY_LOGIN)
-            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
-            .setNullable(false);
-
-      CsdlProperty password = new CsdlProperty()
-            .setName(PROPERTY_PASSWORD)
-            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
-            .setNullable(false);
-
-      CsdlProperty maxConcurrentsDownloads = new CsdlProperty()
-            .setName(PROPERTY_MAX_CONCURRENTS_DOWNLOADS)
-            .setType(EdmPrimitiveTypeKind.Int32.getFullQualifiedName())
-            .setNullable(true);
-
-      CsdlProperty interval = new CsdlProperty()
-            .setName(PROPERTY_INTERVAL)
-            .setType(EdmPrimitiveTypeKind.Int64.getFullQualifiedName())
-            .setNullable(true);
-
       return new CsdlEntityType()
-            .setBaseType(AsyncDataStoreModel.FULL_QUALIFIED_NAME)
-            .setName(ENTITY_TYPE_NAME)
-            .setProperties(Arrays.asList(
-                  url,
-                  login,
-                  password,
-                  maxConcurrentsDownloads,
-                  interval));
+            .setBaseType(HttpAsyncDataStoreModel.FULL_QUALIFIED_NAME)
+            .setName(ENTITY_TYPE_NAME);
    }
 
    @Override
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/ProductSynchronizerModel.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/ProductSynchronizerModel.java
new file mode 100644
index 000000000..0f170cf97
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/ProductSynchronizerModel.java
@@ -0,0 +1,105 @@
+package org.dhus.olingo.v2.datamodel;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlEntitySet;
+import org.apache.olingo.commons.api.edm.provider.CsdlEntityType;
+import org.apache.olingo.commons.api.edm.provider.CsdlNavigationProperty;
+import org.apache.olingo.commons.api.edm.provider.CsdlNavigationPropertyBinding;
+import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+import fr.gael.odata.engine.model.EntityModel;
+
+public class ProductSynchronizerModel extends SynchronizerModel
+{
+
+   public static final String ENTITY_TYPE_NAME = "ProductSynchronizer";
+   public static final FullQualifiedName FULL_QUALIFIED_NAME
+         = new FullQualifiedName(DHuSODataServlet.NAMESPACE, ENTITY_TYPE_NAME);
+   
+   public static final String PROPERTY_SYNC_OFFLINE = "SyncOfflineProducts";
+   public static final String PROPERTY_COPY_PRODUCT = "CopyProduct";
+   public static final String PROPERTY_FILTER_PARAM = "FilterParam";
+   public static final String PROPERTY_GEO_FILTER = "GeoFilter";
+   public static final String PROPERTY_SOURCE_COLLECTION = "SourceCollection";
+   public static final String PROPERTY_LAST_CREATION_DATE = "LastCreationDate";
+   public static final String PROPERTY_REQUEST = "Request";
+   public static final String PROPERTY_SKIP_ON_ERROR = "SkipOnError";
+   public static final String PROPERTY_FILTER_GEO = "GeoFilter";
+   public static final String PROPERTY_REMOTE_INCOMING = "RemoteIncoming";
+   public static final String PROPERTY_RETRIES_SKIPPED_PRODUCTS = "RetriesForSkippedProducts";
+   public static final String PROPERTY_TIMEOUT_SKIPPED_PRODUCTS = "TimeoutSkippedProducts";
+   
+   @Override
+   public CsdlEntityType getEntityType()
+   {
+      CsdlProperty syncOffline = new CsdlProperty()
+            .setName(PROPERTY_SYNC_OFFLINE)
+            .setType(EdmPrimitiveTypeKind.Boolean.getFullQualifiedName())
+            .setDefaultValue(Boolean.FALSE.toString());
+      
+      CsdlProperty skipOnError = new CsdlProperty()
+            .setName(PROPERTY_SKIP_ON_ERROR)
+            .setType(EdmPrimitiveTypeKind.Boolean.getFullQualifiedName())
+            .setDefaultValue(Boolean.TRUE.toString());
+      
+      CsdlProperty copyProduct = new CsdlProperty()
+            .setName(PROPERTY_COPY_PRODUCT)
+            .setType(EdmPrimitiveTypeKind.Boolean.getFullQualifiedName())
+            .setDefaultValue(Boolean.FALSE.toString());
+      
+      CsdlProperty remoteIncoming = new CsdlProperty()
+            .setName(PROPERTY_REMOTE_INCOMING)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName());
+      
+      CsdlProperty filterParam = new CsdlProperty()
+            .setName(PROPERTY_FILTER_PARAM)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName());
+      
+      CsdlProperty filterGeo = new CsdlProperty()
+            .setName(PROPERTY_FILTER_GEO)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName());
+      
+      CsdlProperty sourceCollection = new CsdlProperty()
+            .setName(PROPERTY_SOURCE_COLLECTION)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName());
+      
+      CsdlProperty retriesSkippedProducts = new CsdlProperty()
+            .setName(PROPERTY_RETRIES_SKIPPED_PRODUCTS)
+            .setType(EdmPrimitiveTypeKind.Int64.getFullQualifiedName())
+            .setDefaultValue("3");
+      
+      CsdlProperty timeoutSkippedProducts = new CsdlProperty()
+            .setName(PROPERTY_TIMEOUT_SKIPPED_PRODUCTS)
+            .setType(EdmPrimitiveTypeKind.Int64.getFullQualifiedName())
+            .setDefaultValue("60000");
+      
+      CsdlProperty lastCreationDate = new CsdlProperty()
+            .setName(PROPERTY_LAST_CREATION_DATE)
+            .setType(EdmPrimitiveTypeKind.DateTimeOffset.getFullQualifiedName())
+            .setPrecision(3);
+      
+      
+      return new CsdlEntityType()
+            .setName(ENTITY_TYPE_NAME)
+            .setBaseType(SynchronizerModel.ABSTRACT_FULL_QUALIFIED_NAME)
+            .setProperties(Arrays.asList(syncOffline, skipOnError, copyProduct,
+                  remoteIncoming, filterGeo, filterParam, sourceCollection,
+                  lastCreationDate, retriesSkippedProducts, timeoutSkippedProducts));
+   }
+   
+   @Override
+   public String getName()
+   {
+      return ENTITY_TYPE_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return FULL_QUALIFIED_NAME;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/SearchModel.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/SearchModel.java
new file mode 100644
index 000000000..997ea4c42
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/SearchModel.java
@@ -0,0 +1,101 @@
+package org.dhus.olingo.v2.datamodel;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlEntitySet;
+import org.apache.olingo.commons.api.edm.provider.CsdlEntityType;
+import org.apache.olingo.commons.api.edm.provider.CsdlNavigationPropertyBinding;
+import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
+import org.apache.olingo.commons.api.edm.provider.CsdlPropertyRef;
+import org.dhus.olingo.v2.datamodel.complex.AdvancedPropertyComplexType;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+import fr.gael.odata.engine.model.EntityModel;
+
+public class SearchModel implements EntityModel
+{
+   public static final String ENTITY_TYPE_NAME = "Search";
+   public static final String ENTITY_SET_NAME = "Searches";
+   public static final FullQualifiedName FULL_QUALIFIED_NAME =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ENTITY_TYPE_NAME);
+   
+   public static final String PROPERTY_ID = "Id";
+   public static final String PROPERTY_VALUE = "Value";
+   public static final String PROPERTY_FOOTPRINT = "Footprint";
+   public static final String PROPERTY_ADVANCED = "Advanced";
+   public static final String PROPERTY_COMPLETE = "Complete";
+   public static final String PROPERTY_NOTIFY = "Notify";
+   
+
+   @Override
+   public CsdlEntityType getEntityType()
+   {
+      CsdlPropertyRef key = new CsdlPropertyRef().setName(PROPERTY_ID);
+      ArrayList<CsdlProperty> properties = new ArrayList<>();
+      
+      properties.add(new CsdlProperty()
+            .setName(PROPERTY_ID)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false));
+      
+      properties.add(
+            new CsdlProperty()
+            .setName(PROPERTY_VALUE)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false));
+      
+      properties.add(
+            new CsdlProperty()
+            .setName(PROPERTY_FOOTPRINT)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName()));
+      
+      properties.add(
+            new CsdlProperty()
+            .setName(PROPERTY_COMPLETE)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName()));
+      
+      properties.add(
+            new CsdlProperty()
+            .setName(PROPERTY_NOTIFY)
+            .setType(EdmPrimitiveTypeKind.Boolean.getFullQualifiedName()));
+      
+      properties.add(new CsdlProperty()
+            .setName(PROPERTY_ADVANCED)
+            .setType(AdvancedPropertyComplexType.FULL_QUALIFIED_NAME)
+            .setCollection(true));
+      
+      return new CsdlEntityType().setName(ENTITY_TYPE_NAME)
+            .setProperties(properties)
+            .setKey(Collections.singletonList(key));
+   }
+   
+   @Override
+   public CsdlEntitySet getEntitySet()
+   {
+      CsdlEntitySet entitySet = EntityModel.super.getEntitySet();
+      return entitySet.setIncludeInServiceDocument(true);
+   }
+
+   @Override
+   public String getEntitySetName()
+   {
+      return ENTITY_SET_NAME;
+   }
+
+   @Override
+   public String getName()
+   {
+      return ENTITY_TYPE_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return FULL_QUALIFIED_NAME;
+   }
+
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/SynchronizerModel.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/SynchronizerModel.java
index 709309f61..e42675463 100644
--- a/core/src/main/java/org/dhus/olingo/v2/datamodel/SynchronizerModel.java
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/SynchronizerModel.java
@@ -26,7 +26,10 @@ import java.util.Collections;
 
 import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
 import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlEntitySet;
 import org.apache.olingo.commons.api.edm.provider.CsdlEntityType;
+import org.apache.olingo.commons.api.edm.provider.CsdlNavigationProperty;
+import org.apache.olingo.commons.api.edm.provider.CsdlNavigationPropertyBinding;
 import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
 import org.apache.olingo.commons.api.edm.provider.CsdlPropertyRef;
 
@@ -45,6 +48,11 @@ public class SynchronizerModel implements EntityModel
    public static final String PROPERTY_UPDATED_DATE = "ModificationDate";
    public static final String PROPERTY_LABEL = "Label";
    public static final String PROPERTY_CRON = "Cron";
+   public static final String PROPERTY_SERVICE_URL = "ServiceUrl";
+   public static final String PROPERTY_SERVICE_LOGIN = "ServiceLogin";
+   public static final String PROPERTY_SERVICE_PASSWD = "ServicePassword";
+   public static final String PROPERTY_PAGE_SIZE = "PageSize";
+   public static final String NAVIGATION_TARGET_COLLECTION = "TargetCollection";
 
    @Override
    public CsdlEntityType getEntityType()
@@ -76,11 +84,36 @@ public class SynchronizerModel implements EntityModel
             .setName(PROPERTY_CRON)
             .setType(CronComplexType.FULL_QUALIFIED_NAME)
             .setNullable(false);
+      
+      CsdlProperty serviceUrl = new CsdlProperty()
+            .setName(PROPERTY_SERVICE_URL)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName());
+      
+      CsdlProperty serviceLogin = new CsdlProperty()
+            .setName(PROPERTY_SERVICE_LOGIN)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName());
+      
+      CsdlProperty servicePasswd = new CsdlProperty()
+            .setName(PROPERTY_SERVICE_PASSWD)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName());
+      
+      CsdlProperty pageSize = new CsdlProperty()
+            .setName(PROPERTY_PAGE_SIZE)
+            .setType(EdmPrimitiveTypeKind.Int64.getFullQualifiedName())
+            .setNullable(false)
+            .setDefaultValue("2");
+      
+      CsdlNavigationProperty collectionsNav = new CsdlNavigationProperty()
+            .setName(NAVIGATION_TARGET_COLLECTION)
+            .setType(CollectionModel.FULL_QUALIFIED_NAME)
+            .setCollection(true);
 
       return new CsdlEntityType()
             .setName(ABSTRACT_ENTITY_TYPE_NAME)
             .setKey(Collections.singletonList(propertyRef))
-            .setProperties(Arrays.asList(id, created, updated, label, cron))
+            .setProperties(Arrays.asList(id, created, updated, label, cron, serviceUrl, serviceLogin, 
+                  servicePasswd, pageSize))
+            .setNavigationProperties(Arrays.asList(collectionsNav))
             .setAbstract(true);
    }
 
@@ -101,4 +134,15 @@ public class SynchronizerModel implements EntityModel
    {
       return ABSTRACT_FULL_QUALIFIED_NAME;
    }
+   
+   @Override
+   public CsdlEntitySet getEntitySet()
+   {
+      CsdlEntitySet entitySet = EntityModel.super.getEntitySet();
+      CsdlNavigationPropertyBinding collectionNavPropBinding = new CsdlNavigationPropertyBinding();
+      collectionNavPropBinding.setTarget(CollectionModel.ENTITY_SET_NAME);
+      collectionNavPropBinding.setPath(NAVIGATION_TARGET_COLLECTION);
+      
+      return entitySet.setNavigationPropertyBindings(Arrays.asList(collectionNavPropBinding));
+   }
 }
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/UserModel.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/UserModel.java
new file mode 100644
index 000000000..81d9471d4
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/UserModel.java
@@ -0,0 +1,220 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.datamodel;
+
+import fr.gael.odata.engine.model.EntityModel;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlEntitySet;
+import org.apache.olingo.commons.api.edm.provider.CsdlEntityType;
+import org.apache.olingo.commons.api.edm.provider.CsdlNavigationProperty;
+import org.apache.olingo.commons.api.edm.provider.CsdlNavigationPropertyBinding;
+import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
+import org.apache.olingo.commons.api.edm.provider.CsdlPropertyRef;
+import org.dhus.olingo.v2.datamodel.complex.RestrictionComplexType;
+
+import org.dhus.olingo.v2.datamodel.enumeration.SystemRoleEnum;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+public class UserModel implements EntityModel
+{
+   public static final String ENTITY_TYPE_NAME = "User";
+   public static final String ENTITY_SET_NAME = "Users";
+   public static final FullQualifiedName FULL_QUALIFIED_NAME =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ENTITY_TYPE_NAME);
+
+   public static final String PROPERTY_USERNAME = "Username";
+   public static final String PROPERTY_EMAIL = "Email";
+   public static final String PROPERTY_FIRSTNAME = "FirstName";
+   public static final String PROPERTY_LASTNAME = "LastName";
+   public static final String PROPERTY_COUNTRY = "Country";
+   public static final String PROPERTY_PHONE = "Phone";
+   public static final String PROPERTY_ADDRESS = "Address";
+   public static final String PROPERTY_DOMAIN = "Domain";
+   public static final String PROPERTY_SUBDOMAIN = "SubDomain";
+   public static final String PROPERTY_USAGE = "Usage";
+   public static final String PROPERTY_SUBUSAGE = "SubUsage";
+   public static final String PROPERTY_HASH = "Hash";
+   public static final String PROPERTY_PASSWORD = "Password";
+   public static final String PROPERTY_CREATED = "Created";
+   public static final String PROPERTY_ROLES = "SystemRoles";
+   public static final String PROPERTY_RESTRICTIONS = "Restrictions";
+   public static final String NAVIGATION_CART = "Cart";
+   public static final String NAVIGATION_SEARCHES = "Searches";
+
+   @Override
+   public CsdlEntityType getEntityType()
+   {
+      List<CsdlProperty> properties = new ArrayList<>();
+
+      CsdlPropertyRef nameKey = new CsdlPropertyRef().setName(PROPERTY_USERNAME);
+
+      CsdlProperty username = new CsdlProperty()
+            .setName(PROPERTY_USERNAME)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false);
+      properties.add(username);
+
+      CsdlProperty email = new CsdlProperty()
+            .setName(PROPERTY_EMAIL)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(email);
+
+      CsdlProperty firstName = new CsdlProperty()
+            .setName(PROPERTY_FIRSTNAME)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(firstName);
+
+      CsdlProperty lastName = new CsdlProperty()
+            .setName(PROPERTY_LASTNAME)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(lastName);
+
+      CsdlProperty country = new CsdlProperty()
+            .setName(PROPERTY_COUNTRY)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(country);
+
+      CsdlProperty phone = new CsdlProperty()
+            .setName(PROPERTY_PHONE)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(phone);
+
+      CsdlProperty adresse = new CsdlProperty()
+            .setName(PROPERTY_ADDRESS)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(adresse);
+
+      CsdlProperty domain = new CsdlProperty()
+            .setName(PROPERTY_DOMAIN)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(domain);
+
+      CsdlProperty subDomain = new CsdlProperty()
+            .setName(PROPERTY_SUBDOMAIN)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(subDomain);
+
+      CsdlProperty usage = new CsdlProperty()
+            .setName(PROPERTY_USAGE)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(usage);
+
+      CsdlProperty subUsage = new CsdlProperty()
+            .setName(PROPERTY_SUBUSAGE)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(subUsage);
+
+      CsdlProperty hash = new CsdlProperty()
+            .setName(PROPERTY_HASH)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(hash);
+
+      CsdlProperty password = new CsdlProperty()
+            .setName(PROPERTY_PASSWORD)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(password);
+
+      CsdlProperty created = new CsdlProperty()
+            .setName(PROPERTY_CREATED)
+            .setType(EdmPrimitiveTypeKind.DateTimeOffset.getFullQualifiedName())
+            .setNullable(true);
+      properties.add(created);
+
+      CsdlProperty roles = new CsdlProperty()
+            .setName(PROPERTY_ROLES)
+            .setType(SystemRoleEnum.FULL_QUALIFIED_NAME)
+            .setNullable(true)
+            .setCollection(true);
+      properties.add(roles);
+
+      CsdlProperty restrictions = new CsdlProperty()
+            .setName(PROPERTY_RESTRICTIONS)
+            .setType(RestrictionComplexType.FULL_QUALIFIED_NAME)
+            .setNullable(true)
+            .setCollection(true);
+      properties.add(restrictions);
+      
+      // Define navigation properties
+      CsdlNavigationProperty cartNavigationProperty = new CsdlNavigationProperty()
+            .setName(NAVIGATION_CART)
+            .setType(ProductModel.FULL_QUALIFIED_NAME)
+            .setCollection(true);
+      
+      CsdlNavigationProperty searchesNavigationProperty = new CsdlNavigationProperty()
+            .setName(NAVIGATION_SEARCHES)
+            .setType(SearchModel.FULL_QUALIFIED_NAME)
+            .setCollection(true);
+
+      return new CsdlEntityType().setName(ENTITY_TYPE_NAME)
+            .setProperties(properties)
+            .setKey(Collections.singletonList(nameKey))
+            .setNavigationProperties(Arrays.asList(cartNavigationProperty, searchesNavigationProperty));
+   }
+
+   @Override
+   public CsdlEntitySet getEntitySet()
+   {
+      CsdlNavigationPropertyBinding cart = new CsdlNavigationPropertyBinding()
+            .setPath(NAVIGATION_CART)
+            .setTarget(ProductModel.ENTITY_SET_NAME);
+      CsdlNavigationPropertyBinding search = new CsdlNavigationPropertyBinding()
+            .setPath(NAVIGATION_SEARCHES)
+            .setTarget(SearchModel.ENTITY_SET_NAME);
+
+      return EntityModel.super.getEntitySet().setNavigationPropertyBindings(Arrays.asList(cart, search));
+   }
+
+   @Override
+   public String getEntitySetName()
+   {
+      return ENTITY_SET_NAME;
+   }
+
+   @Override
+   public String getName()
+   {
+      return ENTITY_TYPE_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return FULL_QUALIFIED_NAME;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/action/AddSearchAction.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/AddSearchAction.java
new file mode 100644
index 000000000..38e0c84f6
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/AddSearchAction.java
@@ -0,0 +1,59 @@
+package org.dhus.olingo.v2.datamodel.action;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.data.ValueType;
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlAction;
+import org.apache.olingo.commons.api.edm.provider.CsdlParameter;
+import org.apache.olingo.commons.api.edm.provider.CsdlReturnType;
+import org.dhus.olingo.v2.datamodel.SearchModel;
+import org.dhus.olingo.v2.datamodel.UserModel;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+import fr.gael.odata.engine.model.ActionModel;
+
+public class AddSearchAction implements ActionModel
+{
+
+   public static final String ACTION_ADD_SEARCH_NAME = "AddSearch";
+   public static final FullQualifiedName ACTION_ADD_SEARCH_FNQ =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ACTION_ADD_SEARCH_NAME);
+   
+   public static final String PARAM_SEARCH = "Search";
+   public static final String PARAM_USER = "User";
+   
+   @Override
+   public String getName()
+   {
+      return ACTION_ADD_SEARCH_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return ACTION_ADD_SEARCH_FNQ;
+   }
+
+   @Override
+   public CsdlAction getAction()
+   {
+      CsdlParameter searchParameter = new CsdlParameter()
+            .setName(PARAM_SEARCH)
+            .setNullable(false)
+            .setType(SearchModel.FULL_QUALIFIED_NAME);
+      
+      CsdlParameter userParameter = new CsdlParameter()
+            .setName(PARAM_USER)
+            .setNullable(false)
+            .setType(UserModel.FULL_QUALIFIED_NAME);
+      
+      return new CsdlAction()
+            .setName(ACTION_ADD_SEARCH_NAME)
+            .setBound(true)
+            .setParameters(Arrays.asList(userParameter, searchParameter))
+            .setReturnType(new CsdlReturnType().setType(EdmPrimitiveTypeKind.String.getFullQualifiedName()));
+   }
+
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/action/ClearSearchesAction.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/ClearSearchesAction.java
new file mode 100644
index 000000000..9fc7342ff
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/ClearSearchesAction.java
@@ -0,0 +1,55 @@
+package org.dhus.olingo.v2.datamodel.action;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.data.ValueType;
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlAction;
+import org.apache.olingo.commons.api.edm.provider.CsdlParameter;
+import org.apache.olingo.commons.api.edm.provider.CsdlReturnType;
+import org.dhus.olingo.v2.datamodel.SearchModel;
+import org.dhus.olingo.v2.datamodel.UserModel;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+import fr.gael.odata.engine.model.ActionModel;
+
+public class ClearSearchesAction implements ActionModel
+{
+
+   public static final String ACTION_CLEAR_SEARCHES_NAME = "ClearSearches";
+   public static final FullQualifiedName ACTION_CLEAR_SEARCHES_FNQ =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ACTION_CLEAR_SEARCHES_NAME);
+   
+   public static final String PARAM_USER = "User";
+   
+   @Override
+   public String getName()
+   {
+      return ACTION_CLEAR_SEARCHES_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return ACTION_CLEAR_SEARCHES_FNQ;
+   }
+
+   
+
+   @Override
+   public CsdlAction getAction()
+   {
+      CsdlParameter userParameter = new CsdlParameter()
+            .setName(PARAM_USER)
+            .setNullable(false)
+            .setType(UserModel.FULL_QUALIFIED_NAME);
+      
+      return new CsdlAction()
+            .setName(ACTION_CLEAR_SEARCHES_NAME)
+            .setBound(true)
+            .setParameters(Arrays.asList(userParameter))
+            .setReturnType(new CsdlReturnType().setType(EdmPrimitiveTypeKind.String.getFullQualifiedName()));
+   }
+
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/action/DeleteDeletedProductsAction.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/DeleteDeletedProductsAction.java
new file mode 100644
index 000000000..897c2cab3
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/DeleteDeletedProductsAction.java
@@ -0,0 +1,82 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+
+
+
+package org.dhus.olingo.v2.datamodel.action;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlAction;
+import org.apache.olingo.commons.api.edm.provider.CsdlParameter;
+import org.apache.olingo.commons.api.edm.provider.CsdlReturnType;
+import org.dhus.olingo.v2.datamodel.DeletedProductModel;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+import fr.gael.odata.engine.model.ActionModel;
+
+public class DeleteDeletedProductsAction implements ActionModel
+{
+   public static final String ACTION_DELETE_PRODUCTS = "DeleteProducts";
+   public static final FullQualifiedName ACTION_DELETE_PRODUCTS_FQN =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ACTION_DELETE_PRODUCTS);
+
+   public static final String PARAMETER_PRODUCTS = "DeletedProducts";
+   public static final String PARAMETER_PRODUCT_LIST= "ProductList";
+
+   @Override
+   public CsdlAction getAction()
+   {
+      CsdlParameter productParameter = new CsdlParameter()
+            .setName(PARAMETER_PRODUCTS)
+            .setType(DeletedProductModel.FULL_QUALIFIED_NAME)
+            .setCollection(true)
+            .setNullable(false);
+
+      CsdlParameter uuidParameter = new CsdlParameter()
+            .setName(PARAMETER_PRODUCT_LIST)
+            .setType(DeletedProductModel.FULL_QUALIFIED_NAME)
+            .setCollection(true)
+            .setNullable(false);
+
+      CsdlAction deleteProducts = new CsdlAction()
+            .setName(ACTION_DELETE_PRODUCTS)
+            .setBound(true)
+            .setParameters(Arrays.asList(productParameter, uuidParameter))
+            .setReturnType(new CsdlReturnType().setType(EdmPrimitiveTypeKind.String.getFullQualifiedName()).setCollection(true));
+
+      return deleteProducts;
+   }
+
+   @Override
+   public String getName()
+   {
+      return ACTION_DELETE_PRODUCTS;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return ACTION_DELETE_PRODUCTS_FQN;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/action/DeleteProductsAction.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/DeleteProductsAction.java
new file mode 100644
index 000000000..46ef4f9c0
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/DeleteProductsAction.java
@@ -0,0 +1,82 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+
+
+
+package org.dhus.olingo.v2.datamodel.action;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlAction;
+import org.apache.olingo.commons.api.edm.provider.CsdlParameter;
+import org.apache.olingo.commons.api.edm.provider.CsdlReturnType;
+import org.dhus.olingo.v2.datamodel.ProductModel;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+import fr.gael.odata.engine.model.ActionModel;
+
+public class DeleteProductsAction implements ActionModel
+{
+   public static final String ACTION_DELETE_PRODUCTS = "DeleteProducts";
+   public static final FullQualifiedName ACTION_DELETE_PRODUCTS_FQN =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ACTION_DELETE_PRODUCTS);
+
+   public static final String PARAMETER_PRODUCTS = "Products";
+   public static final String PARAMETER_PRODUCT_LIST= "ProductList";
+
+   @Override
+   public CsdlAction getAction()
+   {
+      CsdlParameter productParameter = new CsdlParameter()
+            .setName(PARAMETER_PRODUCTS)
+            .setType(ProductModel.FULL_QUALIFIED_NAME)
+            .setCollection(true)
+            .setNullable(false);
+
+      CsdlParameter uuidParameter = new CsdlParameter()
+            .setName(PARAMETER_PRODUCT_LIST)
+            .setType(ProductModel.FULL_QUALIFIED_NAME)
+            .setCollection(true)
+            .setNullable(false);
+
+      CsdlAction deleteProducts = new CsdlAction()
+            .setName(ACTION_DELETE_PRODUCTS)
+            .setBound(true)
+            .setParameters(Arrays.asList(productParameter, uuidParameter))
+            .setReturnType(new CsdlReturnType().setType(EdmPrimitiveTypeKind.String.getFullQualifiedName()).setCollection(true));
+
+      return deleteProducts;
+   }
+
+   @Override
+   public String getName()
+   {
+      return ACTION_DELETE_PRODUCTS;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return ACTION_DELETE_PRODUCTS_FQN;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/action/DeleteSearchAction.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/DeleteSearchAction.java
new file mode 100644
index 000000000..b22a243dc
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/DeleteSearchAction.java
@@ -0,0 +1,59 @@
+package org.dhus.olingo.v2.datamodel.action;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.data.ValueType;
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlAction;
+import org.apache.olingo.commons.api.edm.provider.CsdlParameter;
+import org.apache.olingo.commons.api.edm.provider.CsdlReturnType;
+import org.dhus.olingo.v2.datamodel.SearchModel;
+import org.dhus.olingo.v2.datamodel.UserModel;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+import fr.gael.odata.engine.model.ActionModel;
+
+public class DeleteSearchAction implements ActionModel
+{
+
+   public static final String ACTION_DELETE_SEARCH_NAME = "DeleteSearch";
+   public static final FullQualifiedName ACTION_DELETE_SEARCH_FNQ =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ACTION_DELETE_SEARCH_NAME);
+   
+   public static final String PARAM_SEARCH = "Search";
+   public static final String PARAM_USER = "User";
+   
+   @Override
+   public String getName()
+   {
+      return ACTION_DELETE_SEARCH_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return ACTION_DELETE_SEARCH_FNQ;
+   }
+
+   @Override
+   public CsdlAction getAction()
+   {
+      CsdlParameter searchParameter = new CsdlParameter()
+            .setName(PARAM_SEARCH)
+            .setNullable(false)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName());
+      
+      CsdlParameter userParameter = new CsdlParameter()
+            .setName(PARAM_USER)
+            .setNullable(false)
+            .setType(UserModel.FULL_QUALIFIED_NAME);
+      
+      return new CsdlAction()
+            .setName(ACTION_DELETE_SEARCH_NAME)
+            .setBound(true)
+            .setParameters(Arrays.asList(userParameter, searchParameter))
+            .setReturnType(new CsdlReturnType().setType(EdmPrimitiveTypeKind.String.getFullQualifiedName()));
+   }
+
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/action/EnableSearchAction.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/EnableSearchAction.java
new file mode 100644
index 000000000..68846fc8c
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/EnableSearchAction.java
@@ -0,0 +1,59 @@
+package org.dhus.olingo.v2.datamodel.action;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.data.ValueType;
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlAction;
+import org.apache.olingo.commons.api.edm.provider.CsdlParameter;
+import org.apache.olingo.commons.api.edm.provider.CsdlReturnType;
+import org.dhus.olingo.v2.datamodel.SearchModel;
+import org.dhus.olingo.v2.datamodel.UserModel;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+import fr.gael.odata.engine.model.ActionModel;
+
+public class EnableSearchAction implements ActionModel
+{
+
+   public static final String ACTION_ENABLE_SEARCH_NAME = "EnableSearch";
+   public static final FullQualifiedName ACTION_ENABLE_SEARCH_FNQ =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ACTION_ENABLE_SEARCH_NAME);
+   
+   public static final String PARAM_SEARCH = "Search";
+   public static final String PARAM_USER = "User";
+   
+   @Override
+   public String getName()
+   {
+      return ACTION_ENABLE_SEARCH_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return ACTION_ENABLE_SEARCH_FNQ;
+   }
+
+   @Override
+   public CsdlAction getAction()
+   {
+      CsdlParameter searchParameter = new CsdlParameter()
+            .setName(PARAM_SEARCH)
+            .setNullable(false)
+            .setType(SearchModel.FULL_QUALIFIED_NAME);
+      
+      CsdlParameter userParameter = new CsdlParameter()
+            .setName(PARAM_USER)
+            .setNullable(false)
+            .setType(UserModel.FULL_QUALIFIED_NAME);
+      
+      return new CsdlAction()
+            .setName(ACTION_ENABLE_SEARCH_NAME)
+            .setBound(true)
+            .setParameters(Arrays.asList(userParameter, searchParameter))
+            .setReturnType(new CsdlReturnType().setType(EdmPrimitiveTypeKind.String.getFullQualifiedName()));
+   }
+
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/action/LockUserAction.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/LockUserAction.java
new file mode 100644
index 000000000..7d060253f
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/LockUserAction.java
@@ -0,0 +1,75 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.datamodel.action;
+
+import fr.gael.odata.engine.model.ActionModel;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlAction;
+import org.apache.olingo.commons.api.edm.provider.CsdlParameter;
+import org.apache.olingo.commons.api.edm.provider.CsdlReturnType;
+
+import org.dhus.olingo.v2.datamodel.UserModel;
+import org.dhus.olingo.v2.datamodel.complex.RestrictionComplexType;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+public class LockUserAction implements ActionModel
+{
+   public static final String ACTION_LOCK_USER = "Lock";
+   public static final FullQualifiedName ACTION_LOCK_USER_FQN =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ACTION_LOCK_USER);
+
+   public static final String PARAMETER_USER = "User";
+   public static final String PARAMETER_REASON = "Reason";
+
+   @Override
+   public CsdlAction getAction()
+   {
+      CsdlParameter user = new CsdlParameter()
+            .setName(PARAMETER_USER)
+            .setType(UserModel.FULL_QUALIFIED_NAME)
+            .setNullable(false);
+
+      CsdlParameter reason = new CsdlParameter()
+            .setName(PARAMETER_REASON)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+
+      return new CsdlAction().setName(ACTION_LOCK_USER)
+            .setBound(true)
+            .setParameters(Arrays.asList(user, reason))
+            .setReturnType(new CsdlReturnType().setType(RestrictionComplexType.FULL_QUALIFIED_NAME));
+   }
+
+   @Override
+   public String getName()
+   {
+      return ACTION_LOCK_USER;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return ACTION_LOCK_USER_FQN;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/action/UnlockUserAction.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/UnlockUserAction.java
new file mode 100644
index 000000000..ceaca3e6e
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/action/UnlockUserAction.java
@@ -0,0 +1,74 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.datamodel.action;
+
+import fr.gael.odata.engine.model.ActionModel;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlAction;
+import org.apache.olingo.commons.api.edm.provider.CsdlParameter;
+import org.apache.olingo.commons.api.edm.provider.CsdlReturnType;
+
+import org.dhus.olingo.v2.datamodel.UserModel;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+public class UnlockUserAction implements ActionModel
+{
+   public static final String ACTION_UNLOCK_USER = "Unlock";
+   public static final FullQualifiedName ACTION_UNLOCK_USER_FQN =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ACTION_UNLOCK_USER);
+
+   public static final String PARAMETER_USER = "User";
+   public static final String PARAMETER_ID = "Id";
+
+   @Override
+   public CsdlAction getAction()
+   {
+      CsdlParameter user = new CsdlParameter()
+            .setName(PARAMETER_USER)
+            .setType(UserModel.FULL_QUALIFIED_NAME)
+            .setNullable(false);
+
+      CsdlParameter id = new CsdlParameter()
+            .setName(PARAMETER_ID)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false);
+
+      return new CsdlAction().setName(ACTION_UNLOCK_USER)
+            .setBound(true)
+            .setParameters(Arrays.asList(user, id))
+            .setReturnType(new CsdlReturnType().setType(EdmPrimitiveTypeKind.String.getFullQualifiedName()));
+   }
+
+   @Override
+   public String getName()
+   {
+      return ACTION_UNLOCK_USER;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return ACTION_UNLOCK_USER_FQN;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/complex/AdvancedPropertyComplexType.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/complex/AdvancedPropertyComplexType.java
new file mode 100644
index 000000000..2066a550c
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/complex/AdvancedPropertyComplexType.java
@@ -0,0 +1,56 @@
+package org.dhus.olingo.v2.datamodel.complex;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlComplexType;
+import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+import fr.gael.odata.engine.model.ComplexModel;
+
+public class AdvancedPropertyComplexType implements ComplexModel
+{
+   public static final String COMPLEX_TYPE_NAME = "Advanced";
+   public static final String COMPLEX_SET_NAME = "Advanceds";
+   public static final FullQualifiedName FULL_QUALIFIED_NAME =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, COMPLEX_TYPE_NAME);
+   public static final String PROPERTY_NAME = "Name";
+   public static final String PROPERTY_VALUE = "Value";
+
+   @Override
+   public String getName()
+   {
+      return COMPLEX_TYPE_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return FULL_QUALIFIED_NAME;
+   }
+
+   @Override
+   public CsdlComplexType getComplexType()
+   {
+      CsdlProperty name = new CsdlProperty()
+            .setName(PROPERTY_NAME)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setPrecision(6)
+            .setNullable(false);
+
+      CsdlProperty value = new CsdlProperty()
+            .setName(PROPERTY_VALUE)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setPrecision(6)
+            .setNullable(false);
+
+      CsdlComplexType advancedProperty = new CsdlComplexType()
+            .setName(COMPLEX_TYPE_NAME)
+            .setProperties(Arrays.asList(name, value));
+
+      return advancedProperty;
+   }
+
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/complex/ObjectStorageComplexType.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/complex/ObjectStorageComplexType.java
new file mode 100644
index 000000000..6df316975
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/complex/ObjectStorageComplexType.java
@@ -0,0 +1,98 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+
+
+
+package org.dhus.olingo.v2.datamodel.complex;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlComplexType;
+import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+import fr.gael.odata.engine.model.ComplexModel;
+
+public class ObjectStorageComplexType implements ComplexModel
+{
+   public static final String COMPLEX_TYPE_NAME = "ObjectStorageCredentials";
+   public static final FullQualifiedName FULL_QUALIFIED_NAME =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, COMPLEX_TYPE_NAME);
+
+   public static final String PROPERTY_PROVIDER = "Provider";
+   public static final String PROPERTY_IDENTITY = "Identity";
+   public static final String PROPERTY_CREDENTIAL = "Credential";
+   public static final String PROPERTY_URL = "Url";
+   public static final String PROPERTY_REGION = "Region";
+
+   @Override
+   public CsdlComplexType getComplexType()
+   {
+      CsdlProperty provider = new CsdlProperty()
+            .setName(PROPERTY_PROVIDER)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false);
+
+      CsdlProperty identity = new CsdlProperty()
+            .setName(PROPERTY_IDENTITY)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false);
+
+      CsdlProperty credential = new CsdlProperty()
+            .setName(PROPERTY_CREDENTIAL)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false);
+
+      CsdlProperty url = new CsdlProperty()
+            .setName(PROPERTY_URL)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false);
+
+      CsdlProperty region = new CsdlProperty()
+            .setName(PROPERTY_REGION)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false);
+
+      return new CsdlComplexType()
+            .setName(COMPLEX_TYPE_NAME)
+            .setProperties(Arrays.asList(
+                  provider,
+                  identity,
+                  credential,
+                  url,
+                  region));
+   }
+
+   @Override
+   public String getName()
+   {
+      return COMPLEX_TYPE_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return FULL_QUALIFIED_NAME;
+   }
+   
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/complex/OndaScannerComplexType.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/complex/OndaScannerComplexType.java
new file mode 100644
index 000000000..46539b73d
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/complex/OndaScannerComplexType.java
@@ -0,0 +1,98 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+
+
+
+package org.dhus.olingo.v2.datamodel.complex;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlComplexType;
+import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+import fr.gael.odata.engine.model.ComplexModel;
+
+public class OndaScannerComplexType implements ComplexModel
+{
+   public static final String COMPLEX_TYPE_NAME = "OndaScanner";
+   public static final FullQualifiedName FULL_QUALIFIED_NAME =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, COMPLEX_TYPE_NAME);
+
+   public static final String PROPERTY_OPENSEARCH_URL = "OpensearchUrl";
+   public static final String PROPERTY_LAST_CREATION_DATE = "LastCreationDate";
+   public static final String PROPERTY_PAGE_SIZE = "PageSize";
+   public static final String PROPERTY_FILTER = "Filter";
+   public static final String PROPERTY_CRON = "Cron";
+
+   
+   @Override
+   public CsdlComplexType getComplexType()
+   {
+      CsdlProperty opensearchUrl = new CsdlProperty()
+            .setName(PROPERTY_OPENSEARCH_URL)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false);
+      
+      CsdlProperty lastCreationDate = new CsdlProperty()
+            .setName(PROPERTY_LAST_CREATION_DATE)
+            .setType(EdmPrimitiveTypeKind.DateTimeOffset.getFullQualifiedName())
+            .setNullable(true);
+
+      CsdlProperty pageSize = new CsdlProperty()
+            .setName(PROPERTY_PAGE_SIZE)
+            .setType(EdmPrimitiveTypeKind.Int32.getFullQualifiedName())
+            .setNullable(false);
+      
+      CsdlProperty ondaScannerFilter = new CsdlProperty()
+            .setName(PROPERTY_FILTER)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(true);
+      
+      CsdlProperty cron = new CsdlProperty()
+            .setName(PROPERTY_CRON)
+            .setType(CronComplexType.FULL_QUALIFIED_NAME)
+            .setNullable(false);
+
+      return new CsdlComplexType()
+            .setName(COMPLEX_TYPE_NAME)
+            .setProperties(Arrays.asList(opensearchUrl,
+                  lastCreationDate,
+                  pageSize,
+                  ondaScannerFilter,
+                  cron));
+      
+   }
+
+   @Override
+   public String getName()
+   {
+      return COMPLEX_TYPE_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return FULL_QUALIFIED_NAME;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/complex/RestrictionComplexType.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/complex/RestrictionComplexType.java
new file mode 100644
index 000000000..be4f83c53
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/complex/RestrictionComplexType.java
@@ -0,0 +1,73 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.datamodel.complex;
+
+import fr.gael.odata.engine.model.ComplexModel;
+
+import java.util.Arrays;
+
+import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlComplexType;
+import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
+
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+public class RestrictionComplexType implements ComplexModel
+{
+   public static final String COMPLEX_TYPE_NAME = "Restriction";
+
+   public static final FullQualifiedName FULL_QUALIFIED_NAME =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, COMPLEX_TYPE_NAME);
+
+   public static final String PROPERTY_ID     = "Id";
+   public static final String PROPERTY_TYPE   = "Type";
+   public static final String PROPERTY_REASON = "Reason";
+
+   @Override
+   public CsdlComplexType getComplexType()
+   {
+      CsdlProperty id = new CsdlProperty().setName(PROPERTY_ID)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false);
+
+      CsdlProperty type = new CsdlProperty().setName(PROPERTY_TYPE)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName())
+            .setNullable(false);
+
+      CsdlProperty reason = new CsdlProperty().setName(PROPERTY_REASON)
+            .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName());
+
+      return new CsdlComplexType().setName(COMPLEX_TYPE_NAME)
+            .setProperties(Arrays.asList(id, type, reason));
+   }
+
+   @Override
+   public String getName()
+   {
+      return COMPLEX_TYPE_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return FULL_QUALIFIED_NAME;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/datamodel/enumeration/SystemRoleEnum.java b/core/src/main/java/org/dhus/olingo/v2/datamodel/enumeration/SystemRoleEnum.java
new file mode 100644
index 000000000..0379b436c
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/datamodel/enumeration/SystemRoleEnum.java
@@ -0,0 +1,70 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.datamodel.enumeration;
+
+import fr.gael.dhus.database.object.Role;
+
+import fr.gael.odata.engine.model.EnumModel;
+
+import java.util.Arrays;
+import java.util.stream.Collectors;
+
+import org.apache.olingo.commons.api.edm.FullQualifiedName;
+import org.apache.olingo.commons.api.edm.provider.CsdlEnumMember;
+import org.apache.olingo.commons.api.edm.provider.CsdlEnumType;
+
+import org.dhus.olingo.v2.web.DHuSODataServlet;
+
+/**
+ * System roles. Automatically declares all roles defined in enum {@link Role}.
+ *
+ * Uses the declaration order in enum {@link Role}, starting at zero, use method {@link Role#ordinal()};
+ * To access the Role from the EnumValue, use {@link Role#values()}[enumvalue];
+ */
+public class SystemRoleEnum implements EnumModel
+{
+   public static final String ENUM_NAME = "SystemRole";
+   public static final FullQualifiedName FULL_QUALIFIED_NAME =
+         new FullQualifiedName(DHuSODataServlet.NAMESPACE, ENUM_NAME);
+
+   @Override
+   public CsdlEnumType getEnumType()
+   {
+      return new CsdlEnumType().setName(ENUM_NAME)
+            .setMembers(Arrays.<Role>stream(Role.values()).map(SystemRoleEnum::roleToEnumMember).collect(Collectors.toList()));
+   }
+
+   private static CsdlEnumMember roleToEnumMember(Role role)
+   {
+      return new CsdlEnumMember().setName(role.name());
+   }
+
+   @Override
+   public String getName()
+   {
+      return ENUM_NAME;
+   }
+
+   @Override
+   public FullQualifiedName getFQN()
+   {
+      return FULL_QUALIFIED_NAME;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/entity/AsyncDataStoreEntityProducer.java b/core/src/main/java/org/dhus/olingo/v2/entity/AsyncDataStoreEntityProducer.java
index 8366fa305..cdfed1546 100644
--- a/core/src/main/java/org/dhus/olingo/v2/entity/AsyncDataStoreEntityProducer.java
+++ b/core/src/main/java/org/dhus/olingo/v2/entity/AsyncDataStoreEntityProducer.java
@@ -46,11 +46,6 @@ public class AsyncDataStoreEntityProducer<I extends AsyncDataStoreConf> extends
       Entity dataStoreEntity = super.transform(asyncDataStore);
 
       dataStoreEntity
-            .addProperty(new Property(
-                  null,
-                  AsyncDataStoreModel.PROPERTY_HFS_LOCATION,
-                  ValueType.PRIMITIVE,
-                  asyncDataStore.getHfsLocation()))
             .addProperty(new Property(
                   null,
                   AsyncDataStoreModel.PROPERTY_IS_MASTER,
diff --git a/core/src/main/java/org/dhus/olingo/v2/entity/HttpAsyncDataStoreEntityProducer.java b/core/src/main/java/org/dhus/olingo/v2/entity/HttpAsyncDataStoreEntityProducer.java
new file mode 100644
index 000000000..4ca4e7ce5
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/entity/HttpAsyncDataStoreEntityProducer.java
@@ -0,0 +1,75 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.entity;
+
+import org.apache.olingo.commons.api.data.Entity;
+import org.apache.olingo.commons.api.data.Property;
+import org.apache.olingo.commons.api.data.ValueType;
+
+import org.dhus.api.olingo.v2.TypeInfo;
+import org.dhus.olingo.v2.datamodel.HttpAsyncDataStoreModel;
+import org.dhus.olingo.v2.datamodel.PdgsDataStoreModel;
+import org.dhus.store.datastore.config.HttpAsyncDataStoreConf;
+import org.dhus.store.datastore.config.NamedDataStoreConf;
+
+/**
+ * Entity producer for the http abstract type AsyncDataStore.
+ */
+@TypeInfo(type = HttpAsyncDataStoreConf.class, baseType = NamedDataStoreConf.class)
+public class HttpAsyncDataStoreEntityProducer<I extends HttpAsyncDataStoreConf> extends AsyncDataStoreEntityProducer<I>
+{
+   @Override
+   public Entity transform(I httpAsyncDataStore)
+   {
+      Entity dataStoreEntity = super.transform(httpAsyncDataStore);
+
+      dataStoreEntity.setType(PdgsDataStoreModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString());
+
+      dataStoreEntity
+            .addProperty(new Property(
+                  null,
+                  HttpAsyncDataStoreModel.PROPERTY_SERVICE_URL,
+                  ValueType.PRIMITIVE,
+                  httpAsyncDataStore.getServiceUrl()))
+            .addProperty(new Property(
+                  null,
+                  HttpAsyncDataStoreModel.PROPERTY_LOGIN,
+                  ValueType.PRIMITIVE,
+                  httpAsyncDataStore.getLogin()))
+            .addProperty(new Property(
+                  null,
+                  HttpAsyncDataStoreModel.PROPERTY_PASSWORD,
+                  ValueType.PRIMITIVE,
+                  "******"))
+            .addProperty(new Property(
+                  null,
+                  HttpAsyncDataStoreModel.PROPERTY_MAX_CONCURRENTS_DOWNLOADS,
+                  ValueType.PRIMITIVE,
+                  httpAsyncDataStore.getMaxConcurrentsDownloads()))
+            .addProperty(new Property(
+                  null,
+                  HttpAsyncDataStoreModel.PROPERTY_INTERVAL,
+                  ValueType.PRIMITIVE,
+                  httpAsyncDataStore.getInterval()));
+
+      return dataStoreEntity;
+   }
+
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/entity/LtaDataStoreEntityProducer.java b/core/src/main/java/org/dhus/olingo/v2/entity/LtaDataStoreEntityProducer.java
new file mode 100644
index 000000000..ea0a57bc1
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/entity/LtaDataStoreEntityProducer.java
@@ -0,0 +1,50 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.entity;
+
+import org.apache.olingo.commons.api.data.Entity;
+import org.apache.olingo.commons.api.data.Property;
+import org.apache.olingo.commons.api.data.ValueType;
+import org.dhus.api.olingo.v2.TypeInfo;
+import org.dhus.olingo.v2.datamodel.LtaDataStoreModel;
+import org.dhus.olingo.v2.datamodel.OndaDataStoreModel;
+import org.dhus.store.datastore.config.LtaDataStoreConf;
+import org.dhus.store.datastore.config.NamedDataStoreConf;
+
+@TypeInfo(type = LtaDataStoreConf.class, baseType = NamedDataStoreConf.class)
+public class LtaDataStoreEntityProducer extends HttpAsyncDataStoreEntityProducer<LtaDataStoreConf>
+{
+
+   @Override
+   public Entity transform(LtaDataStoreConf ltaDataStore)
+   {
+      Entity dataStoreEntity = super.transform(ltaDataStore);
+      dataStoreEntity.setType(LtaDataStoreModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString());
+
+      dataStoreEntity
+      .addProperty(new Property(
+            null,
+            OndaDataStoreModel.PROPERTY_ORDER,
+            ValueType.PRIMITIVE,
+            ltaDataStore.isOrder()));
+      
+      return dataStoreEntity;
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/entity/OndaDataStoreEntityProducer.java b/core/src/main/java/org/dhus/olingo/v2/entity/OndaDataStoreEntityProducer.java
new file mode 100644
index 000000000..fc0142c4c
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/entity/OndaDataStoreEntityProducer.java
@@ -0,0 +1,165 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.entity;
+
+import org.apache.olingo.commons.api.data.ComplexValue;
+import org.apache.olingo.commons.api.data.Entity;
+import org.apache.olingo.commons.api.data.Property;
+import org.apache.olingo.commons.api.data.ValueType;
+import org.dhus.api.olingo.v2.TypeInfo;
+import org.dhus.olingo.v2.datamodel.OndaDataStoreModel;
+import org.dhus.olingo.v2.datamodel.complex.CronComplexType;
+import org.dhus.olingo.v2.datamodel.complex.ObjectStorageComplexType;
+import org.dhus.olingo.v2.datamodel.complex.OndaScannerComplexType;
+import org.dhus.store.datastore.config.NamedDataStoreConf;
+import org.dhus.store.datastore.config.ObjectStorageCredentialConf;
+import org.dhus.store.datastore.config.OndaDataStoreConf;
+import org.dhus.store.datastore.config.OndaScannerConf;
+
+import fr.gael.dhus.database.object.config.cron.Cron;
+
+@TypeInfo(type = OndaDataStoreConf.class, baseType = NamedDataStoreConf.class)
+public class OndaDataStoreEntityProducer extends HttpAsyncDataStoreEntityProducer<OndaDataStoreConf>
+{
+   @Override
+   public Entity transform(OndaDataStoreConf ondaDataStore)
+   {
+      Entity dataStoreEntity = super.transform(ondaDataStore);
+      dataStoreEntity.setType(OndaDataStoreModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString());
+
+      dataStoreEntity
+            .addProperty(new Property(
+                  null,
+                  OndaDataStoreModel.PROPERTY_ORDER,
+                  ValueType.PRIMITIVE,
+                  ondaDataStore.isOrder()));
+      
+      if (ondaDataStore.getObjectStorageCredential() != null)
+      {
+         dataStoreEntity .addProperty(makeObjectStorageProperty(ondaDataStore.getObjectStorageCredential(), ondaDataStore.getName()));
+      }
+      if (ondaDataStore.getOndaScanner() != null)
+      {
+         dataStoreEntity.addProperty(makeOndaScannerProperty(ondaDataStore.getOndaScanner()));
+      }
+      return dataStoreEntity;
+   }
+   
+   private static Property makeObjectStorageProperty(ObjectStorageCredentialConf objectStorage, String dataStoreName)
+   {
+      ComplexValue objectStorageValue = new ComplexValue();
+
+      objectStorageValue.getValue().add(new Property(
+            null,
+            ObjectStorageComplexType.PROPERTY_PROVIDER,
+            ValueType.PRIMITIVE,
+            objectStorage.getProvider()));
+ 
+      objectStorageValue.getValue().add(new Property(
+            null,
+            ObjectStorageComplexType.PROPERTY_IDENTITY,
+            ValueType.PRIMITIVE,
+            objectStorage.getIdentity()));
+      
+      objectStorageValue.getValue().add(new Property(
+            null,
+            ObjectStorageComplexType.PROPERTY_CREDENTIAL,
+            ValueType.PRIMITIVE,
+            objectStorage.getCredential()));
+      
+      objectStorageValue.getValue().add(new Property(
+            null,
+            ObjectStorageComplexType.PROPERTY_URL,
+            ValueType.PRIMITIVE,
+            objectStorage.getUrl()));
+      
+      objectStorageValue.getValue().add(new Property(
+            null,
+            ObjectStorageComplexType.PROPERTY_REGION,
+            ValueType.PRIMITIVE,
+            objectStorage.getRegion()));
+
+      return new Property(
+            null,
+            OndaDataStoreModel.PROPERTY_OBJECT_STORAGE_CREDENTIAL,
+            ValueType.COMPLEX,
+            objectStorageValue);
+   }
+   
+   private static Property makeOndaScannerProperty(OndaScannerConf ondaScanner)
+   {
+      ComplexValue ondaScannerValue = new ComplexValue();
+
+      ondaScannerValue.getValue().add(new Property(
+            null,
+            OndaScannerComplexType.PROPERTY_OPENSEARCH_URL,
+            ValueType.PRIMITIVE,
+            ondaScanner.getOpensearchUrl()));
+      
+      ondaScannerValue.getValue().add(new Property(
+            null,
+            OndaScannerComplexType.PROPERTY_LAST_CREATION_DATE,
+            ValueType.PRIMITIVE,
+            ondaScanner.getLastCreationDate().toGregorianCalendar()));
+            
+      ondaScannerValue.getValue().add(new Property(
+            null,
+            OndaScannerComplexType.PROPERTY_FILTER,
+            ValueType.PRIMITIVE,
+            ondaScanner.getFilter()));
+      
+      ondaScannerValue.getValue().add(new Property(
+            null,
+            OndaScannerComplexType.PROPERTY_PAGE_SIZE,
+            ValueType.PRIMITIVE,
+            ondaScanner.getPageSize()));
+      
+      ondaScannerValue.getValue().add(
+            makeCronProperty(ondaScanner.getCron()));
+
+      return new Property(
+            null,
+            OndaDataStoreModel.PROPERTY_ONDA_SCANNER,
+            ValueType.COMPLEX,
+            ondaScannerValue); 
+   } 
+
+   private static Property makeCronProperty(Cron cron)
+   {
+      ComplexValue complexValue = new ComplexValue();
+      complexValue.getValue().add(new Property(
+            null,
+            CronComplexType.PROPERTY_ACTIVE,
+            ValueType.PRIMITIVE,
+            cron.isActive()));
+
+      complexValue.getValue().add(new Property(
+            null,
+            CronComplexType.PROPERTY_SCHEDULE,
+            ValueType.PRIMITIVE,
+            cron.getSchedule()));
+
+      return new Property(
+            null,
+            OndaScannerComplexType.PROPERTY_CRON,
+            ValueType.COMPLEX,
+            complexValue);
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/entity/PdgsDataStoreEntityProducer.java b/core/src/main/java/org/dhus/olingo/v2/entity/PdgsDataStoreEntityProducer.java
index c9cf71676..1b3faef8e 100644
--- a/core/src/main/java/org/dhus/olingo/v2/entity/PdgsDataStoreEntityProducer.java
+++ b/core/src/main/java/org/dhus/olingo/v2/entity/PdgsDataStoreEntityProducer.java
@@ -1,6 +1,6 @@
 /*
  * Data Hub Service (DHuS) - For Space data distribution.
- * Copyright (C) 2019 GAEL Systems
+ * Copyright (C) 2019-2020 GAEL Systems
  *
  * This file is part of DHuS software sources.
  *
@@ -20,55 +20,19 @@
 package org.dhus.olingo.v2.entity;
 
 import org.apache.olingo.commons.api.data.Entity;
-import org.apache.olingo.commons.api.data.Property;
-import org.apache.olingo.commons.api.data.ValueType;
 import org.dhus.api.olingo.v2.TypeInfo;
 import org.dhus.olingo.v2.datamodel.PdgsDataStoreModel;
-
-import org.dhus.store.datastore.config.PdgsDataStoreConf;
 import org.dhus.store.datastore.config.NamedDataStoreConf;
+import org.dhus.store.datastore.config.PdgsDataStoreConf;
 
-/**
- * Transforms PdgsDataStoreConf configuration objects to OData entities.
- */
 @TypeInfo(type = PdgsDataStoreConf.class, baseType = NamedDataStoreConf.class)
-public class PdgsDataStoreEntityProducer extends AsyncDataStoreEntityProducer<PdgsDataStoreConf>
+public class PdgsDataStoreEntityProducer extends HttpAsyncDataStoreEntityProducer<PdgsDataStoreConf>
 {
    @Override
    public Entity transform(PdgsDataStoreConf pdgsDataStore)
    {
       Entity dataStoreEntity = super.transform(pdgsDataStore);
-
       dataStoreEntity.setType(PdgsDataStoreModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString());
-
-      dataStoreEntity
-            .addProperty(new Property(
-                  null,
-                  PdgsDataStoreModel.PROPERTY_SERVICE_URL,
-                  ValueType.PRIMITIVE,
-                  pdgsDataStore.getServiceUrl()))
-            .addProperty(new Property(
-                  null,
-                  PdgsDataStoreModel.PROPERTY_LOGIN,
-                  ValueType.PRIMITIVE,
-                  pdgsDataStore.getLogin()))
-            .addProperty(new Property(
-                  null,
-                  PdgsDataStoreModel.PROPERTY_PASSWORD,
-                  ValueType.PRIMITIVE,
-                  "******"))
-            .addProperty(new Property(
-                  null,
-                  PdgsDataStoreModel.PROPERTY_MAX_CONCURRENTS_DOWNLOADS,
-                  ValueType.PRIMITIVE,
-                  pdgsDataStore.getMaxConcurrentsDownloads()))
-            .addProperty(new Property(
-                  null,
-                  PdgsDataStoreModel.PROPERTY_INTERVAL,
-                  ValueType.PRIMITIVE,
-                  pdgsDataStore.getInterval()));
-
       return dataStoreEntity;
    }
-
 }
diff --git a/core/src/main/java/org/dhus/olingo/v2/entity/ProductSynchronizerEntityProducer.java b/core/src/main/java/org/dhus/olingo/v2/entity/ProductSynchronizerEntityProducer.java
new file mode 100644
index 000000000..7e677e3d4
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/entity/ProductSynchronizerEntityProducer.java
@@ -0,0 +1,90 @@
+package org.dhus.olingo.v2.entity;
+
+import org.apache.olingo.commons.api.data.Entity;
+import org.apache.olingo.commons.api.data.Property;
+import org.apache.olingo.commons.api.data.ValueType;
+import org.dhus.api.olingo.v2.TypeInfo;
+import org.dhus.olingo.v2.datamodel.ProductSynchronizerModel;
+import org.dhus.olingo.v2.datamodel.SmartSynchronizerModel;
+
+import fr.gael.dhus.database.object.config.synchronizer.ProductSynchronizer;
+import fr.gael.dhus.database.object.config.synchronizer.SynchronizerConfiguration;
+
+@TypeInfo(type = ProductSynchronizer.class, baseType = SynchronizerConfiguration.class)
+public class ProductSynchronizerEntityProducer<I extends ProductSynchronizer> extends SynchronizerEntityProducer<I>
+{
+
+   @Override
+   public Entity transform(I prodSync)
+   {
+      Entity sync = super.transform(prodSync);
+      sync.setType(ProductSynchronizerModel.FULL_QUALIFIED_NAME.getFullQualifiedNameAsString());
+
+      sync.addProperty(new Property(
+            null,
+            ProductSynchronizerModel.PROPERTY_REMOTE_INCOMING,
+            ValueType.PRIMITIVE,
+            prodSync.getRemoteIncoming()));
+
+      sync.addProperty(new Property(
+            null, 
+            ProductSynchronizerModel.PROPERTY_SYNC_OFFLINE, 
+            ValueType.PRIMITIVE,
+            prodSync.isSyncOfflineProducts()));
+
+      sync.addProperty(new Property(
+            null, 
+            ProductSynchronizerModel.PROPERTY_COPY_PRODUCT, 
+            ValueType.PRIMITIVE,
+            prodSync.isCopyProduct()));
+
+      sync.addProperty(new Property(null, 
+            ProductSynchronizerModel.PROPERTY_SKIP_ON_ERROR, 
+            ValueType.PRIMITIVE,
+            prodSync.isSkipOnError()));
+      
+      String geofilter = null;
+      String operation = prodSync.getGeofilterOp();
+      String shape = prodSync.getGeofilterShape();
+      if (operation != null && !operation.isEmpty() && shape != null && !shape.isEmpty())
+      {
+         geofilter = String.format("%s %s", operation, shape);
+      }
+      sync.addProperty(new Property(
+            null,
+            SmartSynchronizerModel.PROPERTY_FILTER_GEO,
+            ValueType.PRIMITIVE,
+            geofilter));
+      
+      sync.addProperty(new Property(null, 
+            ProductSynchronizerModel.PROPERTY_FILTER_PARAM, 
+            ValueType.PRIMITIVE,
+            prodSync.getFilterParam()));
+      
+      sync.addProperty(new Property(null, 
+            ProductSynchronizerModel.PROPERTY_SOURCE_COLLECTION, 
+            ValueType.PRIMITIVE,
+            prodSync.getSourceCollection()));
+      
+      if (prodSync.getLastCreated() != null)
+      {
+         sync.addProperty(new Property(null, 
+            ProductSynchronizerModel.PROPERTY_LAST_CREATION_DATE, 
+            ValueType.PRIMITIVE,
+            prodSync.getLastCreated().toGregorianCalendar()));
+      }
+      
+      sync.addProperty(new Property(null, 
+            ProductSynchronizerModel.PROPERTY_RETRIES_SKIPPED_PRODUCTS, 
+            ValueType.PRIMITIVE,
+            prodSync.getRetriesForSkippedProducts()));
+      
+      sync.addProperty(new Property(null, 
+            ProductSynchronizerModel.PROPERTY_TIMEOUT_SKIPPED_PRODUCTS, 
+            ValueType.PRIMITIVE,
+            prodSync.getTimeoutSkippedProducts()));
+            
+      return sync;
+   }
+
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/entity/SynchronizerEntityProducer.java b/core/src/main/java/org/dhus/olingo/v2/entity/SynchronizerEntityProducer.java
index 214d7007c..2d5f7bb67 100644
--- a/core/src/main/java/org/dhus/olingo/v2/entity/SynchronizerEntityProducer.java
+++ b/core/src/main/java/org/dhus/olingo/v2/entity/SynchronizerEntityProducer.java
@@ -28,13 +28,14 @@ import org.apache.olingo.commons.api.data.ValueType;
 
 import org.dhus.api.olingo.v2.EntityProducer;
 import org.dhus.api.olingo.v2.TypeInfo;
-
 import org.dhus.olingo.v2.datamodel.SynchronizerModel;
 import org.dhus.olingo.v2.datamodel.complex.CronComplexType;
 
 @TypeInfo(type = SynchronizerConfiguration.class)
 public class SynchronizerEntityProducer<I extends SynchronizerConfiguration> implements EntityProducer<I>
 {
+   private static final Object DEFAULT_PASSWORD = "***";
+
    @Override
    public Entity transform(I syncConf)
    {
@@ -65,7 +66,36 @@ public class SynchronizerEntityProducer<I extends SynchronizerConfiguration> imp
             SynchronizerModel.PROPERTY_UPDATED_DATE,
             ValueType.PRIMITIVE,
             syncConf.getModified().toGregorianCalendar()));
+      
+      //Service Url
+      entity.addProperty(new Property(
+            null,
+            SynchronizerModel.PROPERTY_SERVICE_URL,
+            ValueType.PRIMITIVE,
+            syncConf.getServiceUrl()));
+      
+      //Service login
+      entity.addProperty(new Property(
+            null,
+            SynchronizerModel.PROPERTY_SERVICE_LOGIN,
+            ValueType.PRIMITIVE,
+            syncConf.getServiceLogin()));
+      
+      //Service Password
+      entity.addProperty(new Property(
+            null,
+            SynchronizerModel.PROPERTY_SERVICE_PASSWD,
+            ValueType.PRIMITIVE,
+            DEFAULT_PASSWORD));
+      
+      // Page size
+      entity.addProperty(new Property(
+            null,
+            SynchronizerModel.PROPERTY_PAGE_SIZE,
+            ValueType.PRIMITIVE,
+            syncConf.getPageSize()));
 
+      //Schedule for Cron
       ComplexValue complexValue = new ComplexValue();
       complexValue.getValue().add(new Property(
             null,
@@ -83,7 +113,7 @@ public class SynchronizerEntityProducer<I extends SynchronizerConfiguration> imp
             CronComplexType.COMPLEX_TYPE_NAME,
             ValueType.COMPLEX,
             complexValue));
-
+      
       return entity;
    }
 }
diff --git a/core/src/main/java/org/dhus/olingo/v2/visitor/DeletedProductSqlVisitor.java b/core/src/main/java/org/dhus/olingo/v2/visitor/DeletedProductSqlVisitor.java
new file mode 100644
index 000000000..ac2631c10
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/visitor/DeletedProductSqlVisitor.java
@@ -0,0 +1,142 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2019 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.visitor;
+
+import java.util.List;
+import java.util.Locale;
+
+import org.apache.olingo.commons.api.http.HttpStatusCode;
+import org.apache.olingo.server.api.ODataApplicationException;
+import org.apache.olingo.server.api.uri.UriResource;
+import org.apache.olingo.server.api.uri.UriResourceComplexProperty;
+import org.apache.olingo.server.api.uri.UriResourcePrimitiveProperty;
+import org.apache.olingo.server.api.uri.queryoption.FilterOption;
+import org.apache.olingo.server.api.uri.queryoption.OrderByOption;
+import org.apache.olingo.server.api.uri.queryoption.SkipOption;
+import org.apache.olingo.server.api.uri.queryoption.TopOption;
+import org.apache.olingo.server.api.uri.queryoption.expression.ExpressionVisitException;
+import org.apache.olingo.server.api.uri.queryoption.expression.Member;
+import org.dhus.olingo.v2.datamodel.DeletedProductModel;
+import org.dhus.olingo.v2.datamodel.complex.TimeRangeComplexType;
+
+public class DeletedProductSqlVisitor extends SQLVisitor
+{
+   private static final long serialVersionUID = 1L;
+
+   public DeletedProductSqlVisitor(FilterOption filter, OrderByOption order, TopOption topOption, SkipOption skipOption)
+   {
+      super("", "from DeletedProduct", filter, order, topOption, skipOption);
+   }
+
+   @Override
+   public Object visitMember(Member member)
+         throws ExpressionVisitException, ODataApplicationException  
+   {
+      final List<UriResource> uriResourceParts = member.getResourcePath().getUriResourceParts();
+
+      // Adressing a property
+      if (uriResourceParts.size() == 1 && uriResourceParts.get(0) instanceof UriResourcePrimitiveProperty)
+      {
+         String segmentVal = ((UriResourcePrimitiveProperty) uriResourceParts.get(0)).getSegmentValue();
+
+         switch (segmentVal)
+         {
+            case DeletedProductModel.PROPERTY_ID:
+            {
+               return "uuid";
+            }
+            case DeletedProductModel.PROPERTY_NAME:
+            {
+               return "identifier";
+            }
+            case DeletedProductModel.PROPERTY_CREATION_DATE:
+            {
+               return "created";
+            }
+            case DeletedProductModel.PROPERTY_FOOTPRINT:
+            {
+               return "footPrint";
+            }
+            case DeletedProductModel.PROPERTY_SIZE:
+            {
+               return "size";
+            }
+            case DeletedProductModel.PROPERTY_INGESTION_DATE:
+            {
+               return "ingestionDate";
+            }
+            case DeletedProductModel.PROPERTY_DELETION_DATE:
+            {
+               return "deletionDate";
+            }
+            case DeletedProductModel.PROPERTY_DELETION_CAUSE:
+            {
+               return "deletionCause";
+            }
+            default:
+            {
+               throw new ODataApplicationException("Property not supported: " + segmentVal,
+                     HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+            }
+         }
+      }
+      // Adressing a complex property
+      else if (uriResourceParts.size() == 2
+            && uriResourceParts.get(0) instanceof UriResourceComplexProperty
+            && uriResourceParts.get(1) instanceof UriResourcePrimitiveProperty)
+      {
+         UriResource cplex = uriResourceParts.get(0);
+         String segmentVal = ((UriResourcePrimitiveProperty) uriResourceParts.get(1)).getSegmentValue();
+
+         switch (cplex.getSegmentValue())
+         {
+            case DeletedProductModel.PROPERTY_CONTENT_DATE:
+            {
+               switch (segmentVal)
+               {
+                  case TimeRangeComplexType.PROPERTY_START:
+                  {
+                     return "contentStart";
+                  }
+                  case TimeRangeComplexType.PROPERTY_END:
+                  {
+                     return "contentEnd";
+                  }
+                  default:
+                  {
+                     throw new ODataApplicationException("Property not supported: " + segmentVal,
+                           HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+                  }
+               }
+            }
+            default:
+            {
+               throw new ODataApplicationException("Complex property not supported: " + segmentVal,
+                     HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+            }
+         }
+      }
+      else
+      {
+         throw new ODataApplicationException("Non-primitive properties are not supported in filter expressions",
+               HttpStatusCode.NOT_IMPLEMENTED.getStatusCode(), Locale.ENGLISH);
+      }
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/visitor/HQLVisitor.java b/core/src/main/java/org/dhus/olingo/v2/visitor/HQLVisitor.java
index 9b8447e99..03ddb5703 100644
--- a/core/src/main/java/org/dhus/olingo/v2/visitor/HQLVisitor.java
+++ b/core/src/main/java/org/dhus/olingo/v2/visitor/HQLVisitor.java
@@ -1,6 +1,6 @@
 /*
  * Data Hub Service (DHuS) - For Space data distribution.
- * Copyright (C) 2019 GAEL Systems
+ * Copyright (C) 2019,2020 GAEL Systems
  *
  * This file is part of DHuS software sources.
  *
@@ -98,6 +98,14 @@ public abstract class HQLVisitor implements ExpressionVisitor<Object>
       return null;
    }
 
+   @Override
+   public Object visitBinaryOperator(BinaryOperatorKind operator, Object left, List<Object> right)
+         throws ExpressionVisitException, ODataApplicationException
+   {
+      throw new ODataApplicationException("Unsupported operator: " + operator.name(),
+            HttpStatusCode.NOT_IMPLEMENTED.getStatusCode(), Locale.ENGLISH);
+   }
+
    @Override
    public Object visitBinaryOperator(BinaryOperatorKind operator, Object left, Object right)
          throws ExpressionVisitException, ODataApplicationException
diff --git a/core/src/main/java/org/dhus/olingo/v2/visitor/OrderSQLVisitor.java b/core/src/main/java/org/dhus/olingo/v2/visitor/OrderSQLVisitor.java
index 3e5337a91..7e7e2ce49 100644
--- a/core/src/main/java/org/dhus/olingo/v2/visitor/OrderSQLVisitor.java
+++ b/core/src/main/java/org/dhus/olingo/v2/visitor/OrderSQLVisitor.java
@@ -1,6 +1,6 @@
 /*
  * Data Hub Service (DHuS) - For Space data distribution.
- * Copyright (C) 2019 GAEL Systems
+ * Copyright (C) 2019,2020 GAEL Systems
  *
  * This file is part of DHuS software sources.
  *
@@ -72,6 +72,9 @@ public class OrderSQLVisitor extends SQLVisitor
             case JobModel.PROPERTY_SUBMISSION_TIME:
                return "ord.submissionTime";
 
+            case JobModel.PROPERTY_STATUS_MESSAGE:
+               return "ord.statusMessage";
+
             default:
                throw new ODataApplicationException("Property not supported: " + segmentVal,
                      HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
diff --git a/core/src/main/java/org/dhus/olingo/v2/visitor/SQLVisitor.java b/core/src/main/java/org/dhus/olingo/v2/visitor/SQLVisitor.java
index fbcb70d22..b191c0ebd 100644
--- a/core/src/main/java/org/dhus/olingo/v2/visitor/SQLVisitor.java
+++ b/core/src/main/java/org/dhus/olingo/v2/visitor/SQLVisitor.java
@@ -120,6 +120,14 @@ public abstract class SQLVisitor implements Serializable, ExpressionVisitor<Obje
       return null;
    }
 
+   @Override
+   public Object visitBinaryOperator(BinaryOperatorKind operator, Object left, List<Object> right)
+         throws ExpressionVisitException, ODataApplicationException
+   {
+      throw new ODataApplicationException("Unsupported operator: " + operator.name(),
+            HttpStatusCode.NOT_IMPLEMENTED.getStatusCode(), Locale.ENGLISH);
+   }
+
    @Override
    public Object visitBinaryOperator(BinaryOperatorKind operator, Object left, Object right)
          throws ExpressionVisitException, ODataApplicationException
@@ -138,7 +146,8 @@ public abstract class SQLVisitor implements Serializable, ExpressionVisitor<Obje
                sb.append(" IS NOT NULL ");
                break;
             default:
-               throw new UnsupportedOperationException("Unsupported operator for null values: " + operator.name());
+               throw new ODataApplicationException("Unsupported operator for null values: " + operator.name(),
+                     HttpStatusCode.NOT_IMPLEMENTED.getStatusCode(), Locale.ENGLISH);
          }
       }
       else
@@ -174,7 +183,8 @@ public abstract class SQLVisitor implements Serializable, ExpressionVisitor<Obje
                break;
             default:
                // Other operators are not supported for SQL Statements
-               throw new UnsupportedOperationException("Unsupported operator: " + operator.name());
+               throw new ODataApplicationException("Unsupported operator: " + operator.name(),
+                     HttpStatusCode.NOT_IMPLEMENTED.getStatusCode(), Locale.ENGLISH);
          }
          // return the binary statement
          sb.append(right).append(')');
@@ -378,7 +388,8 @@ public abstract class SQLVisitor implements Serializable, ExpressionVisitor<Obje
          }
 
          default:
-            throw new UnsupportedOperationException("Unsupported method: " + methodCall.toString());
+            throw new ODataApplicationException("Unsupported method: " + methodCall.name(),
+                  HttpStatusCode.NOT_IMPLEMENTED.getStatusCode(), Locale.ENGLISH);
       }
 
       return result;
diff --git a/core/src/main/java/org/dhus/olingo/v2/visitor/UserSQLVisitor.java b/core/src/main/java/org/dhus/olingo/v2/visitor/UserSQLVisitor.java
new file mode 100644
index 000000000..468693f7e
--- /dev/null
+++ b/core/src/main/java/org/dhus/olingo/v2/visitor/UserSQLVisitor.java
@@ -0,0 +1,118 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.olingo.v2.visitor;
+
+import java.util.List;
+import java.util.Locale;
+
+import org.apache.olingo.commons.api.http.HttpStatusCode;
+import org.apache.olingo.server.api.ODataApplicationException;
+import org.apache.olingo.server.api.uri.UriResource;
+import org.apache.olingo.server.api.uri.UriResourcePrimitiveProperty;
+import org.apache.olingo.server.api.uri.queryoption.FilterOption;
+import org.apache.olingo.server.api.uri.queryoption.OrderByOption;
+import org.apache.olingo.server.api.uri.queryoption.SkipOption;
+import org.apache.olingo.server.api.uri.queryoption.TopOption;
+import org.apache.olingo.server.api.uri.queryoption.expression.ExpressionVisitException;
+import org.apache.olingo.server.api.uri.queryoption.expression.Member;
+import org.dhus.olingo.v2.datamodel.UserModel;
+
+public class UserSQLVisitor  extends SQLVisitor
+{
+   private static final long serialVersionUID = 1L;
+
+   public UserSQLVisitor(FilterOption filter, OrderByOption order, TopOption topOption, SkipOption skipOption)
+   {
+      super("", "from User", filter, order, topOption, skipOption);
+   }
+   @Override
+   public Object visitMember(Member member)
+         throws ExpressionVisitException, ODataApplicationException
+   {
+      final List<UriResource> uriResourceParts = member.getResourcePath().getUriResourceParts();
+
+      if (uriResourceParts.size() == 1 && uriResourceParts.get(0) instanceof UriResourcePrimitiveProperty)
+      {
+         String segmentVal = ((UriResourcePrimitiveProperty) uriResourceParts.get(0)).getSegmentValue();
+         // switch over the properties to identify the exact property
+         switch (segmentVal)
+         {
+            case UserModel.PROPERTY_USERNAME:
+            {
+               return "username";
+            }
+            case UserModel.PROPERTY_COUNTRY:
+            {
+               return "country";
+            }
+            case UserModel.PROPERTY_EMAIL:
+            {
+               return "email";
+            }
+            case UserModel.PROPERTY_FIRSTNAME:
+            {
+               return "firstname";
+            }
+            case UserModel.PROPERTY_LASTNAME:
+            {
+               return "lastname";
+            }
+            case UserModel.PROPERTY_ADDRESS:
+            {
+               return "address";
+            }
+            case UserModel.PROPERTY_PHONE:
+            {
+               return "phone";
+            }
+            case UserModel.PROPERTY_DOMAIN:
+            {
+               return "domain";
+            }
+            case UserModel.PROPERTY_SUBDOMAIN:
+            {
+               return "subDomain";
+            }
+            case UserModel.PROPERTY_USAGE:
+            {
+               return "usage";
+            }
+            case UserModel.PROPERTY_SUBUSAGE:
+            {
+               return "subUsage";
+            }
+            case UserModel.PROPERTY_CREATED:
+            {
+               return "created";
+            }
+            default:
+            {
+               throw new ODataApplicationException("Property not supported: " + segmentVal,
+                     HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ENGLISH);
+            }
+         }
+      }
+      else
+      {
+         throw new ODataApplicationException("Non-primitive properties are not supported in filter expressions",
+               HttpStatusCode.NOT_IMPLEMENTED.getStatusCode(), Locale.ENGLISH);
+      }
+   }
+}
diff --git a/core/src/main/java/org/dhus/olingo/v2/web/DHuSODataServlet.java b/core/src/main/java/org/dhus/olingo/v2/web/DHuSODataServlet.java
index c9857d5d5..5f0c1d128 100644
--- a/core/src/main/java/org/dhus/olingo/v2/web/DHuSODataServlet.java
+++ b/core/src/main/java/org/dhus/olingo/v2/web/DHuSODataServlet.java
@@ -1,6 +1,6 @@
 /*
  * Data Hub Service (DHuS) - For Space data distribution.
- * Copyright (C) 2018,2019 GAEL Systems
+ * Copyright (C) 2018-2020 GAEL Systems
  *
  * This file is part of DHuS software sources.
  *
@@ -19,60 +19,70 @@
  */
 package org.dhus.olingo.v2.web;
 
-import fr.gael.odata.engine.data.DataHandler;
-import fr.gael.odata.engine.model.EdmProvider;
-import fr.gael.odata.engine.servlet.AbstractODataServlet;
-
 import java.util.HashMap;
 import java.util.Map;
 
 import org.apache.olingo.commons.api.edm.FullQualifiedName;
-
 import org.dhus.api.olingo.v2.EntityProducer;
 import org.dhus.api.olingo.v2.TypeInfo;
-
 import org.dhus.olingo.v2.data.AttributeDataHandler;
 import org.dhus.olingo.v2.data.ClassDataHandler;
 import org.dhus.olingo.v2.data.CollectionDataHandler;
 import org.dhus.olingo.v2.data.DataStoreDataHandler;
+import org.dhus.olingo.v2.data.DeletedProductDataHandler;
 import org.dhus.olingo.v2.data.EvictionDataHandler;
 import org.dhus.olingo.v2.data.MetricDataHandler;
 import org.dhus.olingo.v2.data.NodeDataHandler;
 import org.dhus.olingo.v2.data.OrderDataHandler;
 import org.dhus.olingo.v2.data.ProductDataHandler;
 import org.dhus.olingo.v2.data.ScannerDataHandler;
+import org.dhus.olingo.v2.data.SearchesDataHandler;
 import org.dhus.olingo.v2.data.SmartSynchronizerDataHandler;
 import org.dhus.olingo.v2.data.SourceDataHandler;
 import org.dhus.olingo.v2.data.SynchronizerDataHandler;
 import org.dhus.olingo.v2.data.TransformationDataHandler;
 import org.dhus.olingo.v2.data.TransformerDataHandler;
-import org.dhus.olingo.v2.datamodel.JobModel;
-import org.dhus.olingo.v2.datamodel.ParamPdgsDataStoreModel;
+import org.dhus.olingo.v2.data.UserDataHandler;
 import org.dhus.olingo.v2.datamodel.AsyncDataStoreModel;
 import org.dhus.olingo.v2.datamodel.AttributeModel;
 import org.dhus.olingo.v2.datamodel.ClassModel;
 import org.dhus.olingo.v2.datamodel.CollectionModel;
 import org.dhus.olingo.v2.datamodel.DataStoreModel;
+import org.dhus.olingo.v2.datamodel.DeletedProductModel;
 import org.dhus.olingo.v2.datamodel.EvictionModel;
 import org.dhus.olingo.v2.datamodel.FileScannerModel;
 import org.dhus.olingo.v2.datamodel.FtpScannerModel;
 import org.dhus.olingo.v2.datamodel.GmpDataStoreModel;
 import org.dhus.olingo.v2.datamodel.HfsDataStoreModel;
+import org.dhus.olingo.v2.datamodel.HttpAsyncDataStoreModel;
 import org.dhus.olingo.v2.datamodel.ItemModel;
+import org.dhus.olingo.v2.datamodel.JobModel;
+import org.dhus.olingo.v2.datamodel.LtaDataStoreModel;
 import org.dhus.olingo.v2.datamodel.MetricModel;
 import org.dhus.olingo.v2.datamodel.NodeModel;
+import org.dhus.olingo.v2.datamodel.OndaDataStoreModel;
 import org.dhus.olingo.v2.datamodel.OpenstackDataStoreModel;
 import org.dhus.olingo.v2.datamodel.OrderModel;
+import org.dhus.olingo.v2.datamodel.ParamPdgsDataStoreModel;
 import org.dhus.olingo.v2.datamodel.PdgsDataStoreModel;
 import org.dhus.olingo.v2.datamodel.ProductModel;
+import org.dhus.olingo.v2.datamodel.ProductSynchronizerModel;
 import org.dhus.olingo.v2.datamodel.RemoteDhusDataStoreModel;
 import org.dhus.olingo.v2.datamodel.ScannerModel;
+import org.dhus.olingo.v2.datamodel.SearchModel;
 import org.dhus.olingo.v2.datamodel.SmartSynchronizerModel;
 import org.dhus.olingo.v2.datamodel.SourceModel;
 import org.dhus.olingo.v2.datamodel.SynchronizerModel;
 import org.dhus.olingo.v2.datamodel.TransformationModel;
 import org.dhus.olingo.v2.datamodel.TransformerModel;
+import org.dhus.olingo.v2.datamodel.UserModel;
+import org.dhus.olingo.v2.datamodel.action.AddSearchAction;
 import org.dhus.olingo.v2.datamodel.action.CancelEvictionAction;
+import org.dhus.olingo.v2.datamodel.action.ClearSearchesAction;
+import org.dhus.olingo.v2.datamodel.action.DeleteDeletedProductsAction;
+import org.dhus.olingo.v2.datamodel.action.DeleteProductsAction;
+import org.dhus.olingo.v2.datamodel.action.DeleteSearchAction;
+import org.dhus.olingo.v2.datamodel.action.LockUserAction;
 import org.dhus.olingo.v2.datamodel.action.OrderProductAction;
 import org.dhus.olingo.v2.datamodel.action.QueueEvictionAction;
 import org.dhus.olingo.v2.datamodel.action.RepairProductAction;
@@ -82,30 +92,44 @@ import org.dhus.olingo.v2.datamodel.action.StartScannerAction;
 import org.dhus.olingo.v2.datamodel.action.StopEvictionAction;
 import org.dhus.olingo.v2.datamodel.action.StopScannerAction;
 import org.dhus.olingo.v2.datamodel.action.TransformProductAction;
+import org.dhus.olingo.v2.datamodel.action.UnlockUserAction;
+import org.dhus.olingo.v2.datamodel.action.EnableSearchAction;
+import org.dhus.olingo.v2.datamodel.complex.AdvancedPropertyComplexType;
 import org.dhus.olingo.v2.datamodel.complex.ChecksumComplexType;
 import org.dhus.olingo.v2.datamodel.complex.CronComplexType;
 import org.dhus.olingo.v2.datamodel.complex.DescriptiveParameterComplexType;
 import org.dhus.olingo.v2.datamodel.complex.GMPConfigurationComplexType;
 import org.dhus.olingo.v2.datamodel.complex.MySQLConnectionInfoComplexType;
+import org.dhus.olingo.v2.datamodel.complex.ObjectStorageComplexType;
+import org.dhus.olingo.v2.datamodel.complex.OndaScannerComplexType;
 import org.dhus.olingo.v2.datamodel.complex.PatternReplaceComplexType;
 import org.dhus.olingo.v2.datamodel.complex.ResourceLocationComplexType;
+import org.dhus.olingo.v2.datamodel.complex.RestrictionComplexType;
 import org.dhus.olingo.v2.datamodel.complex.ScannerStatusComplexType;
 import org.dhus.olingo.v2.datamodel.complex.SynchronizerSourceComplexType;
 import org.dhus.olingo.v2.datamodel.complex.TimeRangeComplexType;
 import org.dhus.olingo.v2.datamodel.complex.TransformationParametersComplexType;
-import org.dhus.olingo.v2.datamodel.enumeration.MetricTypeEnum;
 import org.dhus.olingo.v2.datamodel.enumeration.JobStatusEnum;
+import org.dhus.olingo.v2.datamodel.enumeration.MetricTypeEnum;
+import org.dhus.olingo.v2.datamodel.enumeration.SystemRoleEnum;
 import org.dhus.olingo.v2.datamodel.function.EvictionDateFunction;
 import org.dhus.olingo.v2.datamodel.function.ResourceLocationFunction;
 import org.dhus.olingo.v2.entity.TypeStore;
-
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;
 import org.springframework.core.type.filter.AnnotationTypeFilter;
 
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.system.config.ConfigurationManager;
+import fr.gael.odata.engine.data.DataHandler;
+import fr.gael.odata.engine.model.EdmProvider;
+import fr.gael.odata.engine.servlet.AbstractODataServlet;
+
 
 public class DHuSODataServlet extends AbstractODataServlet
 {
+   private static final ConfigurationManager CONFIG_MANAGER = ApplicationContextProvider.getBean(ConfigurationManager.class);
+   
    public static final String NAMESPACE = "OData.DHuS";
    public static final String CONTAINER_NAME = "Container";
 
@@ -150,11 +174,15 @@ public class DHuSODataServlet extends AbstractODataServlet
       dataHandlers.put(GmpDataStoreModel.FULL_QUALIFIED_NAME, dataStoreDataHandler);
       dataHandlers.put(RemoteDhusDataStoreModel.FULL_QUALIFIED_NAME, dataStoreDataHandler);
       dataHandlers.put(PdgsDataStoreModel.FULL_QUALIFIED_NAME, dataStoreDataHandler);
+      dataHandlers.put(LtaDataStoreModel.FULL_QUALIFIED_NAME, dataStoreDataHandler);
+      dataHandlers.put(OndaDataStoreModel.FULL_QUALIFIED_NAME, dataStoreDataHandler);
 
       // operative
       dataHandlers.put(EvictionModel.FULL_QUALIFIED_NAME, new EvictionDataHandler());
       dataHandlers.put(SourceModel.FULL_QUALIFIED_NAME, new SourceDataHandler());
-      dataHandlers.put(SynchronizerModel.ABSTRACT_FULL_QUALIFIED_NAME, new SynchronizerDataHandler(typeStore));
+      SynchronizerDataHandler synchronizerDataHandler = new SynchronizerDataHandler(typeStore);
+      dataHandlers.put(SynchronizerModel.ABSTRACT_FULL_QUALIFIED_NAME, synchronizerDataHandler);
+      dataHandlers.put(ProductSynchronizerModel.FULL_QUALIFIED_NAME, synchronizerDataHandler);
       dataHandlers.put(SmartSynchronizerModel.FULL_QUALIFIED_NAME, new SmartSynchronizerDataHandler(typeStore));
       dataHandlers.put(TransformerModel.FULL_QUALIFIED_NAME, new TransformerDataHandler(typeStore));
       dataHandlers.put(TransformationModel.FULL_QUALIFIED_NAME, new TransformationDataHandler(typeStore));
@@ -171,6 +199,11 @@ public class DHuSODataServlet extends AbstractODataServlet
       dataHandlers.put(AttributeModel.FULL_QUALIFIED_NAME, new AttributeDataHandler());
       dataHandlers.put(ClassModel.FULL_QUALIFIED_NAME, new ClassDataHandler());
       dataHandlers.put(OrderModel.FULL_QUALIFIED_NAME, new OrderDataHandler());
+      dataHandlers.put(DeletedProductModel.FULL_QUALIFIED_NAME, new DeletedProductDataHandler());
+
+      // user
+      dataHandlers.put(SearchModel.FULL_QUALIFIED_NAME, new SearchesDataHandler());
+      dataHandlers.put(UserModel.FULL_QUALIFIED_NAME, new UserDataHandler());
 
       // metrics
       if (MetricDataHandler.isEnabled())
@@ -184,8 +217,7 @@ public class DHuSODataServlet extends AbstractODataServlet
    private static EdmProvider buildEdmProvider()
    {
       EdmProvider.Builder builder = new EdmProvider.Builder(NAMESPACE, CONTAINER_NAME);
-      builder.addModels(
-                  // storage
+      builder.addModels(// storage
                   new DataStoreModel(),
                   new HfsDataStoreModel(),
                   new OpenstackDataStoreModel(),
@@ -194,11 +226,15 @@ public class DHuSODataServlet extends AbstractODataServlet
                   new PdgsDataStoreModel(),
                   new AsyncDataStoreModel(),
                   new ParamPdgsDataStoreModel(),
+                  new HttpAsyncDataStoreModel(),
+                  new LtaDataStoreModel(),
+                  new OndaDataStoreModel(),
 
                   // operative
                   new EvictionModel(),
                   new SourceModel(),
                   new SynchronizerModel(),
+                  new ProductSynchronizerModel(),
                   new SmartSynchronizerModel(),
 
                   // transformation
@@ -218,7 +254,12 @@ public class DHuSODataServlet extends AbstractODataServlet
                   new AttributeModel(),
                   new ClassModel(),
                   new OrderModel(),
-                  new JobModel())
+                  new JobModel(),
+                  new DeletedProductModel(),
+
+                  // user
+                  new SearchModel(),
+                  new UserModel())
 
             .addComplexTypes(
                   new MySQLConnectionInfoComplexType(),
@@ -240,10 +281,18 @@ public class DHuSODataServlet extends AbstractODataServlet
                   new DescriptiveParameterComplexType(),
                   new TransformationParametersComplexType(),
 
+                  // user
+                  new AdvancedPropertyComplexType(),
+                  new RestrictionComplexType(),
+
                   // other
                   new TimeRangeComplexType(),
                   new ChecksumComplexType(),
-                  new PatternReplaceComplexType())
+                  new PatternReplaceComplexType(),
+                  
+                  // ondaDataStore
+                  new ObjectStorageComplexType(),
+                  new OndaScannerComplexType())
 
             .addActions(
                   // eviction
@@ -262,15 +311,29 @@ public class DHuSODataServlet extends AbstractODataServlet
                   // products
                   new OrderProductAction(),
                   new RepairProductAction(),
-                  new RepairProductsAction())
+                  new RepairProductsAction(),
+                  new DeleteProductsAction(),
+                  new DeleteDeletedProductsAction(),
+
+                  // users
+                  new AddSearchAction(),
+                  new EnableSearchAction(),
+                  new DeleteSearchAction(),
+                  new ClearSearchesAction())
 
             .addFunctions(
                   new ResourceLocationFunction(),
                   new EvictionDateFunction())
 
             .addEnums(
-                  new JobStatusEnum())
-            .build();
+                  new JobStatusEnum(),
+                  new SystemRoleEnum());
+
+      if (!CONFIG_MANAGER.isGDPREnabled())
+      {
+         builder.addActions(new LockUserAction(), new UnlockUserAction());
+      }
+      builder.build();
 
       if (MetricDataHandler.isEnabled())
       {
diff --git a/core/src/main/java/org/dhus/store/OrderException.java b/core/src/main/java/org/dhus/store/OrderException.java
new file mode 100644
index 000000000..f7c4ada9f
--- /dev/null
+++ b/core/src/main/java/org/dhus/store/OrderException.java
@@ -0,0 +1,38 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.dhus.store;
+
+import org.dhus.store.datastore.DataStoreException;
+
+public class OrderException extends DataStoreException
+{
+   private static final long serialVersionUID = 1L;
+
+   public OrderException(String message)
+   {
+      super(message);
+   }
+
+   public OrderException(String message, Throwable cause)
+   {
+      super(message, cause);
+   }
+}
diff --git a/core/src/main/java/org/dhus/store/StoreService.java b/core/src/main/java/org/dhus/store/StoreService.java
index 4c04c1c7d..036e75e5e 100644
--- a/core/src/main/java/org/dhus/store/StoreService.java
+++ b/core/src/main/java/org/dhus/store/StoreService.java
@@ -19,13 +19,6 @@
  */
 package org.dhus.store;
 
-import fr.gael.dhus.database.object.DeletedProduct;
-import fr.gael.dhus.database.object.Product;
-import fr.gael.dhus.datastore.Destination;
-import fr.gael.dhus.datastore.scanner.Scanner;
-import fr.gael.dhus.datastore.scanner.ScannerStatus;
-import fr.gael.dhus.service.TransformationService;
-
 import java.io.IOException;
 import java.util.Collections;
 import java.util.HashSet;
@@ -38,7 +31,6 @@ import java.util.concurrent.atomic.AtomicBoolean;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
 import org.dhus.ProductConstants;
 import org.dhus.store.datastore.DataStoreException;
 import org.dhus.store.datastore.DataStoreManager;
@@ -50,9 +42,15 @@ import org.dhus.store.derived.DerivedProductStoreService;
 import org.dhus.store.ingestion.IngestibleProduct;
 import org.dhus.store.ingestion.IngestibleRawProduct;
 import org.dhus.store.metadatastore.MetadataStoreService;
-
 import org.springframework.beans.factory.annotation.Autowired;
 
+import fr.gael.dhus.database.object.DeletedProduct;
+import fr.gael.dhus.database.object.Product;
+import fr.gael.dhus.datastore.Destination;
+import fr.gael.dhus.datastore.scanner.Scanner;
+import fr.gael.dhus.datastore.scanner.ScannerStatus;
+import fr.gael.dhus.service.TransformationService;
+
 public class StoreService implements Store
 {
    private static final Logger LOGGER = LogManager.getLogger();
@@ -65,6 +63,8 @@ public class StoreService implements Store
 
    private final Set<String> runningRepairsUuids = Collections.<String>synchronizedSet(new HashSet<>());
 
+   private static final String DEFAULT_ORDER_BY = "CreationDate asc";
+
    @Autowired
    private DataStoreManager dataStoreService;
 
@@ -117,7 +117,7 @@ public class StoreService implements Store
       // physical product
       try
       {
-         softDeleteProduct(destination, uuid);
+         softDeleteProduct(destination, uuid, false);
       }
       catch (ProductNotFoundException suppressed) {}
       catch (DataStoreException e)
@@ -163,15 +163,15 @@ public class StoreService implements Store
    }
 
    private List<LoggableProduct> listProductUUIDs(String filter, String orderBy, String collectionName,
-         boolean online, int skip, int top) throws StoreException
+         boolean online, boolean safe, int skip, int top) throws StoreException
    {
       if (online)
       {
-         return metadataStoreService.getOnlineProductUUIDs(filter, orderBy, collectionName, skip, top);
+         return metadataStoreService.getOnlineProductUUIDs(filter, orderBy, collectionName, safe, skip, top);
       }
       else
       {
-         return metadataStoreService.getProductUUIDs(filter, orderBy, collectionName, skip, top);
+         return metadataStoreService.getProductUUIDs(filter, orderBy, collectionName, safe, skip, top);
       }
    }
 
@@ -186,7 +186,7 @@ public class StoreService implements Store
     */
    public void evictAtLeast(long sizeToEvict, String dataStoreName) throws DataStoreException, StoreException
    {
-      internalEvictAtLeast(sizeToEvict, dataStoreName, null, null, null, Integer.MAX_VALUE, true, Destination.TRASH, DeletedProduct.AUTO_EVICTION, false);
+      internalEvictAtLeast(sizeToEvict, dataStoreName, null, DEFAULT_ORDER_BY, null, Integer.MAX_VALUE, true, Destination.TRASH, DeletedProduct.AUTO_EVICTION, false);
    }
 
    /**
@@ -229,7 +229,7 @@ public class StoreService implements Store
 
       // retrieve datastore product iterator
       DataStoreProductIterator productIterator =
-            new DataStoreProductIterator(filter, orderBy, collectionName, dataStoreName);
+            new DataStoreProductIterator(filter, orderBy, collectionName, dataStoreName, safeMode);
 
       // eviction stops if enough space is freed
       // or many enough products have been deleted
@@ -305,7 +305,7 @@ public class StoreService implements Store
     */
    // TODO merge with internalEvictAtLeast?
    public void evictProducts(String filter, String orderBy, String collectionName,
-         int maxDeletedProducts, boolean softDeletion, Destination destination, String cause)
+         int maxDeletedProducts, boolean softDeletion, Destination destination, String cause, boolean safeMode)
          throws StoreException
    {
       // to ensure a previous stop will not prevent this start
@@ -317,7 +317,7 @@ public class StoreService implements Store
       long start = System.currentTimeMillis();
 
       // get product iterator and start deletion loop
-      ProductIterator productIterator = new ProductIterator(filter, orderBy, collectionName, softDeletion);
+      ProductIterator productIterator = new ProductIterator(filter, orderBy, collectionName, softDeletion, safeMode);
       while (productsDeleted < maxDeletedProducts && productIterator.hasNext())
       {
          if (evictionMustStop.get())
@@ -333,7 +333,7 @@ public class StoreService implements Store
             long deleteStart = System.currentTimeMillis();
             if (softDeletion)
             {
-               softDeleteProduct(destination, logProd.getUuid());
+               softDeleteProduct(destination, logProd.getUuid(), safeMode);
                LOGGER.info("Product {} ({}) ({} bytes) has been successfully soft evicted from all datastore",
                      logProd.getIdentifier(), logProd.getUuid(), logProd.getSize());
             }
@@ -380,10 +380,10 @@ public class StoreService implements Store
       LOGGER.info("Successfully deleted {} products in {}ms", productsDeleted, System.currentTimeMillis() - start);
    }
 
-   private void softDeleteProduct(Destination destination, String uuid) throws DataStoreException
+   private void softDeleteProduct(Destination destination, String uuid, boolean safeMode) throws DataStoreException
    {
       // only delete physical product
-      dataStoreService.deleteProduct(uuid, destination);
+      dataStoreService.deleteProduct(uuid, destination, safeMode);
 
       if (!dataStoreService.hasProduct(uuid))
       {
@@ -642,7 +642,7 @@ public class StoreService implements Store
       long start = System.currentTimeMillis();
 
       int repairedProducts = 0;
-      ProductIterator productIterator = new ProductIterator(filter, orderBy, null, true, skip);
+      ProductIterator productIterator = new ProductIterator(filter, orderBy, null, true, false, skip);
       while (repairedProducts < maxRepairedProducts && productIterator.hasNext())
       {
          LoggableProduct product = productIterator.next();
@@ -672,28 +672,31 @@ public class StoreService implements Store
       private final String orderBy;
       private final String collectionName;
       private final boolean online;
-
+      private final boolean safe;
+      
       private int skip = 0;
       private Iterator<LoggableProduct> productPage = Collections.emptyIterator();
 
-      public ProductIterator(String filter, String orderBy, String collectionName, boolean online, int skip) throws StoreException
+      public ProductIterator(String filter, String orderBy, String collectionName, boolean online, boolean safe, int skip) throws StoreException
       {
          this.filter = filter;
          this.orderBy = orderBy;
          this.collectionName = collectionName;
          this.online = online;
          this.skip = skip;
+         this.safe = safe;
 
          // fetch next page so that filter can be validated
          fetchNextPage();
       }
 
-      public ProductIterator(String filter, String orderBy, String collectionName, boolean online) throws StoreException
+      public ProductIterator(String filter, String orderBy, String collectionName, boolean online, boolean safe) throws StoreException
       {
          this.filter = filter;
          this.orderBy = orderBy;
          this.collectionName = collectionName;
          this.online = online;
+         this.safe = safe;
 
          // fetch next page so that filter can be validated
          fetchNextPage();
@@ -724,7 +727,7 @@ public class StoreService implements Store
       private void fetchNextPage() throws StoreException
       {
          List<LoggableProduct> products = listProductUUIDs(
-               filter, orderBy, collectionName, online, skip, FILTERED_DELETION_PAGE_SIZE);
+               filter, orderBy, collectionName, online, safe, skip, FILTERED_DELETION_PAGE_SIZE);
 
          skip += FILTERED_DELETION_PAGE_SIZE;
 
@@ -759,18 +762,19 @@ public class StoreService implements Store
       private final String orderBy;
       private final String collectionName;
       private final String dataStoreName;
+      private final Boolean safe;
 
       private int skip = 0;
       private Iterator<LoggableProduct> productPage = Collections.emptyIterator();
 
       private DataStoreProductIterator(String filter, String orderBy, String collectionName,
-            String dataStoreName) throws StoreException
+            String dataStoreName, boolean safe) throws StoreException
       {
          this.filter = filter;
          this.orderBy = orderBy;
          this.collectionName = collectionName;
          this.dataStoreName = dataStoreName;
-
+         this.safe = safe;
          // fetch next page so that filter can be validated
          fetchNextPage();
       }
@@ -821,7 +825,7 @@ public class StoreService implements Store
             else
             {
                productUUIDsWithin = metadataStoreService
-                     .getProductUUIDsWithin(filter, orderBy, collectionName, dataStoreProductUUIDs);
+                     .getProductUUIDsWithin(filter, orderBy, collectionName, safe, dataStoreProductUUIDs);
             }
          } while (productUUIDsWithin.isEmpty());
 
diff --git a/core/src/main/java/org/dhus/store/datastore/AbstractDataStore.java b/core/src/main/java/org/dhus/store/datastore/AbstractDataStore.java
index 7f4846907..31796a1bb 100644
--- a/core/src/main/java/org/dhus/store/datastore/AbstractDataStore.java
+++ b/core/src/main/java/org/dhus/store/datastore/AbstractDataStore.java
@@ -24,6 +24,7 @@ import fr.gael.dhus.service.DataStoreService;
 import fr.gael.dhus.service.EvictionService;
 import fr.gael.dhus.spring.context.ApplicationContextProvider;
 
+import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 import java.util.concurrent.atomic.AtomicLong;
@@ -392,6 +393,11 @@ public abstract class AbstractDataStore implements DataStore, DerivedProductStor
       }
 
       String resource = product.getImpl(DataStoreProduct.class).getResourceLocation();
+      
+      if (resource == null)
+      {
+         LOGGER.debug("Cannot get resource for product {} ({})", uuid, tag);
+      }
       if (!canAccess(resource))
       {
          // throws new ProductNotFoundException ();
@@ -498,6 +504,26 @@ public abstract class AbstractDataStore implements DataStore, DerivedProductStor
       return name.hashCode() + restriction.hashCode() + priority;
    }
 
+   @Override
+   public Iterator<String> getScrollableProductResults()
+   {
+      final Iterator<KeyStoreEntry> resultsIter = keystore.getUnalteredScrollableProductEntries();
+      return new Iterator<String>()
+      {
+         @Override
+         public String next()
+         {
+            return resultsIter.next().getEntryKey();
+         }
+
+         @Override
+         public boolean hasNext()
+         {
+            return resultsIter.hasNext();
+         }
+      };
+   }
+
    @Override
    public List<String> getProductList()
    {
diff --git a/core/src/main/java/org/dhus/store/datastore/DataStore.java b/core/src/main/java/org/dhus/store/datastore/DataStore.java
index 0a86a3d36..ac468d8f4 100644
--- a/core/src/main/java/org/dhus/store/datastore/DataStore.java
+++ b/core/src/main/java/org/dhus/store/datastore/DataStore.java
@@ -19,6 +19,7 @@
  */
 package org.dhus.store.datastore;
 
+import java.util.Iterator;
 import java.util.List;
 
 import org.dhus.Product;
@@ -122,6 +123,13 @@ public interface DataStore extends Store, AutoCloseable
     */
    public default void deleteProductReference(String uuid) throws DataStoreException {} // Default No-Op implementation
 
+   /**
+    * Returns an iterator of products known to this DataStore.
+    *
+    * @return return a non-null iterator of products
+    */
+   public Iterator<String> getScrollableProductResults();
+
    /**
     * Returns a list of products known to this DataStore.
     *
diff --git a/core/src/main/java/org/dhus/store/datastore/DataStoreFactory.java b/core/src/main/java/org/dhus/store/datastore/DataStoreFactory.java
index 65e1d2c97..17516039f 100644
--- a/core/src/main/java/org/dhus/store/datastore/DataStoreFactory.java
+++ b/core/src/main/java/org/dhus/store/datastore/DataStoreFactory.java
@@ -1,6 +1,6 @@
 /*
  * Data Hub Service (DHuS) - For Space data distribution.
- * Copyright (C) 2017-2019 GAEL Systems
+ * Copyright (C) 2017-2020 GAEL Systems
  *
  * This file is part of DHuS software sources.
  *
@@ -19,28 +19,27 @@
  */
 package org.dhus.store.datastore;
 
-import com.codahale.metrics.MetricRegistry;
-
-import fr.gael.dhus.olingo.v1.visitor.ProductSQLVisitor;
-import fr.gael.dhus.service.SecurityService;
-import fr.gael.dhus.service.StoreQuotaService;
-import fr.gael.dhus.spring.context.ApplicationContextProvider;
-import fr.gael.dhus.system.config.ConfigurationManager;
-
 import java.io.IOException;
 import java.net.URISyntaxException;
 
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 import org.dhus.store.datastore.async.AsyncDataStore;
 import org.dhus.store.datastore.async.gmp.GmpDataStore;
+import org.dhus.store.datastore.async.lta.LtaDataStore;
+import org.dhus.store.datastore.async.onda.OndaDataStore;
 import org.dhus.store.datastore.async.pdgs.ParamPdgsDataStore;
 import org.dhus.store.datastore.async.pdgs.PdgsDataStore;
 import org.dhus.store.datastore.config.DataStoreConf;
 import org.dhus.store.datastore.config.DataStoreRestriction;
 import org.dhus.store.datastore.config.GmpDataStoreConf;
 import org.dhus.store.datastore.config.HfsDataStoreConf;
+import org.dhus.store.datastore.config.LtaDataStoreConf;
 import org.dhus.store.datastore.config.NamedDataStoreConf;
+import org.dhus.store.datastore.config.OndaDataStoreConf;
 import org.dhus.store.datastore.config.OpenStackDataStoreConf;
 import org.dhus.store.datastore.config.ParamPdgsDataStoreConf;
+import org.dhus.store.datastore.config.PatternReplace;
 import org.dhus.store.datastore.config.PdgsDataStoreConf;
 import org.dhus.store.datastore.config.RemoteDhusDataStoreConf;
 import org.dhus.store.datastore.hfs.HfsDataStore;
@@ -51,8 +50,18 @@ import org.dhus.store.filter.FilteredAsyncDataStore;
 import org.dhus.store.filter.FilteredDataStore;
 import org.dhus.store.quota.FetchLimiterAsyncDataStore;
 
+import com.codahale.metrics.MetricRegistry;
+
+import fr.gael.dhus.olingo.v1.visitor.ProductSQLVisitor;
+import fr.gael.dhus.service.SecurityService;
+import fr.gael.dhus.service.StoreQuotaService;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.system.config.ConfigurationManager;
+
 final public class DataStoreFactory
 {
+   private static final Logger LOGGER = LogManager.getLogger();
+
    private static final SecurityService SECURITY_SERVICE = ApplicationContextProvider.getBean(SecurityService.class);
    private static final StoreQuotaService STORE_QUOTA_SERVICE = ApplicationContextProvider.getBean(StoreQuotaService.class);
    private static final ConfigurationManager CFG_MGR = ApplicationContextProvider.getBean(ConfigurationManager.class);
@@ -80,6 +89,7 @@ final public class DataStoreFactory
       boolean autoEviction = configuration.isAutoEviction();
       String filter = configuration.getFilter();
       ProductSQLVisitor visitor = null;
+      DataStore cache = null;
 
       // synchronous data stores
       if (configuration instanceof NamedDataStoreConf)
@@ -166,11 +176,51 @@ final public class DataStoreFactory
          // asynchronous data stores
          if (configuration instanceof GmpDataStoreConf)
          {
-            GmpDataStoreConf conf = GmpDataStoreConf.class.cast(configuration);
+            GmpDataStoreConf gmpDataStoreConf = GmpDataStoreConf.class.cast(configuration);
+            DataStoreConf cacheConf = gmpDataStoreConf.getDataStore();
+            cache = getDataStoreCache(cacheConf, gmpDataStoreConf.getName());
+
             GmpDataStore gmpDs;
             try
             {
-               gmpDs = GmpDataStore.make(conf, getHashAlgorithms());
+               // patternReplaceIn default value
+               if (gmpDataStoreConf.getPatternReplaceIn() == null)
+               {
+                  PatternReplace patternReplaceIn = new PatternReplace();
+                  patternReplaceIn.setPattern("\\.SAFE$");
+                  patternReplaceIn.setReplacement("");
+                  gmpDataStoreConf.setPatternReplaceIn(patternReplaceIn);
+               }
+
+               // patternReplaceOut default value
+               if (gmpDataStoreConf.getPatternReplaceOut() == null)
+               {
+                  PatternReplace patternReplaceOut = new PatternReplace();
+                  patternReplaceOut.setPattern("$");
+                  patternReplaceOut.setReplacement(".SAFE");
+                  gmpDataStoreConf.setPatternReplaceOut(patternReplaceOut);
+               }
+
+               gmpDs = new GmpDataStore(
+                     gmpDataStoreConf.getName(),
+                     priority,
+                     gmpDataStoreConf.isIsMaster(),
+                     gmpDataStoreConf.getRepoLocation(),
+                     gmpDataStoreConf.getPatternReplaceIn(),
+                     gmpDataStoreConf.getPatternReplaceOut(),
+                     gmpDataStoreConf.getMaxPendingRequests(),
+                     gmpDataStoreConf.getMaxRunningRequests(),
+                     gmpDataStoreConf.getMysqlConnectionInfo().getValue(),
+                     gmpDataStoreConf.getMysqlConnectionInfo().getUser(),
+                     gmpDataStoreConf.getMysqlConnectionInfo().getPassword(),
+                     gmpDataStoreConf.getConfiguration().getAgentid(),
+                     gmpDataStoreConf.getConfiguration().getTargetid(),
+                     maximumSize,
+                     currentSize,
+                     autoEviction,
+                     getHashAlgorithms(),
+                     cache);
+
                METRIC_REGISTRY.registerAll(gmpDs);
             }
             catch (DataStoreException e)
@@ -178,13 +228,16 @@ final public class DataStoreFactory
                throw new InvalidConfigurationException(e.getMessage(), e);
             }
             AsyncDataStore asyncDataStore = gmpDs;
-            return asyncDecorator(asyncDataStore, conf.getMaxParallelFetchRequestsPerUser(), visitor);
+            return asyncDecorator(asyncDataStore, gmpDataStoreConf.getMaxParallelFetchRequestsPerUser(), visitor);
          }
 
          // checked BEFORE PdgsDataStoreConf since MetadataPdgsDataStoreConf extends it
          if(configuration instanceof ParamPdgsDataStoreConf)
          {
             ParamPdgsDataStoreConf paramPdgsConf = (ParamPdgsDataStoreConf) configuration;
+            DataStoreConf cacheConf = paramPdgsConf.getDataStore();
+            cache = getDataStoreCache(cacheConf, paramPdgsConf.getName());
+
             ParamPdgsDataStore paramPdgsDataStore;
             try
             {
@@ -192,7 +245,6 @@ final public class DataStoreFactory
                      paramPdgsConf.getName(),
                      paramPdgsConf.getPriority(),
                      paramPdgsConf.isIsMaster(),
-                     paramPdgsConf.getHfsLocation(),
                      paramPdgsConf.getPatternReplaceIn(),
                      paramPdgsConf.getPatternReplaceOut(),
                      paramPdgsConf.getMaxPendingRequests(),
@@ -206,6 +258,7 @@ final public class DataStoreFactory
                      paramPdgsConf.getInterval(),
                      paramPdgsConf.getMaxConcurrentsDownloads(),
                      getHashAlgorithms(),
+                     cache,
                      paramPdgsConf.getUrlParamPattern(),
                      paramPdgsConf.getProductNamePattern());
             }
@@ -220,6 +273,9 @@ final public class DataStoreFactory
          if (configuration instanceof PdgsDataStoreConf)
          {
             PdgsDataStoreConf pdgsDataStoreConf = (PdgsDataStoreConf) configuration;
+            DataStoreConf cacheConf = pdgsDataStoreConf.getDataStore();
+            cache = getDataStoreCache(cacheConf, pdgsDataStoreConf.getName());
+
             PdgsDataStore pdgsDataStore;
             try
             {
@@ -227,7 +283,6 @@ final public class DataStoreFactory
                      pdgsDataStoreConf.getName(),
                      pdgsDataStoreConf.getPriority(),
                      pdgsDataStoreConf.isIsMaster(),
-                     pdgsDataStoreConf.getHfsLocation(),
                      pdgsDataStoreConf.getPatternReplaceIn(),
                      pdgsDataStoreConf.getPatternReplaceOut(),
                      pdgsDataStoreConf.getMaxPendingRequests(),
@@ -240,7 +295,8 @@ final public class DataStoreFactory
                      pdgsDataStoreConf.getPassword(),
                      pdgsDataStoreConf.getInterval(),
                      pdgsDataStoreConf.getMaxConcurrentsDownloads(),
-                     getHashAlgorithms());
+                     getHashAlgorithms(),
+                     cache);
                METRIC_REGISTRY.registerAll(pdgsDataStore);
             }
             catch (URISyntaxException | IOException e)
@@ -250,10 +306,110 @@ final public class DataStoreFactory
             AsyncDataStore asyncDataStore = pdgsDataStore;
             return asyncDecorator(asyncDataStore, pdgsDataStoreConf.getMaxParallelFetchRequestsPerUser(), visitor);
          }
+
+         if (configuration instanceof LtaDataStoreConf)
+         {
+            LtaDataStoreConf ltaDataStoreConf = (LtaDataStoreConf) configuration;
+            DataStoreConf cacheConf = ltaDataStoreConf.getDataStore();
+            cache = getDataStoreCache(cacheConf, ltaDataStoreConf.getName());
+
+            LtaDataStore ltaDataStore;
+            try
+            {
+               ltaDataStore = new LtaDataStore(
+                     ltaDataStoreConf.getName(),
+                     ltaDataStoreConf.getPriority(),
+                     ltaDataStoreConf.isIsMaster(),
+                     ltaDataStoreConf.getPatternReplaceIn(),
+                     ltaDataStoreConf.getPatternReplaceOut(),
+                     ltaDataStoreConf.getMaxPendingRequests(),
+                     ltaDataStoreConf.getMaxRunningRequests(),
+                     ltaDataStoreConf.getMaximumSize(),
+                     ltaDataStoreConf.getCurrentSize(),
+                     ltaDataStoreConf.isAutoEviction(),
+                     ltaDataStoreConf.getServiceUrl(),
+                     ltaDataStoreConf.getLogin(),
+                     ltaDataStoreConf.getPassword(),
+                     ltaDataStoreConf.getInterval(),
+                     ltaDataStoreConf.getMaxConcurrentsDownloads(),
+                     getHashAlgorithms(),
+                     cache,
+                     ltaDataStoreConf.isOrder());
+            }
+            catch (URISyntaxException | IOException | InterruptedException e)
+            {
+               throw new InvalidConfigurationException(e.getMessage(), e);
+            }
+            AsyncDataStore asyncDataStore = ltaDataStore;
+            return asyncDecorator(asyncDataStore, ltaDataStoreConf.getMaxParallelFetchRequestsPerUser(), visitor);
+         }
+
+         if (configuration instanceof OndaDataStoreConf)
+         {
+            OndaDataStoreConf ondaDataStoreConf = (OndaDataStoreConf) configuration;
+            DataStoreConf cacheConf = ondaDataStoreConf.getDataStore();
+            cache = getDataStoreCache(cacheConf, ondaDataStoreConf.getName());
+
+            OndaDataStore ondaDataStore;
+            try
+            {
+               ondaDataStore = new OndaDataStore(
+                     ondaDataStoreConf,
+                     getHashAlgorithms(),
+                     cache);
+            }
+            catch (URISyntaxException | IOException | InterruptedException e)
+            {
+               throw new InvalidConfigurationException(e.getMessage(), e);
+            }
+            AsyncDataStore asyncDataStore = ondaDataStore;
+            return asyncDecorator(asyncDataStore, ondaDataStoreConf.getMaxParallelFetchRequestsPerUser(), visitor);
+         }
+
       }
       throw new InvalidConfigurationException("Invalid or unsupported dataStore configuration");
    }
 
+   private static DataStore getDataStoreCache(DataStoreConf cacheConf, String asyncDataStoreName)
+   {
+      if (cacheConf == null)
+      {
+         LOGGER.warn("The cache of the asyncdatastore {} is null", asyncDataStoreName);
+      }
+      else if (cacheConf instanceof HfsDataStoreConf)
+      {
+         HfsDataStoreConf hfsConf = (HfsDataStoreConf) cacheConf;
+         return new HfsDataStore(
+               hfsConf.getName(),
+               new HfsManager(hfsConf.getPath(), hfsConf.getMaxFileNo(), hfsConf.getMaxItems()),
+               hfsConf.getRestriction(),
+               hfsConf.getPriority(),
+               hfsConf.getMaximumSize(),
+               hfsConf.getCurrentSize(),
+               hfsConf.isAutoEviction(),
+               getHashAlgorithms());
+      }
+      else if (cacheConf instanceof OpenStackDataStoreConf)
+      {
+         OpenStackDataStoreConf openStackConf = (OpenStackDataStoreConf) cacheConf;
+         return new OpenStackDataStore(
+               openStackConf.getName(),
+               openStackConf.getProvider(),
+               openStackConf.getIdentity(),
+               openStackConf.getCredential(),
+               openStackConf.getUrl(),
+               openStackConf.getContainer(),
+               openStackConf.getRegion(),
+               openStackConf.getRestriction(),
+               openStackConf.getPriority(),
+               openStackConf.getMaximumSize(),
+               openStackConf.getCurrentSize(),
+               openStackConf.isAutoEviction(),
+               getHashAlgorithms());
+      }
+      return null;
+   }
+
    private static AsyncDataStore asyncDecorator(AsyncDataStore asyncDataStore, Integer maxQueryPerUser, ProductSQLVisitor visitor)
          throws InvalidConfigurationException
    {
diff --git a/core/src/main/java/org/dhus/store/datastore/DataStoreManager.java b/core/src/main/java/org/dhus/store/datastore/DataStoreManager.java
index 9819bb2cd..3bcf9efab 100644
--- a/core/src/main/java/org/dhus/store/datastore/DataStoreManager.java
+++ b/core/src/main/java/org/dhus/store/datastore/DataStoreManager.java
@@ -62,10 +62,7 @@ public interface DataStoreManager extends DataStore
     * @param name of the DataStore
     * @return the instance or {@code null}
     */
-   public default DataStore getDataStoreByName(String name)
-   {
-      return list().stream().filter(dataStore -> dataStore.getName().equals(name)).findFirst().orElse(null);
-   }
+   public DataStore getDataStoreByName(String name);
 
    /**
     * Deletes a product from all the DataStores managed by this service.
@@ -75,7 +72,7 @@ public interface DataStoreManager extends DataStore
     * @throws DataStoreException could not perform operation
     */
    // TODO remove destination from parameters and handle it in DataStoreManager implementation
-   public void deleteProduct(String uuid, Destination destination) throws DataStoreException;
+   public void deleteProduct(String uuid, Destination destination, boolean safeMode) throws DataStoreException;
 
    /**
     * Delete the product from the DataStore
diff --git a/core/src/main/java/org/dhus/store/datastore/DefaultDataStoreManager.java b/core/src/main/java/org/dhus/store/datastore/DefaultDataStoreManager.java
index 37df9acb7..dccc7fbf3 100644
--- a/core/src/main/java/org/dhus/store/datastore/DefaultDataStoreManager.java
+++ b/core/src/main/java/org/dhus/store/datastore/DefaultDataStoreManager.java
@@ -19,12 +19,6 @@
  */
 package org.dhus.store.datastore;
 
-import fr.gael.dhus.database.object.KeyStoreEntry;
-import fr.gael.dhus.datastore.Destination;
-import fr.gael.dhus.service.KeyStoreService;
-import fr.gael.dhus.spring.context.ApplicationContextProvider;
-import fr.gael.dhus.system.config.ConfigurationManager;
-
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -34,6 +28,7 @@ import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -43,10 +38,8 @@ import java.util.concurrent.ConcurrentSkipListSet;
 import java.util.stream.Collectors;
 
 import org.apache.commons.io.IOUtils;
-
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
 import org.dhus.Product;
 import org.dhus.ProductConstants;
 import org.dhus.store.StoreException;
@@ -58,6 +51,12 @@ import org.dhus.store.derived.DerivedProductStoreService;
 import org.dhus.store.ingestion.IngestibleProduct;
 import org.springframework.beans.factory.annotation.Autowired;
 
+import fr.gael.dhus.database.object.KeyStoreEntry;
+import fr.gael.dhus.datastore.Destination;
+import fr.gael.dhus.service.KeyStoreService;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.system.config.ConfigurationManager;
+
 /**
  * This class implements the default DataStore container that is constructed according to aggregated DataStores.
  * The execution of this DataStore commands will automatically be propagated to the handled DataStores.
@@ -85,7 +84,7 @@ public class DefaultDataStoreManager implements DataStoreManager, DerivedProduct
    public Product get(String uuid) throws DataStoreException
    {
       LOGGER.debug("Finding product {} in data stores...", uuid);
-      List<DataStore> datastoreList = listForUuid(uuid, true);
+      List<DataStore> datastoreList = listForUuid(uuid, true, true);
       for (DataStore datastore : datastoreList)
       {
          try
@@ -188,24 +187,39 @@ public class DefaultDataStoreManager implements DataStoreManager, DerivedProduct
    @Override
    public void deleteProduct(String uuid) throws DataStoreException
    {
-      deleteProduct(uuid, Destination.NONE);
+      deleteProduct(uuid, Destination.NONE, false);
    }
 
    @Override
-   public void deleteProduct(String uuid, Destination destination) throws DataStoreException
+   public void deleteProduct(String uuid, Destination destination, boolean safeMode) throws DataStoreException
    {
-      // attempt to move product to destination
-      makeBackupProduct(uuid, destination);
-
-      LOGGER.info("Deleting product {} from all DataStores", uuid);
-
-      // get list of products
-      List<DataStore> datastoreList = listForUuid(uuid, false);
-
+      LOGGER.info("Deleting product {} from all DataStores - safe : {}", uuid, safeMode);
+      
       List<Throwable> throwables = new ArrayList<>();
       boolean deleted = false;
       int count = 0;
-      for (DataStore datastore: datastoreList)
+      List<DataStore> datastoreList;
+
+      if (safeMode)
+      {
+         // get list of datastores in safeMode
+         SortedSet<DataStore> dataStores = getDataStoresInSafeMode(uuid);
+         datastoreList = dataStores.stream().collect(Collectors.toList());
+         // attempt to move product to destination
+         if (dataStores.size() == 0)
+         {
+            throw new ProductNotFoundException();
+         }
+         makeBackupProduct(uuid, destination, null, dataStores);
+      }
+      else
+      {
+         // get list of dataStores
+         datastoreList = listForUuid(uuid, false, false);
+         // attempt to move product to destination
+         makeBackupProduct(uuid, destination, null, null);
+      }
+      for (DataStore datastore : datastoreList)
       {
          try
          {
@@ -234,7 +248,14 @@ public class DefaultDataStoreManager implements DataStoreManager, DerivedProduct
       DataStores.throwErrors(throwables, "deleteProduct", uuid);
    }
 
-   private void makeBackupProduct(String uuid, Destination destination)
+   /**
+    * 
+    * @param uuid UUID of product to backup
+    * @param destination backup destination
+    * @param dataStoreName target dataStore from where the product will be removed
+    * @param allowedDatastores allowed datastores to be used to backup the product
+    */
+   private void makeBackupProduct(String uuid, Destination destination, String dataStoreName, Set<DataStore> allowedDatastores)
    {
       if (destination.equals(Destination.NONE))
       {
@@ -249,36 +270,79 @@ public class DefaultDataStoreManager implements DataStoreManager, DerivedProduct
 
       LOGGER.info("Moving product {} data to destination {}", uuid, destination);
       Exception exception = new ProductNotFoundException();
-      // we assume the optimal way to make a backup product during a deletion
-      // is to use an HFSDataStore that isn't read-only
-      for (DataStore dataStore: datastores)
+      
+      if (dataStoreName != null)
+      {
+         LOGGER.info("Try to backup product {} from datastore {}", uuid, dataStoreName);
+         DataStore datastore = getDataStoreByName(dataStoreName);
+         exception = processHfsDataStore(uuid, destination, exception, datastore);
+         if (exception == null)
+         {
+            return;
+         }
+         exception = processOtherDataStore(uuid, destination, exception, datastore);
+         if (exception == null)
+         {
+            return;
+         }
+      }
+      else
       {
-         if (dataStore instanceof HfsDataStore && dataStore.hasProduct(uuid))
+         // we assume the optimal way to make a backup product during a deletion
+         // is to use an HFSDataStore that isn't read-only
+         LOGGER.info("Try to backup product {} from {} datastores", uuid, ((allowedDatastores == null || allowedDatastores.size() == 0) ? "ALL" : "some"));         
+         for (DataStore dataStore : ((allowedDatastores == null || allowedDatastores.size() == 0) ? datastores : allowedDatastores))
          {
-            HfsDataStore hfsStore = (HfsDataStore) dataStore;
-            if (hfsStore.getRestriction() == DataStoreRestriction.NONE)
+            exception = processHfsDataStore(uuid, destination, exception, dataStore);
+            if (exception == null)
             {
-               try
-               {
-                  moveProduct((HfsDataStore) dataStore, uuid, destination);
-                  return;
-               }
-               catch (DataStoreException | IOException e)
-               {
-                  exception = e;
-               }
+               return;
+            }
+         }
+         // no suitable HFSDataStore was found, use any datastore that has the product
+         for (DataStore dataStore : datastores)
+         {
+            exception = processOtherDataStore(uuid, destination, exception, dataStore);
+            if (exception == null)
+            {
+               return;
             }
          }
       }
-      // no suitable HFSDataStore was found, use any datastore that has the product
-      for (DataStore dataStore: datastores)
+      LOGGER.warn("Cannot retrieve data of product {}: {}", uuid, exception.getMessage());
+   }
+
+   private Exception processOtherDataStore(String uuid, Destination destination, Exception exception,
+         DataStore dataStore)
+   {
+      if (dataStore.hasProduct(uuid))
       {
-         if (dataStore.hasProduct(uuid))
+         try
+         {
+            copyProduct(dataStore, uuid, destination);
+            LOGGER.info("The product uuid {} copied to destination {}", uuid, destination.name());
+            return null;
+         }
+         catch (DataStoreException | IOException e)
+         {
+            exception = e;
+         }
+      }
+      return exception;
+   }
+
+   private Exception processHfsDataStore(String uuid, Destination destination, Exception exception, DataStore dataStore)
+   {
+      if (dataStore instanceof HfsDataStore && dataStore.hasProduct(uuid))
+      {
+         HfsDataStore hfsStore = (HfsDataStore) dataStore;
+         if (hfsStore.getRestriction() == DataStoreRestriction.NONE)
          {
             try
             {
-               copyProduct(dataStore, uuid, destination);
-               return;
+               moveProduct((HfsDataStore) dataStore, uuid, destination);
+               LOGGER.info("The product uuid {} moved to {}", uuid, destination.name());
+               return null;
             }
             catch (DataStoreException | IOException e)
             {
@@ -286,7 +350,7 @@ public class DefaultDataStoreManager implements DataStoreManager, DerivedProduct
             }
          }
       }
-      LOGGER.warn("Cannot retrieve data of product {}: {}", uuid, exception.getMessage());
+      return exception;
    }
 
    private void moveProduct(HfsDataStore dataStore, String uuid, Destination destination) throws DataStoreException, IOException
@@ -373,7 +437,7 @@ public class DefaultDataStoreManager implements DataStoreManager, DerivedProduct
    public boolean hasProduct(String uuid)
    {
       // get list of products
-      List<DataStore> datastoreList = listForUuid(uuid, false);
+      List<DataStore> datastoreList = listForUuid(uuid, false, false);
       // at least one datastore has the product if not empty
       return !datastoreList.isEmpty();
    }
@@ -695,7 +759,7 @@ public class DefaultDataStoreManager implements DataStoreManager, DerivedProduct
          throw new UnsafeDeletionException();
       }
 
-      makeBackupProduct(uuid, destination);
+      makeBackupProduct(uuid, destination, dataStoreName, null);
 
       // delete the product
       dataStore.deleteProduct(uuid);
@@ -713,11 +777,29 @@ public class DefaultDataStoreManager implements DataStoreManager, DerivedProduct
       return false;
    }
 
+   private SortedSet<DataStore> getDataStoresInSafeMode(String uuid)
+   {
+      List<DataStore> datastoreList = listForUuid(uuid, false, false);
+      // The product will be kept in the lowest priority DataStore
+      SortedSet<DataStore> dataStores = new ConcurrentSkipListSet<>(datastores.comparator().reversed());
+      dataStores.addAll(datastoreList);
+
+      for (DataStore dataStore : dataStores)
+      {
+         if (dataStore.hasProduct(uuid))
+         {
+            dataStores.remove(dataStore);
+            return dataStores;
+         }
+      }
+      return dataStores;
+   }
+
    @Override
    public Map<String, String> getResourceLocations(String uuid) throws DataStoreException
    {
       // get list
-      List<DataStore> datastoreList = listForUuid(uuid, false);
+      List<DataStore> datastoreList = listForUuid(uuid, true, false);
 
       Map<String, String> locations = new HashMap<>();
       for (DataStore datastore: datastoreList)
@@ -754,7 +836,29 @@ public class DefaultDataStoreManager implements DataStoreManager, DerivedProduct
       return false;
    }
 
-   private List<DataStore> listForUuid(String uuid, boolean includeAsync)
+   @Override
+   public DataStore getDataStoreByName(String name)
+   {
+      for (DataStore datastore : list())
+      {
+         if (datastore instanceof AsyncDataStore)
+         {
+            DataStore cache = ((AsyncDataStore) datastore).getCache();
+            if (cache.getName().equals(name))
+            {
+               return cache;
+            }
+         }
+
+         if (datastore.getName().equals(name))
+         {
+            return datastore;
+         }
+      }
+      return null;
+   }
+
+   private List<DataStore> listForUuid(String uuid, boolean includeAsync, boolean order)
    {
       Set<String> datastoreNames = keyStoreService.listUnalteredForUuid(uuid).stream()
             .map(KeyStoreEntry::getKeyStore)
@@ -777,8 +881,13 @@ public class DefaultDataStoreManager implements DataStoreManager, DerivedProduct
                }
                // case of async data stores if included
                if (includeAsync
+                     && AsyncDataStore.class.isAssignableFrom(datastore.getClass()) && order == true) 
+                     {
+                       return true;
+                     }               
+               else if (includeAsync
                      && AsyncDataStore.class.isAssignableFrom(datastore.getClass())
-                     && AsyncDataStore.class.cast(datastore).hasAsyncProduct(uuid))
+                     && (AsyncDataStore.class.cast(datastore).hasProduct(uuid))) 
                {
                   LOGGER.debug("Found async product in {}", datastore.getName());
                   // do NOT put async products in registry
@@ -822,4 +931,10 @@ public class DefaultDataStoreManager implements DataStoreManager, DerivedProduct
             })
             .collect(Collectors.toList());
    }
+
+   @Override
+   public Iterator<String> getScrollableProductResults()
+   {
+      return null;
+   }
 }
diff --git a/core/src/main/java/org/dhus/store/datastore/ProductOfflineReference.java b/core/src/main/java/org/dhus/store/datastore/ProductOfflineReference.java
new file mode 100644
index 000000000..497d6a3db
--- /dev/null
+++ b/core/src/main/java/org/dhus/store/datastore/ProductOfflineReference.java
@@ -0,0 +1,69 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2016,2017 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.store.datastore;
+
+import org.dhus.AbstractProduct;
+
+/**
+ * An instance of product knowing just its resource location.
+ */
+public class ProductOfflineReference extends AbstractProduct implements DataStoreProduct
+{
+   /** Resource location referencing a product. */
+   private final String productResourceLocation;
+
+   /**
+    * Creates an instance of offline product with the given resource location.
+    *
+    * @param product_resource_location reference to a product
+    */
+   public ProductOfflineReference(String product_resource_location)
+   {
+      this.productResourceLocation = product_resource_location;
+   }
+
+   @Override
+   public Long getContentLength()
+   {
+      throw new UnsupportedOperationException();
+   }
+
+   @Override
+   public String getResourceLocation()
+   {
+      return productResourceLocation;
+   }
+
+   @Override
+   public boolean hasImpl(Class<?> cl)
+   {
+      return cl.isAssignableFrom(DataStoreProduct.class);
+   }
+
+   @Override
+   public <T> T getImpl(Class<? extends T> cl)
+   {
+      if (hasImpl(cl))
+      {
+         return cl.cast(this);
+      }
+      return null;
+   }
+}
diff --git a/core/src/main/java/org/dhus/store/datastore/async/AbstractAsyncCachedDataStore.java b/core/src/main/java/org/dhus/store/datastore/async/AbstractAsyncCachedDataStore.java
index 2e623db5e..180ba5bb3 100644
--- a/core/src/main/java/org/dhus/store/datastore/async/AbstractAsyncCachedDataStore.java
+++ b/core/src/main/java/org/dhus/store/datastore/async/AbstractAsyncCachedDataStore.java
@@ -21,6 +21,7 @@ package org.dhus.store.datastore.async;
 
 import java.util.Date;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
@@ -32,14 +33,12 @@ import org.dhus.Product;
 import org.dhus.ProductConstants;
 import org.dhus.api.JobStatus;
 import org.dhus.store.StoreException;
+import org.dhus.store.datastore.DataStore;
 import org.dhus.store.datastore.DataStoreException;
 import org.dhus.store.datastore.ProductAlreadyExist;
 import org.dhus.store.datastore.ProductNotFoundException;
 import org.dhus.store.datastore.ReadOnlyDataStoreException;
-import org.dhus.store.datastore.config.DataStoreRestriction;
 import org.dhus.store.datastore.config.PatternReplace;
-import org.dhus.store.datastore.hfs.HfsDataStore;
-import org.dhus.store.datastore.hfs.HfsManager;
 import org.dhus.store.ingestion.IngestibleProduct;
 
 import com.codahale.metrics.Gauge;
@@ -48,6 +47,7 @@ import com.codahale.metrics.Metric;
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.MetricSet;
 
+import fr.gael.dhus.database.object.KeyStoreEntry;
 import fr.gael.dhus.database.object.Order;
 import fr.gael.dhus.database.object.User;
 import fr.gael.dhus.service.OrderService;
@@ -66,15 +66,15 @@ public abstract class AbstractAsyncCachedDataStore implements AsyncDataStore, Me
    protected static final ProductService PRODUCT_SERVICE =
          ApplicationContextProvider.getBean(ProductService.class);
 
-   private static final OrderService ORDER_SERVICE =
+   protected static final OrderService ORDER_SERVICE =
          ApplicationContextProvider.getBean(OrderService.class);
 
-   /** Local HFS cache. */
-   private final HfsDataStore cache;
-
    protected static final SecurityService SECURITY_SERVICE =
          ApplicationContextProvider.getBean(SecurityService.class);
 
+   /** DataStore cache. */
+   private final DataStore cache;
+
    /* Data Store identifier. */
    private final String name;
 
@@ -93,6 +93,9 @@ public abstract class AbstractAsyncCachedDataStore implements AsyncDataStore, Me
    /* Maximum pending requests that this data store can submit to its remote */
    private final int maxRunningRequests;
 
+   /* Current Size*/
+   private final long currentSize;
+
    /** Metric Set. */
    private final HashMap<String, Metric> metricSet;
    private final Meter getRate = new Meter();
@@ -102,12 +105,12 @@ public abstract class AbstractAsyncCachedDataStore implements AsyncDataStore, Me
    private final Meter refusedFetchRate = new Meter();
 
 
-   protected AbstractAsyncCachedDataStore(String name, int priority, String hfsLocation,
-         PatternReplace patternReplaceIn, PatternReplace patternReplaceOut, Integer maxPendingRequests, Integer maxRunningRequests,
-         long maximumSize, long currentSize, boolean autoEviction, String[] hashAlgorithms)
+   protected AbstractAsyncCachedDataStore(String name, int priority, PatternReplace patternReplaceIn,
+         PatternReplace patternReplaceOut, Integer maxPendingRequests, Integer maxRunningRequests,
+         long maximumSize, long currentSize, boolean autoEviction, String[] hashAlgorithms,
+         DataStore cache)
    {
       LOGGER.info("Initializing {}...", name);
-      Objects.requireNonNull(hfsLocation);
       Objects.requireNonNull(name);
 
       this.name = name;
@@ -125,21 +128,16 @@ public abstract class AbstractAsyncCachedDataStore implements AsyncDataStore, Me
       /* setting the HFS cache's name as this GMPDataStore's name allows the
        * cache to update this GMPDataStore's database entry (currentSize) when
        * products are inserted or evicted on a cache level */
-      this.cache = new HfsDataStore(
-            this.name,
-            new HfsManager(hfsLocation, 10, 1024),
-            DataStoreRestriction.NONE,
-            0, // unused
-            maximumSize,
-            currentSize,
-            autoEviction,
-            hashAlgorithms);
+
+      this.currentSize = currentSize;
+
+      this.cache = cache;
 
       metricSet = new HashMap<>();
       metricSet.put(MetricRegistry.name(METRIC_PREFIX, getName(), "gets"), getRate);
       metricSet.put(MetricRegistry.name(METRIC_PREFIX, getName(), "cache.hits"), cacheHit);
       metricSet.put(MetricRegistry.name(METRIC_PREFIX, getName(), "restores"), restoreRate);
-      metricSet.put(MetricRegistry.name(METRIC_PREFIX, getName(), "cache.size"), (Gauge<Long>)cache::getCurrentSize);
+      metricSet.put(MetricRegistry.name(METRIC_PREFIX, getName(), "cache.size"), (Gauge<Long>)this::currentSize);
       metricSet.put(MetricRegistry.name(METRIC_PREFIX, getName(), "queue.size"), (Gauge<Integer>)this::queueSize);
       metricSet.put(MetricRegistry.name(METRIC_PREFIX, getName(), "fetches.accepted"), acceptedFetchRate);
       metricSet.put(MetricRegistry.name(METRIC_PREFIX, getName(), "fetches.refused"), refusedFetchRate);
@@ -193,6 +191,8 @@ public abstract class AbstractAsyncCachedDataStore implements AsyncDataStore, Me
       }
       return ORDER_SERVICE.getOrder(order.getOrderId());
    }
+   
+   public void validateProduct(Product product, String uuid) throws DataStoreException {}
 
    /**
     * Method called by {@link #fetch(AsyncProduct)} after it has applied the Out pattern on the
@@ -281,6 +281,12 @@ public abstract class AbstractAsyncCachedDataStore implements AsyncDataStore, Me
       return false;
    }
 
+   @Override
+   public Iterator<String> getScrollableProductResults()
+   {
+      return cache.getScrollableProductResults();
+   }
+
    @Override
    public List<String> getProductList()
    {
@@ -321,12 +327,22 @@ public abstract class AbstractAsyncCachedDataStore implements AsyncDataStore, Me
             throw ex;
          }
 
+         validateProduct(product, uuid);
+         
          // Set online, checksum and content length in database
          long size = (Long) product.getProperty(ProductConstants.DATA_SIZE);
          PRODUCT_SERVICE.restoreProduct(uuid, (Long) product.getProperty(ProductConstants.DATA_SIZE), ProductConstants.getChecksums(product));
          LOGGER.info("Product {} ({}) ({} bytes) successfully restored", product.getName(), uuid, size);
          restoreRate.mark();
       }
+      catch (BadlySizedProductException ex)
+      {
+         // particular case of product that shall be removed of cache
+         cache.deleteProduct(uuid);
+         LOGGER.error("Cannot move product {} ({}) to cache", product.getName(), uuid, ex);
+         LOGGER.error("Product {} ({}) could not be restored", product.getName(), uuid);
+         throw ex;
+      }
       catch (DataStoreException ex)
       {
          LOGGER.error("Cannot move product {} ({}) to cache", product.getName(), uuid, ex);
@@ -411,6 +427,17 @@ public abstract class AbstractAsyncCachedDataStore implements AsyncDataStore, Me
       }
    }
 
+   /**
+    * Does the given product exist in the cache backing this async dataStore?
+    *
+    * @param productUUID a non null product UUID
+    * @return true if the product physically exists in the HFS or OpenStack cache
+    */
+   protected boolean existsInCache(String productUUID)
+   {
+      return cache.hasProduct(productUUID);
+   }
+
    /**
     * A task to ingest successfully fetched data.
     */
@@ -428,44 +455,40 @@ public abstract class AbstractAsyncCachedDataStore implements AsyncDataStore, Me
          return product != null ? product.getUuid() : null;
       }
 
-      /**
-       * Does the given product exist in the cache backing this async dataStore?
-       *
-       * @param productUUID a non null product UUID
-       * @return true if the product physically exists in the HFS cache
-       */
-      protected boolean existsInCache(String productUUID)
-      {
-         return cache.hasProduct(productUUID);
-      }
-
       @Override
       public void run()
       {
-         LOGGER.debug("{} - Starting order management routine...", getName());
-         LOGGER.debug("{} - Checking pending orders", getName());
-         List<Order> pendingOrders = ORDER_SERVICE.getPendingOrdersByDataStore(getName());
-         for (Order pendingOrder: pendingOrders)
+         try
          {
-            try
+            LOGGER.debug("{} - Starting order management routine...", getName());
+            LOGGER.debug("{} - Checking pending orders", getName());
+            List<Order> pendingOrders = ORDER_SERVICE.getPendingOrdersByDataStore(getName());
+            for (Order pendingOrder: pendingOrders)
             {
-               startOrder (pendingOrder);
+               try
+               {
+                  startOrder (pendingOrder);
+               }
+               catch (DataStoreException ex)
+               {
+                  LOGGER.debug("{} - Maximum number of running order reached", getName());
+                  break;
+               }
             }
-            catch (DataStoreException ex)
+
+            LOGGER.debug("{} - Retrieving completed orders", getName());
+            int ingested;
+            do
             {
-               LOGGER.debug("{} - Maximum number of running order reached", getName());
-               break;
+               ingested = ingestCompletedFetches();
             }
+            while (ingested > 0);
+            LOGGER.debug("{} - Finished order management routine.", getName());
          }
-
-         LOGGER.debug("{} - Retrieving completed orders", getName());
-         int ingested;
-         do
+         catch (RuntimeException ex) // catch runtime to prevent the timer from crashing
          {
-            ingested = ingestCompletedFetches();
+            LOGGER.error("Failed to retrieve new state of Jobs in {}", getName(), ex);
          }
-         while (ingested > 0);
-         LOGGER.debug("{} - Finished order management routine.", getName());
       }
 
       /**
@@ -548,6 +571,11 @@ public abstract class AbstractAsyncCachedDataStore implements AsyncDataStore, Me
       return ORDER_SERVICE.countRunningOrdersByDataStore(getName());
    }
 
+   private long currentSize()
+   {
+      return currentSize;
+   }
+
    /**
     * Returns existing order and logs its existence/presence in the queue.
     * Required by operations.
@@ -604,4 +632,10 @@ public abstract class AbstractAsyncCachedDataStore implements AsyncDataStore, Me
    {
       return cache.hasKeyStore();
    }
+
+   @Override
+   public DataStore getCache()
+   {
+      return cache;
+   }
 }
diff --git a/core/src/main/java/org/dhus/store/datastore/async/AbstractHttpAsyncDataStore.java b/core/src/main/java/org/dhus/store/datastore/async/AbstractHttpAsyncDataStore.java
new file mode 100644
index 000000000..bd21dca05
--- /dev/null
+++ b/core/src/main/java/org/dhus/store/datastore/async/AbstractHttpAsyncDataStore.java
@@ -0,0 +1,321 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.store.datastore.async;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URISyntaxException;
+import java.util.Date;
+import java.util.Objects;
+import java.util.Timer;
+import java.util.UUID;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.olingo.client.api.domain.ClientEntity;
+import org.apache.olingo.client.api.domain.ClientEntitySet;
+import org.apache.olingo.client.api.domain.ClientEntitySetIterator;
+import org.dhus.api.JobStatus;
+import org.dhus.olingo.v2.OData4Client;
+import org.dhus.olingo.v2.datamodel.ProductModel;
+import org.dhus.store.OrderException;
+import org.dhus.store.datastore.DataStore;
+import org.dhus.store.datastore.DataStoreException;
+import org.dhus.store.datastore.StreamableProduct;
+import org.dhus.store.datastore.async.AsyncDataStoreException.ProductNotFoundException;
+import org.dhus.store.datastore.async.pdgs.ParallelProductDownloadManager;
+import org.dhus.store.datastore.config.PatternReplace;
+
+import fr.gael.dhus.database.object.Order;
+import fr.gael.dhus.database.object.Product;
+
+public abstract class AbstractHttpAsyncDataStore extends AbstractAsyncCachedDataStore
+{
+   protected static final Logger LOGGER = LogManager.getLogger();
+
+   protected static final String PROPERTY_ID = "Id";
+   protected static final String PROPERTY_ID_ONDA = "id";
+   protected static final String PROPERTY_NAME = "Name";
+   protected static final String PROPERTY_NAME_ONDA = "name";
+   protected static final String ORDER_ENTITY_SET_NAME = "Orders";
+   protected static final String PROPERTY_ONLINE = "Online";
+   protected static final String PROPERTY_OFFLINE = "offline";
+   private static final String STATUS_RUNNING_ONDA = "RUNNING";
+   private static final String STATUS_COMPLETED_ONDA = "COMPLETED";
+   private static final String STATUS_FAILED_ONDA = "FAILED";
+   private static final String STATUS_UNKNWON_ONDA = "UNKNWON";
+   private static final String STATUS_COMPLETED = "completed";
+   private static final String STATUS_IN_PROGRESS = "in_progress";
+   private static final String STATUS_FAILED = "failed";
+   private static final String STATUS_CANCELLED = "cancelled";
+   private static final String STATUS_QUEUED = "queued";
+
+   protected final OData4Client client;
+   protected final ParallelProductDownloadManager parallelProductDownloadManager;
+
+   //TODO is this the right place????
+   /* Ingest Job. */
+   protected Timer timer;
+
+   // Optional order
+   private boolean order;
+
+   public AbstractHttpAsyncDataStore(String name, int priority, boolean isManager,
+         PatternReplace patternReplaceIn, PatternReplace patternReplaceOut,
+         Integer maxPendingRequests, Integer maxRunningRequests, long maximumSize, long currentSize,
+         boolean autoEviction, String urlService, String login, String password, long interval,
+         int maxConcurrentsDownloads, String[] hashAlgorithms, DataStore cache, boolean order)
+         throws URISyntaxException, IOException, InterruptedException
+   {
+      super(name, priority, patternReplaceIn, patternReplaceOut, maxPendingRequests, maxRunningRequests,
+            maximumSize, currentSize, autoEviction, hashAlgorithms, cache);
+
+      Objects.requireNonNull(urlService, "A required UrlService is missing");
+
+      client = new OData4Client(urlService, login, password);
+
+      parallelProductDownloadManager = new ParallelProductDownloadManager(maxConcurrentsDownloads);
+      
+      this.order = order;
+   }
+
+   @Override
+   public Order fetch(AsyncProduct to_fetch) throws DataStoreException
+   {
+      if (order == false)
+      {
+         throw new OrderException("The product " + to_fetch.getName() + " cannot be ordered");
+      }
+      else
+      {
+         return super.fetch(to_fetch);
+      }
+   }
+   
+   @Override
+   protected Order internalFetch(String localIdentifier, String remoteIdentifier, String uuid,
+         Long size) throws DataStoreException
+   {
+      ClientEntitySetIterator<ClientEntitySet, ClientEntity> entities = readEntitySet(localIdentifier);
+
+      while (entities.hasNext())
+      {
+         ClientEntity productEntity = entities.next();
+         if (productEntity != null)
+         {
+            String uuidProprty = getUuidProperty(productEntity);
+            String nameProperty = getProductNameProperty(productEntity);
+            String proprtyOnline = getOnlineProperty(productEntity);
+
+            String productUuid = AbstractHttpJob.getPropertyValue(productEntity, uuidProprty).toString();
+            String productName = AbstractHttpJob.getPropertyValue(productEntity, nameProperty).toString();
+            boolean online = Boolean.parseBoolean(AbstractHttpJob.getPropertyValue(productEntity, proprtyOnline).toString());
+
+            if ((PROPERTY_ONLINE.equals(proprtyOnline) && online == true)
+                  || (PROPERTY_OFFLINE.equals(proprtyOnline) && online == false))
+            {
+               Order order = new Order(
+                     getName(),
+                     uuid,
+                     productUuid,
+                     JobStatus.RUNNING,
+                     new Date(),
+                     null,
+                     "Job running");
+
+               downloadProduct(uuid, productUuid, productUuid, productName, null, null);
+               return order;
+            }
+            else
+            {
+               String actionName = getActionName();
+               ClientEntity orderEntity = client.performAction(UUID.fromString(productUuid),
+                     ProductModel.ENTITY_SET_NAME, actionName);
+
+               if (orderEntity != null)
+               {
+                  return internalHttpFetch(orderEntity, productUuid, productName, uuid);
+               }
+            }
+         }
+      }
+      return null;
+   }
+
+   @Override
+   public org.dhus.Product get(String id) throws DataStoreException
+   {
+      if (order == false)
+      {
+         throw new ProductNotFoundException("The requested Product for id "+ id +" is not found");
+      }
+      else
+      {
+         return super.get(id);
+      }
+   }
+   
+   protected abstract Order internalHttpFetch(ClientEntity entity, String remoteUuid, String identifier, String localUuid);
+
+   protected abstract String getOnlineProperty(ClientEntity productEntity);
+
+   protected abstract String getUuidProperty(ClientEntity productEntity);
+
+   protected abstract String getProductNameProperty(ClientEntity productEntity);
+
+   protected abstract ClientEntitySetIterator<ClientEntitySet, ClientEntity> readEntitySet(String filter);
+
+   protected abstract String getActionName();
+
+   protected JobStatus getStatusJob(String status)
+   {
+      if (STATUS_IN_PROGRESS.equals(status) || STATUS_RUNNING_ONDA.equals(status) || STATUS_QUEUED.equals(status))
+      {
+         return JobStatus.RUNNING;
+      }
+      else if (STATUS_CANCELLED.equals(status) || STATUS_FAILED.equals(status)
+            || STATUS_FAILED_ONDA.equals(status) || STATUS_UNKNWON_ONDA.equals(status))
+      {
+         return JobStatus.FAILED;
+      }
+      else
+      {
+         return JobStatus.COMPLETED;
+      }
+   }
+
+   protected StreamableProduct getStreamableProduct(String remoteProductUuid, String remoteIdentifier)
+   {
+      InputStream stream = client.downloadEntityMedia(ProductModel.ENTITY_SET_NAME, UUID.fromString(remoteProductUuid));
+
+      StreamableProduct streamableproduct = new StreamableProduct(stream);
+      streamableproduct.setName(remoteIdentifier);
+      return streamableproduct;
+   }
+
+   protected String getLocalIdentifier(String remoteIdentifier)
+   {
+      if (remoteIdentifier.endsWith(".zip") || remoteIdentifier.endsWith(".tar"))
+      {
+         return remoteIdentifier.substring(0, remoteIdentifier.length() - 4);
+      }
+      return remoteIdentifier;
+   }
+
+   protected void downloadProduct(String localUuid, String jobId, String remoteUuid, String remoteIdentifier,
+         Date estimatedDate, String statusMessage)
+   {
+      StreamableProduct streamable = getStreamableProduct(remoteUuid, remoteIdentifier);
+
+      // put the product in a queue to download it
+      parallelProductDownloadManager.submit(streamable, () ->
+      {
+         try
+         {
+            moveProductToCache(streamable, localUuid);
+
+            // refresh database order
+            refreshOrder(localUuid, getName(), jobId, JobStatus.COMPLETED, estimatedDate,
+                  statusMessage != null ? statusMessage : "Job completed");
+         }
+         catch (DataStoreException e)
+         {
+            LOGGER.error("Failed to move product {} to cache", remoteIdentifier, e);
+            // refresh database order
+            refreshOrder(localUuid, getName(), jobId, JobStatus.FAILED, estimatedDate,
+                  statusMessage != null ? statusMessage : "Job failed");
+         }
+      });
+      LOGGER.info("Product download {} successfully queued", streamable.getName());
+   }
+
+   protected int runJob(String jobId, String remoteIdentifier, String status, String remoteUuid,
+         Date estimatedDate, String statusMessage)
+   {
+      int res = 0;
+      String localIdentifier = getLocalIdentifier(remoteIdentifier);
+      Product product = PRODUCT_SERVICE.getProducBytIdentifier(localIdentifier);
+      if (product == null)
+      {
+         LOGGER.error("Product {} not found in the database", localIdentifier);
+      }
+      else
+      {
+         String uuid = product.getUuid();
+
+         if (STATUS_COMPLETED.equals(status) || STATUS_COMPLETED_ONDA.equals(status))
+         {
+            // make sure the product is not already in the cache or
+            // already queued for download
+            if (!existsInCache(uuid) && !parallelProductDownloadManager.isAlreadyQueued(localIdentifier))
+            {
+               // download product
+               downloadProduct(uuid, jobId, remoteUuid, remoteIdentifier, estimatedDate, statusMessage);
+            }
+            else
+            {
+               LOGGER.warn(
+                     "Job for product {} ({}) found, but product already downloaded or downloading, skipping",
+                     uuid, localIdentifier);
+            }
+            res++;
+         }
+         else
+         {
+            // refresh database order
+            refreshOrder(
+                  uuid,
+                  getName(),
+                  jobId,
+                  getStatusJob(status),
+                  estimatedDate,
+                  statusMessage);
+            if (STATUS_IN_PROGRESS.equals(status) || STATUS_RUNNING_ONDA.equals(status))
+            {
+               LOGGER.debug("the requested product {} is being processed",
+                     localIdentifier);
+            }
+            else
+            {
+               LOGGER.error("product {} retrieval has failed", localIdentifier);
+            }
+         }
+      }
+      LOGGER.debug("Started restore of {} products in {}", res, getName());
+
+      // check running downloads
+      parallelProductDownloadManager.checkProductDownloads();
+      return res;
+   }
+
+   @Override
+   public void close() throws Exception
+   {
+      if (this.timer != null)
+      {
+         try
+         {
+            this.timer.cancel();
+         }
+         catch (RuntimeException suppressed) {}
+      }
+      parallelProductDownloadManager.shutdownNow();
+   }
+}
diff --git a/core/src/main/java/org/dhus/store/datastore/async/AbstractHttpJob.java b/core/src/main/java/org/dhus/store/datastore/async/AbstractHttpJob.java
new file mode 100644
index 000000000..74ea262b9
--- /dev/null
+++ b/core/src/main/java/org/dhus/store/datastore/async/AbstractHttpJob.java
@@ -0,0 +1,99 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.store.datastore.async;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import org.apache.olingo.client.api.domain.ClientEntity;
+import org.apache.olingo.client.api.domain.ClientProperty;
+
+public abstract class AbstractHttpJob
+{
+   private final String jobId;
+   private final String status;
+   private final String statusMessage;
+   private final String productUuid;
+   private final String productName;
+
+   public static final String PROPERTY_ID = "Id";
+   public static final String PROPERTY_STATUS = "Status";
+   public static final String PROPERTY_STATUS_MESSAGE = "StatusMessage";
+
+   private static final Logger LOGGER = LogManager.getLogger();
+   public static final SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.sss'Z'");
+
+   public AbstractHttpJob(ClientEntity orderEntity, String productUuid, String productName)
+   {
+      this.jobId = getPropertyValue(orderEntity, PROPERTY_ID).toString();
+      this.status = getPropertyValue(orderEntity, PROPERTY_STATUS).toString();
+      this.statusMessage = getPropertyValue(orderEntity, PROPERTY_STATUS_MESSAGE).toString();
+      this.productUuid = productUuid;
+      this.productName = productName;
+   }
+
+   public String getJobId()
+   {
+      return jobId;
+   }
+
+   public String getStatus()
+   {
+      return status;
+   }
+
+   public String getStatusMessage()
+   {
+      return statusMessage;
+   }
+
+   public String getProductUuid()
+   {
+      return productUuid;
+   }
+
+   public String getProductName()
+   {
+      return productName;
+   }
+
+   public static Object getPropertyValue(ClientEntity entity, String propertyName)
+   {
+      ClientProperty property = entity.getProperty(propertyName);
+      return property == null ? null : property.getValue();
+   }
+
+   protected static Date parseDate(String propertyValue)
+   {
+      try
+      {
+         return DATE_FORMATTER.parse(propertyValue);
+      }
+      catch (ParseException e)
+      {
+         LOGGER.error("Cannot parse date property");
+         return null;
+      }
+   }
+}
diff --git a/core/src/main/java/org/dhus/store/datastore/async/AsyncDataStore.java b/core/src/main/java/org/dhus/store/datastore/async/AsyncDataStore.java
index cc3a3a194..6083f8b54 100644
--- a/core/src/main/java/org/dhus/store/datastore/async/AsyncDataStore.java
+++ b/core/src/main/java/org/dhus/store/datastore/async/AsyncDataStore.java
@@ -78,4 +78,11 @@ public interface AsyncDataStore extends DataStore
     * @return the Order corresponding to the given product UUID or null
     */
    Order getAndLogExistingOrder(String uuid, String localIdentifier, Long size);
+
+   /**
+    * Return the cache of the asyncDataStore
+    *
+    * @return the cache if it exists or null
+    */
+   DataStore getCache();
 }
diff --git a/core/src/main/java/org/dhus/store/datastore/async/BadlySizedProductException.java b/core/src/main/java/org/dhus/store/datastore/async/BadlySizedProductException.java
new file mode 100644
index 000000000..92f1ae680
--- /dev/null
+++ b/core/src/main/java/org/dhus/store/datastore/async/BadlySizedProductException.java
@@ -0,0 +1,32 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2019 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.store.datastore.async;
+
+import org.dhus.store.datastore.DataStoreException;
+
+public class BadlySizedProductException extends DataStoreException
+{
+   private static final long serialVersionUID = -3369203663797275422L;
+
+   public BadlySizedProductException(String message)
+   {
+      super(message);
+   }
+}
\ No newline at end of file
diff --git a/core/src/main/java/org/dhus/store/datastore/async/gmp/GmpDataStore.java b/core/src/main/java/org/dhus/store/datastore/async/gmp/GmpDataStore.java
index f32a8e33a..081a81c41 100644
--- a/core/src/main/java/org/dhus/store/datastore/async/gmp/GmpDataStore.java
+++ b/core/src/main/java/org/dhus/store/datastore/async/gmp/GmpDataStore.java
@@ -42,9 +42,9 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 import org.dhus.api.JobStatus;
+import org.dhus.store.datastore.DataStore;
 import org.dhus.store.datastore.DataStoreException;
 import org.dhus.store.datastore.async.AbstractAsyncCachedDataStore;
-import org.dhus.store.datastore.config.GmpDataStoreConf;
 import org.dhus.store.datastore.config.PatternReplace;
 import org.dhus.store.datastore.hfs.HfsProduct;
 
@@ -79,7 +79,6 @@ public final class GmpDataStore extends AbstractAsyncCachedDataStore
     * @param priority            DataStores are ordered, this DataStore MUST have the highest priority because it is a yes-store
     * @param isManager           true to enable the ingest job in this instance of the DHuS (only one instance per cluster)
     * @param gmpRepoLocation     path to the repository configured in GMP
-    * @param hfsLocation         path to the local HFS cache
     * @param patternReplaceIn    pattern to extract the product identifier from the id column of the queue table of GMP
     * @param patternReplaceOut   pattern to transform the identifier to be used in the queue table of GMP
     * @param maxPendingRequests  maximum number of pending orders at the same time
@@ -93,17 +92,18 @@ public final class GmpDataStore extends AbstractAsyncCachedDataStore
     * @param currentSize         overall size of the local HFS cache DataStore (disk usage)
     * @param autoEviction        true to activate auto-eviction based on disk usage on the local HFS cache DataStore
     * @param hashAlgorithms      to compute on restore
+    * @param cache               local cache, can be HFS or OpenStack
     *
     * @throws DataStoreException could not create a GMP DataStore
     */
-   public GmpDataStore(String name, int priority, boolean isManager, String gmpRepoLocation, String hfsLocation,
+   public GmpDataStore(String name, int priority, boolean isManager, String gmpRepoLocation,
          PatternReplace patternReplaceIn, PatternReplace patternReplaceOut, Integer maxPendingRequests, Integer maxRunningRequests,
          String mySqlURL, String mySqlUser, String mySqlPass, String agentId, String targetId, long maximumSize,
-         long currentSize, boolean autoEviction, String[] hashAlgorithms)
+         long currentSize, boolean autoEviction, String[] hashAlgorithms, DataStore cache)
          throws DataStoreException
    {
-      super(name, priority, hfsLocation, patternReplaceIn, patternReplaceOut, maxPendingRequests, maxRunningRequests,
-            maximumSize, currentSize, autoEviction, hashAlgorithms);
+      super(name, priority, patternReplaceIn, patternReplaceOut, maxPendingRequests, maxRunningRequests,
+            maximumSize, currentSize, autoEviction, hashAlgorithms, cache);
 
       Objects.requireNonNull(gmpRepoLocation);
       Objects.requireNonNull(mySqlURL);
@@ -116,8 +116,8 @@ public final class GmpDataStore extends AbstractAsyncCachedDataStore
       this.targetId = targetId;
       this.agentId = agentId;
 
-      LOGGER.info("New GMP DataStore, name={} url={} repo={} hfs={} max_queued_requests={}",
-            getName(), mySqlURL, gmpRepoLocation, hfsLocation, maxRunningRequests);
+      LOGGER.info("New GMP DataStore, name={} url={} repo={} max_queued_requests={}",
+            getName(), mySqlURL, gmpRepoLocation, maxRunningRequests);
 
       // If this instance is cluster manager, it is tasked with managing the GMP
       LOGGER.info("This DHuS instance {} the GMP manager", isManager? "is": "isn't");
@@ -144,7 +144,7 @@ public final class GmpDataStore extends AbstractAsyncCachedDataStore
       if (isManager)
       {
          this.timer = new Timer("GMP Ingest Job", true);
-         this.timer.schedule(new IngestJob(), 0, 300_000);
+         this.timer.schedule(new IngestJob(), 60_000, 300_000);
       }
       else
       {
@@ -166,55 +166,6 @@ public final class GmpDataStore extends AbstractAsyncCachedDataStore
       this.dataSource.close();
    }
 
-   /**
-    * Factory method, creates a new GmpDatastore from given configuration.
-    *
-    * @param configuration for this DataStore
-    * @param hashAlgorithms to compute on restore
-    * @return a new instance of GMP DataStore (never null)
-    * @throws DataStoreException could not create a GMP DataStore
-    */
-   public static GmpDataStore make(GmpDataStoreConf configuration, String[] hashAlgorithms) throws DataStoreException
-   {
-      // patternReplaceIn default value
-      if (configuration.getPatternReplaceIn() == null)
-      {
-         PatternReplace patternReplaceIn = new PatternReplace();
-         patternReplaceIn.setPattern("\\.SAFE$");
-         patternReplaceIn.setReplacement("");
-         configuration.setPatternReplaceIn(patternReplaceIn);
-      }
-
-      // patternReplaceOut default value
-      if (configuration.getPatternReplaceOut() == null)
-      {
-         PatternReplace patternReplaceOut = new PatternReplace();
-         patternReplaceOut.setPattern("$");
-         patternReplaceOut.setReplacement(".SAFE");
-         configuration.setPatternReplaceOut(patternReplaceOut);
-      }
-
-      return new GmpDataStore(
-            configuration.getName(),
-            configuration.getPriority(),
-            configuration.isIsMaster(),
-            configuration.getRepoLocation(),
-            configuration.getHfsLocation(),
-            configuration.getPatternReplaceIn(),
-            configuration.getPatternReplaceOut(),
-            configuration.getMaxPendingRequests(),
-            configuration.getMaxRunningRequests(),
-            configuration.getMysqlConnectionInfo().getValue(),
-            configuration.getMysqlConnectionInfo().getUser(),
-            configuration.getMysqlConnectionInfo().getPassword(),
-            configuration.getConfiguration().getAgentid(),
-            configuration.getConfiguration().getTargetid(),
-            configuration.getMaximumSize(),
-            configuration.getCurrentSize(), // datastore coming from xml configuration
-            configuration.isAutoEviction(),
-            hashAlgorithms);
-   }
-
    @Override
    protected Order internalFetch(String localIdentifier, String remoteIdentifier, String uuid, Long size)
          throws DataStoreException
diff --git a/core/src/main/java/org/dhus/store/datastore/async/lta/LTAJob.java b/core/src/main/java/org/dhus/store/datastore/async/lta/LTAJob.java
new file mode 100644
index 000000000..36dc5bc9f
--- /dev/null
+++ b/core/src/main/java/org/dhus/store/datastore/async/lta/LTAJob.java
@@ -0,0 +1,52 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.store.datastore.async.lta;
+
+import java.util.Date;
+
+import org.apache.olingo.client.api.domain.ClientEntity;
+
+import org.dhus.store.datastore.async.AbstractHttpJob;
+
+public class LTAJob extends AbstractHttpJob
+{
+   private final Date submissionDate;
+   private final Date estimatedDate;
+
+   public static final String PROPERTY_SUBMISSION_DATE = "SubmissionDate";
+   public static final String PROPERTY_ESTIMATED_DATE = "EstimatedDate";
+
+   public LTAJob(ClientEntity orderEntity, String productUuid, String productName)
+   {
+      super(orderEntity, productUuid, productName);
+      this.submissionDate = parseDate(getPropertyValue(orderEntity, PROPERTY_SUBMISSION_DATE).toString());
+      this.estimatedDate = parseDate(getPropertyValue(orderEntity, PROPERTY_ESTIMATED_DATE).toString());
+   }
+
+   public Date getSubmissionDate()
+   {
+      return submissionDate;
+   }
+
+   public Date getEstimatedDate()
+   {
+      return estimatedDate;
+   }
+}
\ No newline at end of file
diff --git a/core/src/main/java/org/dhus/store/datastore/async/lta/LtaDataStore.java b/core/src/main/java/org/dhus/store/datastore/async/lta/LtaDataStore.java
new file mode 100644
index 000000000..387a44cce
--- /dev/null
+++ b/core/src/main/java/org/dhus/store/datastore/async/lta/LtaDataStore.java
@@ -0,0 +1,190 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.store.datastore.async.lta;
+
+import fr.gael.dhus.database.object.Order;
+
+import java.io.IOException;
+import java.net.URISyntaxException;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+import java.util.Timer;
+import java.util.UUID;
+
+import org.apache.olingo.client.api.domain.ClientEntity;
+import org.apache.olingo.client.api.domain.ClientEntitySet;
+import org.apache.olingo.client.api.domain.ClientEntitySetIterator;
+import org.apache.olingo.client.api.domain.ClientProperty;
+
+import org.dhus.olingo.v2.datamodel.ProductModel;
+import org.dhus.store.datastore.DataStore;
+import org.dhus.store.datastore.async.AbstractHttpAsyncDataStore;
+import org.dhus.store.datastore.config.PatternReplace;
+
+public class LtaDataStore extends AbstractHttpAsyncDataStore
+{
+   private static final String ORDER_ACTION_NAME = "OData.CSC.Order";
+
+   /**
+    * Create a LTA DateStore.
+    *
+    * @param name                    of this DataStore
+    * @param priority                DataStores are ordered
+    * @param isManager               true to enable the ingest job in this instance of the DHuS (only one instance per cluster)
+    * @param patternReplaceIn        transform PDGS identifiers to DHuS identifiers
+    * @param patternReplaceOut       transform DHuS identifiers to PDGS identifiers
+    * @param maxPendingRequests      maximum number of pending orders at the same time
+    * @param maxRunningRequests      maximum number of running orders at the same time
+    * @param maximumSize             maximum size in bytes of the local cache DataStore
+    * @param currentSize             overall size of the local HFS cache DataStore (disk usage)
+    * @param autoEviction            true to activate auto-eviction based on disk usage on the local HFS cache DataStore
+    * @param urlService              URL to connect to the LTA Service
+    * @param login                   user to log to LTA Service
+    * @param password                password to log to LTA Service
+    * @param interval                interval
+    * @param maxConcurrentsDownloads maximum number of product download occurring in parallel
+    * @param hashAlgorithms          to compute on restore
+    * @param cache                   local cache, can be HFS or OpenStack
+    *
+    * @throws URISyntaxException   could not create LTADataStore
+    * @throws IOException          could not create LTA repo location directory
+    * @throws InterruptedException could not initialize OData client
+    */
+   public LtaDataStore(String name, int priority, boolean isManager,
+         PatternReplace patternReplaceIn, PatternReplace patternReplaceOut,
+         Integer maxPendingRequests, Integer maxRunningRequests, long maximumSize, long currentSize,
+         boolean autoEviction, String urlService, String login, String password, long interval,
+         int maxConcurrentsDownloads, String[] hashAlgorithms, DataStore cache, boolean order)
+         throws URISyntaxException, IOException, InterruptedException
+   {
+      super(name, priority, isManager, patternReplaceIn, patternReplaceOut, maxPendingRequests,
+            maxRunningRequests, maximumSize, currentSize, autoEviction, urlService, login, password,
+            interval, maxConcurrentsDownloads, hashAlgorithms, cache, order);
+      
+      LOGGER.info("New LTA DataStore, name={} url={}", getName(), urlService);
+
+      LOGGER.info("This DHuS instance {} the LTA manager", isManager ? "is" : "isn't");
+
+      if (isManager)
+      {
+         timer = new Timer("LTA ingest job", true);
+         timer.schedule(new RunJob(), 60_000, interval);
+      }
+      else
+      {
+         timer = null;
+      }
+   }
+
+   @Override
+   protected Order internalHttpFetch(ClientEntity entity, String remoteUuid, String identifier,
+         String LocalUuid)
+   {
+      LTAJob ltaJob = new LTAJob(entity, remoteUuid, identifier);
+      return new Order(
+            getName(),
+            LocalUuid,
+            ltaJob.getJobId(),
+            getStatusJob(ltaJob.getStatus()),
+            new Date(),
+            ltaJob.getEstimatedDate(),
+            ltaJob.getStatusMessage());
+   }
+
+   @Override
+   protected String getOnlineProperty(ClientEntity productEntity)
+   {
+      ClientProperty property = productEntity.getProperty(PROPERTY_ONLINE);
+      return property.getName();
+   }
+
+   @Override
+   protected String getUuidProperty(ClientEntity productEntity)
+   {
+      ClientProperty property = productEntity.getProperty(PROPERTY_ID);
+      return property.getName();
+   }
+
+   @Override
+   protected String getProductNameProperty(ClientEntity productEntity)
+   {
+      ClientProperty property = productEntity.getProperty(PROPERTY_NAME);
+      return property.getName();
+   }
+
+   @Override
+   protected ClientEntitySetIterator<ClientEntitySet, ClientEntity> readEntitySet(String identifier)
+   {
+      String filter = "startswith(Name,'" + identifier + "')";
+      return client.readEntitySet(ProductModel.ENTITY_SET_NAME, filter, null);
+   }
+
+   @Override
+   protected String getActionName()
+   {
+      return ORDER_ACTION_NAME;
+   }
+
+   private List<LTAJob> getAllJobs()
+   {
+      List<LTAJob> ltaJobList = new ArrayList<>();
+      ClientEntitySetIterator<ClientEntitySet, ClientEntity> entitySetIt = client.readEntitySet(ORDER_ENTITY_SET_NAME, null, null);
+      while (entitySetIt.hasNext())
+      {
+         ClientEntity entity = entitySetIt.next();
+         String key = LTAJob.getPropertyValue(entity, PROPERTY_ID).toString();
+         ClientEntity productEntity = client.navigationLinkEntity(UUID.fromString(key), ORDER_ENTITY_SET_NAME, ProductModel.ENTITY_TYPE_NAME);
+
+         String productUuid = LTAJob.getPropertyValue(productEntity, PROPERTY_ID).toString();
+         String productName = LTAJob.getPropertyValue(productEntity, PROPERTY_NAME).toString();
+
+         LTAJob ltaJob = new LTAJob(entity, productUuid, productName);
+         ltaJobList.add(ltaJob);
+      }
+      return ltaJobList;
+   }
+
+   private final class RunJob extends IngestTask
+   {
+      @Override
+      protected int ingestCompletedFetches()
+      {
+         List<LTAJob> ltaJobsList = getAllJobs();
+
+         for (LTAJob ltaJob : ltaJobsList)
+         {
+            Order order = ORDER_SERVICE.getOrderByJobId(ltaJob.getJobId());
+            if (order == null)
+            {
+               continue;
+            }
+           return runJob(
+                 ltaJob.getJobId(),
+                 ltaJob.getProductName(),
+                 ltaJob.getStatus(),
+                 ltaJob.getProductUuid(),
+                 ltaJob.getEstimatedDate(),
+                 ltaJob.getStatusMessage());
+         }
+         return 0;
+      }
+   }
+}
diff --git a/core/src/main/java/org/dhus/store/datastore/async/onda/ONDAJob.java b/core/src/main/java/org/dhus/store/datastore/async/onda/ONDAJob.java
new file mode 100644
index 000000000..d45b7388b
--- /dev/null
+++ b/core/src/main/java/org/dhus/store/datastore/async/onda/ONDAJob.java
@@ -0,0 +1,44 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.store.datastore.async.onda;
+
+import java.util.Date;
+
+import org.apache.olingo.client.api.domain.ClientEntity;
+
+import org.dhus.store.datastore.async.AbstractHttpJob;
+
+public class ONDAJob extends AbstractHttpJob
+{
+   private final Date estimatedTime;
+
+   public static final String PROPERTY_ESTIMATED_TIME = "EstimatedTime";
+
+   public ONDAJob(ClientEntity orderEntity, String productUuid, String productName)
+   {
+      super(orderEntity, productUuid, productName);
+      this.estimatedTime = parseDate(getPropertyValue(orderEntity, PROPERTY_ESTIMATED_TIME).toString());
+   }
+
+   public Date getEstimatedDate()
+   {
+      return estimatedTime;
+   }
+}
diff --git a/core/src/main/java/org/dhus/store/datastore/async/onda/OndaDataStore.java b/core/src/main/java/org/dhus/store/datastore/async/onda/OndaDataStore.java
new file mode 100644
index 000000000..d8f83c6a9
--- /dev/null
+++ b/core/src/main/java/org/dhus/store/datastore/async/onda/OndaDataStore.java
@@ -0,0 +1,339 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.dhus.store.datastore.async.onda;
+
+import java.io.IOException;
+import java.net.URISyntaxException;
+import java.text.ParseException;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Timer;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+import org.apache.olingo.client.api.domain.ClientEntity;
+import org.apache.olingo.client.api.domain.ClientEntitySet;
+import org.apache.olingo.client.api.domain.ClientEntitySetIterator;
+import org.apache.olingo.client.api.domain.ClientProperty;
+import org.dhus.Product;
+import org.dhus.olingo.v2.datamodel.ProductModel;
+import org.dhus.store.datastore.DataStore;
+import org.dhus.store.datastore.DataStoreException;
+import org.dhus.store.datastore.DataStoreFactory.InvalidConfigurationException;
+import org.dhus.store.datastore.async.AbstractHttpAsyncDataStore;
+import org.dhus.store.datastore.config.ObjectStorageCredentialConf;
+import org.dhus.store.datastore.config.OndaDataStoreConf;
+import org.dhus.store.datastore.openstack.OpenStackLocation;
+import org.dhus.store.datastore.openstack.OpenStackObject;
+import org.dhus.store.datastore.openstack.OpenStackProduct;
+import org.dhus.store.keystore.KeyStore;
+import org.dhus.store.keystore.PersistentKeyStore;
+import org.quartz.SchedulerException;
+
+import fr.gael.dhus.database.object.KeyStoreEntry;
+import fr.gael.dhus.database.object.Order;
+import fr.gael.dhus.database.object.config.cron.Cron;
+import fr.gael.drb.impl.swift.DrbSwiftObject;
+
+public class OndaDataStore extends AbstractHttpAsyncDataStore
+{
+   private static final String ORDER_ACTION_NAME = "Ens.Order";
+
+   private static final OndaDataStoreScannerScheduler JOB_SCHEDULER = new OndaDataStoreScannerScheduler();
+
+   private final String provider;
+   private final String identity;
+   private final String credential;
+   private final String url;
+
+   private KeyStore keystore;
+   private String scannerId;
+
+   public OndaDataStore(OndaDataStoreConf ondaDataStoreConf, String[] hashAlgorithms, DataStore cache)
+         throws URISyntaxException, IOException, InterruptedException, InvalidConfigurationException
+   {
+      super(ondaDataStoreConf.getName(),
+            ondaDataStoreConf.getPriority(),
+            ondaDataStoreConf.isIsMaster(),
+            ondaDataStoreConf.getPatternReplaceIn(),
+            ondaDataStoreConf.getPatternReplaceOut(),
+            ondaDataStoreConf.getMaxPendingRequests(),
+            ondaDataStoreConf.getMaxRunningRequests(),
+            ondaDataStoreConf.getMaximumSize(),
+            ondaDataStoreConf.getCurrentSize(),
+            ondaDataStoreConf.isAutoEviction(),            
+            ondaDataStoreConf.getServiceUrl(),
+            ondaDataStoreConf.getLogin(),
+            ondaDataStoreConf.getPassword(),
+            ondaDataStoreConf.getInterval(),
+            ondaDataStoreConf.getMaxConcurrentsDownloads(), hashAlgorithms, cache,
+            ondaDataStoreConf.isOrder());
+       
+      scannerId = getName()+"-"+UUID.randomUUID();
+      
+      boolean isManager = ondaDataStoreConf.isIsMaster();
+      Cron scannerCron = ondaDataStoreConf.getOndaScanner() == null ? null : ondaDataStoreConf.getOndaScanner().getCron();
+      
+      LOGGER.info("New ONDA DataStore, name={} url={}", getName(), ondaDataStoreConf.getServiceUrl());
+
+      LOGGER.info("This DHuS instance {} the ONDA manager", isManager ? "is" : "isn't");
+
+      if (isManager)
+      {
+         try
+         {
+            // Start ONDA Scanner only on master node
+            if (scannerCron != null && scannerCron.isActive())
+            {
+               LOGGER.info("Onda scanner cron scheduled for " + ondaDataStoreConf.getName());
+               JOB_SCHEDULER.scheduleScanner(scannerId, ondaDataStoreConf);
+               if (!JOB_SCHEDULER.isStarted())
+               {
+                  JOB_SCHEDULER.start();
+               }
+            }
+         }
+         catch (SchedulerException | ParseException e)
+         {
+            throw new InvalidConfigurationException(e.getMessage(), e);
+         }
+
+         if (ondaDataStoreConf.isOrder())
+         {
+            timer = new Timer("ONDA ingest job", true);
+            timer.schedule(new RunJob(), 60000, ondaDataStoreConf.getInterval());
+         }
+         else
+         {
+            timer = null;
+         }
+      }
+      else
+      {
+         timer = null;
+      }
+
+      ObjectStorageCredentialConf cred = ondaDataStoreConf.getObjectStorageCredential();
+      if (cred == null)
+      {
+         this.provider = null;
+         this.identity = null;
+         this.credential = null;
+         this.url = null;
+      }
+      else
+      {
+         this.provider = cred.getProvider();
+         this.identity = cred.getIdentity();
+         this.credential = cred.getCredential();
+         this.url = cred.getUrl();
+      }
+
+      this.keystore = new PersistentKeyStore(ondaDataStoreConf.getName());
+   }
+
+   @Override
+   protected Order internalHttpFetch(ClientEntity entity, String remoteUuid, String identifier,
+         String localUuid)
+   {
+      ONDAJob ondaJob = new ONDAJob(entity, remoteUuid, identifier);
+      return new Order(
+            getName(),
+            localUuid,
+            ondaJob.getJobId(),
+            getStatusJob(ondaJob.getStatus()),
+            new Date(),
+            null,
+            ondaJob.getStatusMessage());
+   }
+
+   @Override
+   protected String getOnlineProperty(ClientEntity productEntity)
+   {
+      ClientProperty property = productEntity.getProperty(PROPERTY_OFFLINE);
+      return property.getName();
+   }
+
+   @Override
+   protected String getUuidProperty(ClientEntity productEntity)
+   {
+      ClientProperty property = productEntity.getProperty(PROPERTY_ID_ONDA);
+      return property.getName();
+   }
+
+   @Override
+   protected String getProductNameProperty(ClientEntity productEntity)
+   {
+      ClientProperty property = productEntity.getProperty(PROPERTY_NAME_ONDA);
+      return property.getName();
+   }
+
+   @Override
+   protected ClientEntitySetIterator<ClientEntitySet, ClientEntity> readEntitySet(String identifier)
+   {
+      String search = "\"name:" + identifier + "*\"";
+      return client.readEntitySet(ProductModel.ENTITY_SET_NAME, null, search);
+   }
+
+   @Override
+   protected String getActionName()
+   {
+      return ORDER_ACTION_NAME;
+   }
+
+   @Override
+   public boolean hasProduct(String uuid)
+   {
+      boolean existInObjectStorage = keystore.exists(uuid, UNALTERED_PRODUCT_TAG);
+      if (existInObjectStorage)
+      {
+         return true;
+      }
+      else
+      {
+         return super.hasProduct(uuid);
+      }
+   }
+
+   @Override
+   public void deleteProduct(String uuid) throws DataStoreException
+   {
+      boolean existInObjectStorage = keystore.exists(uuid, UNALTERED_PRODUCT_TAG);
+      if (existInObjectStorage)
+      {
+         keystore.remove(uuid, UNALTERED_PRODUCT_TAG);
+      }
+      else
+      {
+         super.deleteProduct(uuid);
+      }
+   }
+
+   @Override
+   public Product get(String id) throws DataStoreException
+   {
+      boolean existInObjectStorage = keystore.exists(id, UNALTERED_PRODUCT_TAG);
+      if (existInObjectStorage)
+      {
+         String productLocation = keystore.get(id, UNALTERED_PRODUCT_TAG);
+         OpenStackObject openStackObject = new OpenStackObject(provider, identity, credential, url);
+         DrbSwiftObject swiftObject = openStackObject.getOpenStackObject();
+         OpenStackLocation location = new OpenStackLocation(productLocation);
+         return new OpenStackProduct(swiftObject, location, id);
+      }
+      else
+      {
+         return super.get(id);
+      }
+   }
+
+   private final class RunJob extends IngestTask
+   {
+      @Override
+      protected int ingestCompletedFetches()
+      {
+         List<Order> orderList = ORDER_SERVICE.getRunningOrdersByDataStore(getName());
+
+         for (Order order : orderList)
+         {
+            ClientEntity orderEntity = client.readSingleEntity(ORDER_ENTITY_SET_NAME, order.getJobId());
+            ClientEntity productEntity = client.readSingleEntity(ProductModel.ENTITY_SET_NAME,
+                  UUID.fromString(order.getJobId()));
+            String productName = ONDAJob.getPropertyValue(productEntity, PROPERTY_NAME_ONDA).toString();
+            ONDAJob ondaJob = new ONDAJob(orderEntity, order.getJobId(), productName);
+
+            return runJob(
+                  ondaJob.getJobId(),
+                  ondaJob.getProductName(),
+                  ondaJob.getStatus(),
+                  ondaJob.getJobId(),
+                  ondaJob.getEstimatedDate(),
+                  ondaJob.getStatusMessage());
+         }
+         return 0;
+      }
+   }
+
+   @Override
+   public void close() throws Exception
+   {
+      if (JOB_SCHEDULER.isStarted())
+      {
+         JOB_SCHEDULER.unscheduleScanner(scannerId);
+      }
+      super.close();
+   }
+
+   @Override
+   public Iterator<String> getScrollableProductResults()
+   {
+      final Iterator<KeyStoreEntry> iter = keystore.getUnalteredScrollableProductEntries();
+      return new Iterator<String>()
+      {
+         @Override
+         public String next()
+         {
+            return iter.next().getEntryKey();
+         }
+         @Override
+         public boolean hasNext()
+         {
+            return iter.hasNext();
+         }
+      };
+   }
+
+   @Override
+   public List<String> getProductList()
+   {
+      List<KeyStoreEntry> entryList = keystore.getUnalteredProductEntries();
+      if (!entryList.isEmpty())
+      {
+         return toKeyList(entryList);
+      }
+      else
+      {
+         return super.getProductList();
+      }
+   }
+
+   @Override
+   public List<String> getProductList(int skip, int top)
+   {
+      List<KeyStoreEntry> entryList = keystore.getUnalteredProductEntries(skip, top);
+      if (!entryList.isEmpty())
+      {
+         return toKeyList(entryList);
+      }
+      else
+      {
+         return super.getProductList(skip, top);
+      }
+   }
+
+   private List<String> toKeyList(List<KeyStoreEntry> keyList)
+   {
+      // map keystore entries to uuids
+      return keyList.stream()
+            .map(keyStoreEntry -> keyStoreEntry.getEntryKey())
+            .collect(Collectors.toList());
+   }   
+}
\ No newline at end of file
diff --git a/core/src/main/java/org/dhus/store/datastore/async/onda/OndaDataStoreScannerJob.java b/core/src/main/java/org/dhus/store/datastore/async/onda/OndaDataStoreScannerJob.java
new file mode 100644
index 000000000..5e4020a11
--- /dev/null
+++ b/core/src/main/java/org/dhus/store/datastore/async/onda/OndaDataStoreScannerJob.java
@@ -0,0 +1,263 @@
+package org.dhus.store.datastore.async.onda;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.text.SimpleDateFormat;
+import java.time.Instant;
+import java.time.format.DateTimeParseException;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.List;
+import java.util.TimeZone;
+
+import javax.xml.datatype.DatatypeConfigurationException;
+import javax.xml.datatype.DatatypeFactory;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+import org.apache.commons.httpclient.HttpClient;
+import org.apache.commons.httpclient.HttpStatus;
+import org.apache.commons.httpclient.URI;
+import org.apache.commons.httpclient.methods.GetMethod;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.dhus.store.datastore.DataStore;
+import org.dhus.store.datastore.config.OndaDataStoreConf;
+import org.dhus.store.keystore.PersistentKeyStore;
+import org.quartz.Job;
+import org.quartz.JobDataMap;
+import org.quartz.JobExecutionContext;
+import org.quartz.JobExecutionException;
+import org.springframework.stereotype.Component;
+import org.w3c.dom.Document;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
+
+import fr.gael.dhus.DHuS;
+import fr.gael.dhus.database.object.Product;
+import fr.gael.dhus.service.ProductService;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.system.config.ConfigurationException;
+import fr.gael.dhus.system.config.ConfigurationManager;
+
+
+@Component
+public class OndaDataStoreScannerJob implements Job
+{
+   public final SimpleDateFormat DATE_TIME_FORMATTER = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
+
+   private static final Logger LOGGER = LogManager.getLogger(OndaDataStoreScannerJob.class);
+
+   public static final String DATASTORE_NAME = "datastoreName";
+   
+   private static final String XML_ITEMS_PER_PAGE_SET = "count";
+   private static final String XML_ENTRY = "entry";
+   private static final String XML_ID = "ONDA:id";
+   private static final String XML_NAME = "ONDA:name";
+   private static final String XML_STORAGE = "ONDA:storage";
+   private static final String XML_CREATION_DATE = "ONDA:creationDate";
+
+   private static final String OPENSEARCH_URL_FILTER = "searchTerms=";
+   private static final String OPENSEARCH_URL_SORT = "sortKeys=creationDate,,asc";
+   
+   private static final ProductService PRODUCT_SERVICE = ApplicationContextProvider.getBean(ProductService.class);
+   private static final ConfigurationManager CONFIGURATION_MANAGER = ApplicationContextProvider.getBean(ConfigurationManager.class);
+
+   private String name, url, region, lastCreationDateFromConf, filter;
+   private int processed, referenced, pageSize;
+   private String lastCreationDateUpdated;
+   
+   private OndaDataStoreConf ondaConf;
+   
+   private static List<String> runningScanners = new ArrayList<String> ();
+
+   @Override
+   public void execute(JobExecutionContext context) throws JobExecutionException
+   {
+      final JobDataMap jobParams = context.getJobDetail().getJobDataMap();
+      name = jobParams.getString(DATASTORE_NAME);
+      LOGGER.info("SCHEDULER : Onda Scanner '{}'", name);
+      if (!DHuS.isStarted ())
+      {
+         LOGGER.warn("SCHEDULER : Not run while system not fully initialized.");
+         return;
+      }
+      if (runningScanners.contains(name))
+      {
+         LOGGER.info("SCHEDULER : Onda Scanner '{}' is already running.", name);
+         return;
+      }
+      runningScanners.add(name);
+      try
+      {
+         long start = System.currentTimeMillis();
+         processed = referenced = 0;
+         ondaConf = ((OndaDataStoreConf)CONFIGURATION_MANAGER.getDataStoreManager().get(name));
+         url = ondaConf.getOndaScanner().getOpensearchUrl();
+         if (!url.endsWith("?"))
+         {
+            url += "?";
+         }
+         region = ondaConf.getObjectStorageCredential().getRegion();
+         if(ondaConf.getOndaScanner().getLastCreationDate() == null)
+         {         
+            GregorianCalendar gc = new GregorianCalendar();
+            gc.setTimeInMillis(0L);
+            lastCreationDateFromConf = DATE_TIME_FORMATTER.format(gc.getTime());
+         }
+         else
+         {
+            lastCreationDateFromConf = DATE_TIME_FORMATTER.format(ondaConf.getOndaScanner().getLastCreationDate().toGregorianCalendar().getTime());
+         }
+         pageSize = ondaConf.getOndaScanner().getPageSize();
+         filter = ondaConf.getOndaScanner().getFilter();
+         scan();
+         LOGGER.info("SCHEDULER : Onda Scanner '{}' - {} references for {} results processed in {}ms", name, referenced, processed, (System.currentTimeMillis() - start));
+      }
+      finally
+      {
+         runningScanners.remove(name);
+      }
+   }
+
+   private void scan()
+   {
+      LOGGER.debug("Onda Scanner last creation date : " + lastCreationDateFromConf);
+      PersistentKeyStore keystore = new PersistentKeyStore(name);
+      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+      DocumentBuilder builder = null;
+      List<OpenSearchResultEntry> openSearchResultEntries = null;
+      try
+      {
+         builder = factory.newDocumentBuilder();
+         String opensearchURI = url +"creationDate=[" + lastCreationDateFromConf +" TO NOW]&" + OPENSEARCH_URL_SORT;
+         if(filter != null && !filter.trim().isEmpty())
+         {
+            opensearchURI += "&" + OPENSEARCH_URL_FILTER + filter;
+         }
+         LOGGER.debug("Onda Scanner : open search url : " + opensearchURI);
+         HttpClient client = new HttpClient();
+         GetMethod method = new GetMethod();
+         InputStream rstream = null;
+         method.setURI(new URI(opensearchURI + "&" + XML_ITEMS_PER_PAGE_SET +"=" + pageSize, false));
+         if (client.executeMethod(method) != HttpStatus.SC_OK)
+         {
+            LOGGER.error("Error executing opensearch query : '" + opensearchURI + "'");
+            return;
+         }
+         rstream = method.getResponseBodyAsStream();
+         Document doc = builder.parse(rstream);
+         openSearchResultEntries = parseXML(doc);
+         rstream.close();
+         processResult(openSearchResultEntries, keystore);
+         processed += openSearchResultEntries.size();
+         
+         if(lastCreationDateUpdated != null)
+         {
+            LOGGER.info("Onda scanner : lastCreationDate updated to " + lastCreationDateUpdated);
+            GregorianCalendar gc = new GregorianCalendar(TimeZone.getTimeZone("UTC"));
+            gc.setTime(Date.from(Instant.parse(lastCreationDateUpdated)));
+            ondaConf.getOndaScanner().setLastCreationDate(DatatypeFactory.newInstance().newXMLGregorianCalendar(gc));
+            CONFIGURATION_MANAGER.saveConfiguration();
+         }
+      }
+      catch (DateTimeParseException e)
+      {
+         for (OpenSearchResultEntry opensearchResult : openSearchResultEntries)
+         {
+            if (lastCreationDateUpdated.contentEquals(opensearchResult.creationDate))
+            {
+               LOGGER.error(String.format("Error while running ONDA Scanner '%s': %s for Product (UUID/NAME): %s / %s", name, e.getMessage(), opensearchResult.id, opensearchResult.name), e);
+               break;
+            }
+         }
+      }
+      catch (ParserConfigurationException | SAXException | IOException | DatatypeConfigurationException | ConfigurationException e)
+      {
+         LOGGER.error("Error while running ONDA Scanner '"+name+"': "+e.getMessage(),e);
+      }
+   }
+
+   private static List<OpenSearchResultEntry> parseXML(final Document doc)
+   {
+      List<OpenSearchResultEntry> openSearchResultEntries = new ArrayList<OpenSearchResultEntry>();
+      NodeList entries = doc.getElementsByTagName(XML_ENTRY);
+      for(int i = 0; i < entries.getLength(); ++i)
+      {
+         Node entry = entries.item(i);
+         OpenSearchResultEntry opensearchResult = new OpenSearchResultEntry();
+         NodeList childs = entry.getChildNodes();
+         for(int j = 0; j < childs.getLength(); ++j)
+         {
+            Node child = childs.item(j);
+            if(child == null)
+            {
+               continue;
+            }
+            final String childName = child.getNodeName();
+            if(childName == null)
+            {
+               continue;
+            }
+            if(XML_ID.contentEquals(childName))
+            {
+               opensearchResult.id = child.getTextContent();
+               continue;
+            }
+            if(XML_NAME.contentEquals(childName))
+            {
+               opensearchResult.name = child.getTextContent();
+               continue;
+            }
+            if(XML_STORAGE.contentEquals(childName))
+            {
+               opensearchResult.storage = child.getTextContent();
+               continue;
+            }
+            if(XML_CREATION_DATE.contentEquals(childName))
+            {
+               opensearchResult.creationDate = child.getTextContent();
+            }
+         }
+         openSearchResultEntries.add(opensearchResult);
+      }
+      return openSearchResultEntries;
+   }
+
+   private void processResult(final List<OpenSearchResultEntry> openSearchResultEntries, final PersistentKeyStore keystore)
+   {
+      for(OpenSearchResultEntry opensearchResult : openSearchResultEntries)
+      {
+         lastCreationDateUpdated = opensearchResult.creationDate;
+         String ref = keystore.get(opensearchResult.id, DataStore.UNALTERED_PRODUCT_TAG);
+         if (ref != null)
+         {
+            LOGGER.debug("Onda Scanner : Product '" + opensearchResult.name + "' already referenced by '"+ref+"'");
+            continue;
+         }
+         LOGGER.debug("Onda Scanner : Processing product '" + opensearchResult.name + "'");
+         final Product prod = PRODUCT_SERVICE.systemGetProduct(opensearchResult.id);
+         if(prod != null)
+         {
+            if(prod.isOnline())
+            {
+               LOGGER.info("Onda Scanner : Referencing '" + opensearchResult.name + "' ("+prod.getUuid()+") to '"+region + ";" + opensearchResult.storage + ";" + opensearchResult.name+"'");
+               keystore.put(opensearchResult.id, DataStore.UNALTERED_PRODUCT_TAG, region + ";" + opensearchResult.storage + ";" + opensearchResult.name);
+               ++referenced;
+            }
+         }
+      }
+   }
+
+   static class OpenSearchResultEntry
+   {
+      private String id;
+      private String name;
+      private String storage;
+      private String creationDate;
+   }
+
+}
diff --git a/core/src/main/java/org/dhus/store/datastore/async/onda/OndaDataStoreScannerScheduler.java b/core/src/main/java/org/dhus/store/datastore/async/onda/OndaDataStoreScannerScheduler.java
new file mode 100644
index 000000000..dd7176eb7
--- /dev/null
+++ b/core/src/main/java/org/dhus/store/datastore/async/onda/OndaDataStoreScannerScheduler.java
@@ -0,0 +1,80 @@
+package org.dhus.store.datastore.async.onda;
+
+import java.text.ParseException;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.dhus.scanner.schedule.ScannerJob;
+import org.dhus.store.datastore.config.OndaDataStoreConf;
+import org.quartz.CronTrigger;
+import org.quartz.JobBuilder;
+import org.quartz.JobDetail;
+import org.quartz.Scheduler;
+import org.quartz.SchedulerException;
+import org.quartz.impl.StdSchedulerFactory;
+import org.springframework.scheduling.quartz.CronTriggerFactoryBean;
+import org.springframework.stereotype.Component;
+
+@Component
+public class OndaDataStoreScannerScheduler
+{
+   private static final Logger LOGGER = LogManager.getLogger(OndaDataStoreScannerScheduler.class);
+
+   private Scheduler scheduler;
+
+   public OndaDataStoreScannerScheduler()
+   {
+      try
+      {
+         scheduler = StdSchedulerFactory.getDefaultScheduler();
+      }
+      catch (SchedulerException e)
+      {
+         LOGGER.error(e.getMessage());
+      }
+   }
+
+   public void scheduleScanner(String scannerId, OndaDataStoreConf sc) throws SchedulerException, ParseException
+   {
+      JobDetail job = JobBuilder.newJob (OndaDataStoreScannerJob.class)
+            .withIdentity(scannerId, "OndaDataStoreScanner")
+            .usingJobData(OndaDataStoreScannerJob.DATASTORE_NAME, sc.getName())
+            .build ();
+         
+      CronTriggerFactoryBean trigger = new CronTriggerFactoryBean ();
+      trigger.setJobDetail (job);
+      trigger.setCronExpression (sc.getOndaScanner().getCron().getSchedule());
+      trigger.setName (scannerId + "Trigger");
+      trigger.afterPropertiesSet ();
+      
+      CronTrigger t = trigger.getObject();
+
+      if (scheduler.checkExists(job.getKey()))
+      {
+         scheduler.deleteJob(job.getKey());
+      }
+      scheduler.scheduleJob(job,t);
+   }
+
+   public void unscheduleScanner(String scannerId) throws SchedulerException
+   {
+      JobDetail jobDetail = JobBuilder.newJob(OndaDataStoreScannerJob.class)
+            .withIdentity(scannerId, "OndaDataStoreScanner")
+            .build();
+
+      if (scheduler.checkExists(jobDetail.getKey()))
+      {
+         scheduler.deleteJob(jobDetail.getKey());
+      }
+   }
+
+   public void start() throws SchedulerException
+   {
+      scheduler.start();
+   }
+
+   public boolean isStarted() throws SchedulerException
+   {
+      return scheduler.isStarted();
+   }
+}
diff --git a/core/src/main/java/org/dhus/store/datastore/async/pdgs/ParallelProductDownloadManager.java b/core/src/main/java/org/dhus/store/datastore/async/pdgs/ParallelProductDownloadManager.java
index 48f80ef12..6969a42ce 100644
--- a/core/src/main/java/org/dhus/store/datastore/async/pdgs/ParallelProductDownloadManager.java
+++ b/core/src/main/java/org/dhus/store/datastore/async/pdgs/ParallelProductDownloadManager.java
@@ -68,6 +68,7 @@ public class ParallelProductDownloadManager
       Future<?> f = this.threadPool.submit(task);
       ProductDownload downloadProduct = new ProductDownload(streamableProduct, f);
       runningDownloads.add(downloadProduct);
+      LOGGER.debug("Adding download '{}'",streamableProduct.getName());
       return f;
    }
 
@@ -100,10 +101,12 @@ public class ParallelProductDownloadManager
     */
    public void checkProductDownloads()
    {
+      LOGGER.debug("--- Checking running downloads - "+runningDownloads);
       Iterator<ProductDownload> it = runningDownloads.iterator();
       while (it.hasNext())
       {
          ProductDownload task = it.next();
+         LOGGER.debug("Checking download '{}'",task.getStreamableProduct().getName());
          if (task.isDone())
          {
             try
@@ -122,6 +125,7 @@ public class ParallelProductDownloadManager
          }
       }
       LOGGER.debug("ParallelProductDownloadManager: {} downloads running", runningDownloads.size());
+      LOGGER.debug("--- Running downloads left : "+runningDownloads);
    }
 
    /** Creates only daemon threads. */
@@ -131,6 +135,7 @@ public class ParallelProductDownloadManager
       public Thread newThread(Runnable r)
       {
          Thread thread = new Thread(r, "download-product");
+         thread.setName("download-product-"+thread.getId());
          thread.setDaemon(true);
          return thread;
       }
@@ -178,5 +183,11 @@ public class ParallelProductDownloadManager
       {
          return streamableProduct;
       }
+      
+      @Override
+      public String toString()
+      {
+         return "("+streamableProduct.getName()+" - "+(downloadTask.isDone()?"done":"running")+")";
+      }
    }
 }
diff --git a/core/src/main/java/org/dhus/store/datastore/async/pdgs/ParamPdgsDataStore.java b/core/src/main/java/org/dhus/store/datastore/async/pdgs/ParamPdgsDataStore.java
index af76b9c69..b75c85d04 100644
--- a/core/src/main/java/org/dhus/store/datastore/async/pdgs/ParamPdgsDataStore.java
+++ b/core/src/main/java/org/dhus/store/datastore/async/pdgs/ParamPdgsDataStore.java
@@ -1,6 +1,6 @@
 /*
  * Data Hub Service (DHuS) - For Space data distribution.
- * Copyright (C) 2019 GAEL Systems
+ * Copyright (C) 2019,2020 GAEL Systems
  *
  * This file is part of DHuS software sources.
  *
@@ -39,6 +39,7 @@ import org.apache.solr.common.SolrDocument;
 import org.apache.solr.common.SolrDocumentList;
 
 import org.dhus.Util;
+import org.dhus.store.datastore.DataStore;
 import org.dhus.store.datastore.async.AsyncDataStoreException;
 import org.dhus.store.datastore.config.PatternReplace;
 
@@ -72,13 +73,12 @@ public class ParamPdgsDataStore extends PdgsDataStore
     * @param name                      of this DataStore
     * @param priority                  DataStores are ordered
     * @param isManager                 true to enable the ingest job in this instance of the DHuS (only one instance per cluster)
-    * @param hfsLocation               path to the local HFS cache
     * @param patternReplaceIn          transform PDGS identifiers to DHuS identifiers
     * @param patternReplaceOut         transform DHuS identifiers to PDGS identifiers
     * @param maxPendingRequests        maximum number of pending orders at the same time
-    * @param maxPendingRequests        maximum number of running orders at the same time
-    * @param maximumSize               maximum size in bytes of the local HFS cache DataStore
-    * @param currentSize               overall size of the local HFS cache DataStore (disk usage)
+    * @param maxRunningRequests        maximum number of running orders at the same time
+    * @param maximumSize               maximum size in bytes of the local cache DataStore
+    * @param currentSize               overall size of the local cache DataStore (disk usage)
     * @param autoEviction              true to activate auto-eviction based on disk usage on the local HFS cache DataStore
     * @param urlService                URL to connect to the PDGS Service
     * @param login                     user to log to PDGS Service
@@ -86,20 +86,21 @@ public class ParamPdgsDataStore extends PdgsDataStore
     * @param interval                  interval
     * @param maxConcurrentsDownloads   maximum number of product download occurring in parallel
     * @param hashAlgorithms            to compute on restore
+    * @param cache                     local cache, can be HFS or OpenStack
     * @param getProductUrlParamPattern pattern of product request URL to perform
     * @param productNamePattern        shape of product "names" in responses
     *
     * @throws URISyntaxException could not create PDGSDataStore
     * @throws IOException        could not create PDGS repo location directory
     */
-   public ParamPdgsDataStore(String name, int priority, boolean isManager, String hfsLocation,
+   public ParamPdgsDataStore(String name, int priority, boolean isManager,
          PatternReplace patternReplaceIn, PatternReplace patternReplaceOut, Integer maxPendingRequests, Integer maxRunningRequests,
          long maximumSize, long currentSize, boolean autoEviction, String urlService, String login, String password,
-         long interval, int maxConcurrentsDownloads, String[] hashAlgorithms, String getProductUrlParamPattern, String productNamePattern)
+         long interval, int maxConcurrentsDownloads, String[] hashAlgorithms, DataStore cache, String getProductUrlParamPattern, String productNamePattern)
          throws URISyntaxException, IOException
    {
-      super(name, priority, isManager, hfsLocation, patternReplaceIn, patternReplaceOut, maxPendingRequests, maxRunningRequests,
-            maximumSize, currentSize, autoEviction, urlService, login, password, interval, maxConcurrentsDownloads, hashAlgorithms);
+      super(name, priority, isManager, patternReplaceIn, patternReplaceOut, maxPendingRequests, maxRunningRequests,
+            maximumSize, currentSize, autoEviction, urlService, login, password, interval, maxConcurrentsDownloads, hashAlgorithms, cache);
 
       LOGGER.debug("Initializing ParamPdgsDataStore: {}", name);
 
diff --git a/core/src/main/java/org/dhus/store/datastore/async/pdgs/PdgsDataStore.java b/core/src/main/java/org/dhus/store/datastore/async/pdgs/PdgsDataStore.java
index fce8cd00b..ac0abe74d 100644
--- a/core/src/main/java/org/dhus/store/datastore/async/pdgs/PdgsDataStore.java
+++ b/core/src/main/java/org/dhus/store/datastore/async/pdgs/PdgsDataStore.java
@@ -19,9 +19,6 @@
  */
 package org.dhus.store.datastore.async.pdgs;
 
-import fr.gael.dhus.database.object.Order;
-import fr.gael.dhus.util.http.Timeouts;
-
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -32,23 +29,32 @@ import java.net.URL;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.ArrayList;
 import java.util.Base64;
 import java.util.Date;
 import java.util.List;
+import java.util.Map;
 import java.util.Objects;
 import java.util.Timer;
+import java.util.stream.Collectors;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
+import org.dhus.Product;
+import org.dhus.ProductConstants;
 import org.dhus.api.JobStatus;
+import org.dhus.store.datastore.DataStore;
 import org.dhus.store.datastore.DataStoreException;
 import org.dhus.store.datastore.StreamableProduct;
 import org.dhus.store.datastore.async.AbstractAsyncCachedDataStore;
 import org.dhus.store.datastore.async.AsyncDataStoreException;
+import org.dhus.store.datastore.async.BadlySizedProductException;
 import org.dhus.store.datastore.async.pdgs.PDGSJob.JSONParseException;
 import org.dhus.store.datastore.config.PatternReplace;
 
+import fr.gael.dhus.database.object.Order;
+import fr.gael.dhus.util.http.Timeouts;
+
 /**
  * A store backed by a PDGS.
  */
@@ -68,6 +74,8 @@ public class PdgsDataStore extends AbstractAsyncCachedDataStore
    private static final String STATUS_DONE = "done";
    private static final String STATUS_FAILED = "failed";
 
+   private static final String CONTENT_LENGTH = "Content-Length";
+   
    private static final String PRODUCTS = "products";
    private static final String JOBS = "jobs";
    private static final String JOB = "job";
@@ -89,13 +97,12 @@ public class PdgsDataStore extends AbstractAsyncCachedDataStore
     * @param name                    of this DataStore
     * @param priority                DataStores are ordered
     * @param isManager               true to enable the ingest job in this instance of the DHuS (only one instance per cluster)
-    * @param hfsLocation             path to the local HFS cache
     * @param patternReplaceIn        transform PDGS identifiers to DHuS identifiers
     * @param patternReplaceOut       transform DHuS identifiers to PDGS identifiers
     * @param maxPendingRequests      maximum number of pending orders at the same time
     * @param maxRunningRequests      maximum number of running orders at the same time
-    * @param maximumSize             maximum size in bytes of the local HFS cache DataStore
-    * @param currentSize             overall size of the local HFS cache DataStore (disk usage)
+    * @param maximumSize             maximum size in bytes of the local cache DataStore
+    * @param currentSize             overall size of the local cache DataStore (disk usage)
     * @param autoEviction            true to activate auto-eviction based on disk usage on the local HFS cache DataStore
     * @param urlService              URL to connect to the PDGS Service
     * @param login                   user to log to PDGS Service
@@ -103,17 +110,19 @@ public class PdgsDataStore extends AbstractAsyncCachedDataStore
     * @param interval                interval
     * @param maxConcurrentsDownloads maximum number of product download occurring in parallel
     * @param hashAlgorithms          to compute on restore
+    * @param cache                   local cache, can be HFS or OpenStack
+    *
     * @throws URISyntaxException could not create PDGSDataStore
     * @throws IOException        could not create PDGS repo location directory
     */
-public PdgsDataStore(String name, int priority, boolean isManager, String hfsLocation,
+public PdgsDataStore(String name, int priority, boolean isManager,
       PatternReplace patternReplaceIn, PatternReplace patternReplaceOut, Integer maxPendingRequests, Integer maxRunningRequests,
       long maximumSize, long currentSize, boolean autoEviction, String urlService, String login, String password,
-      long interval, int maxConcurrentsDownloads, String[] hashAlgorithms)
+      long interval, int maxConcurrentsDownloads, String[] hashAlgorithms, DataStore cache)
             throws URISyntaxException, IOException
 {
-   super(name, priority, hfsLocation, patternReplaceIn, patternReplaceOut, maxPendingRequests, maxRunningRequests,
-         maximumSize, currentSize, autoEviction, hashAlgorithms);
+   super(name, priority, patternReplaceIn, patternReplaceOut, maxPendingRequests, maxRunningRequests,
+         maximumSize, currentSize, autoEviction, hashAlgorithms, cache);
 
       Objects.requireNonNull(urlService);
 
@@ -125,7 +134,7 @@ public PdgsDataStore(String name, int priority, boolean isManager, String hfsLoc
       this.login = login;
       this.password = password;
 
-      LOGGER.info("New PDGS DataStore, name={} url={} hfsLocation={}", getName(), urlService, hfsLocation);
+      LOGGER.info("New PDGS DataStore, name={} url={} cache={}", getName(), urlService, cache.getName());
 
       LOGGER.info("This DHuS instance {} the PDGS manager", isManager ? "is" : "isn't");
 
@@ -133,7 +142,7 @@ public PdgsDataStore(String name, int priority, boolean isManager, String hfsLoc
       if (isManager)
       {
          timer = new Timer("Run PDGS Job", true);
-         timer.schedule(new RunJob(), 0, interval);
+         timer.schedule(new RunJob(), 60_000, interval);
       }
       else
       {
@@ -343,13 +352,26 @@ public PdgsDataStore(String name, int priority, boolean isManager, String hfsLoc
       HttpURLConnection connection;
       InputStream inputStream;
       String downloadUrl = pdgsJob.getProductUrl();
-
+      long headerLength = -1;
+      LOGGER.debug("Downloading '{}' / {} from '{}'",pdgsJob.getProductName(), uuid, downloadUrl);
       // normal case
       if (downloadUrl.startsWith("http://") || downloadUrl.startsWith("https://"))
       {
          connection = openConnection(new URL(downloadUrl), HTTP_METHOD_GET, null);
-         connection.setReadTimeout(Timeouts.CONNECTION_TIMEOUT);
-         connection.setConnectTimeout(Timeouts.CONNECTION_TIMEOUT);
+         Map<String, List<String>> requestHeaders = connection.getRequestProperties();
+         LOGGER.debug("Download for product {} - request headers : {}", uuid, requestHeaders.keySet().stream()
+               .map(key -> key + "=" + requestHeaders.get(key)).collect(Collectors.joining(", ", "{", "}")));
+         Map<String, List<String>> responseHeaders = connection.getHeaderFields();
+         LOGGER.debug("Download for product {} - response headers : {}", uuid, responseHeaders.keySet().stream()
+               .map(key -> key + "=" + responseHeaders.get(key)).collect(Collectors.joining(", ", "{", "}")));
+         if (responseHeaders.containsKey(CONTENT_LENGTH))
+         {
+            List<String> header = responseHeaders.get(CONTENT_LENGTH);
+            if (header.size() > 0)
+            {
+               headerLength = Long.parseLong(header.get(0));
+            }
+         }
          inputStream = connection.getInputStream();
       }
       // special case for special lta brokers
@@ -367,6 +389,12 @@ public PdgsDataStore(String name, int priority, boolean isManager, String hfsLoc
       // make simple stream product
       StreamableProduct product = new StreamableProduct(inputStream);
 
+      if (headerLength != -1)
+      {
+         // save Content-Length to check downloaded product
+         product.setProperty(CONTENT_LENGTH, headerLength);
+      }
+      
       // don't forget to call that very convenient setter for product name
       product.setName(fileName);
 
@@ -380,8 +408,15 @@ public PdgsDataStore(String name, int priority, boolean isManager, String hfsLoc
             // refresh database order
             refreshOrder(uuid, getName(), pdgsJob.getJobId(), JobStatus.COMPLETED, pdgsJob.getEstimatedTime(), pdgsJob.getStatusMessage());
          }
+         catch (BadlySizedProductException ex)
+         {
+            LOGGER.debug("Error while moving product '{}' / {} : {}", product.getName(), uuid, ex.getMessage(), ex);
+            // refresh database order
+            refreshOrder(uuid, getName(), pdgsJob.getJobId(), JobStatus.FAILED, pdgsJob.getEstimatedTime(), "Product retrieval has failed");
+         }
          catch (DataStoreException ex)
          {
+            LOGGER.debug("Error while moving product '{}' / {} : {}", product.getName(), uuid, ex.getMessage(), ex);
             // refresh database order
             refreshOrder(uuid, getName(), pdgsJob.getJobId(), JobStatus.FAILED, pdgsJob.getEstimatedTime(), pdgsJob.getStatusMessage());
          }
@@ -394,6 +429,18 @@ public PdgsDataStore(String name, int priority, boolean isManager, String hfsLoc
 
       LOGGER.info("Product download {} successfully queued", product.getName());
    }
+   
+   @Override
+   public void validateProduct(Product product, String uuid) throws DataStoreException 
+   {
+      Long contentLength = (Long) product.getProperty(CONTENT_LENGTH);
+      Long size = (Long) product.getProperty(ProductConstants.DATA_SIZE);
+      if (contentLength != null && !contentLength.equals(size))
+      {
+         LOGGER.error("Received binary for product {} ({}) has not the right size. Expected {} bytes, recived {} bytes", product.getName(), uuid, contentLength, size);
+         throw new BadlySizedProductException("Received binary for product "+product.getName()+" ("+uuid+") has not the right size. Expected "+contentLength+" bytes, recived "+size+" bytes");
+      }
+   }
 
    private void silentlyClose(HttpURLConnection connection, InputStream inputStream)
    {
@@ -520,7 +567,8 @@ public PdgsDataStore(String name, int priority, boolean isManager, String hfsLoc
             LOGGER.error("Could not refresh Order for product {} ({} in Job)", localIdentifier, remoteIdentifier);
             return false;
          }
-
+         LOGGER.debug("Restoring product '{}' / {} - {} : {} ",pdgsJob.getProductName(),productUUID,pdgsJob.getStatusCode(),pdgsJob.getStatusMessage());
+         
          // start product download of completed jobs
          if (STATUS_COMPLETED.equals(pdgsJob.getStatusCode()))
          {
diff --git a/core/src/main/java/org/dhus/store/datastore/config/DataStoreManager.java b/core/src/main/java/org/dhus/store/datastore/config/DataStoreManager.java
index 5449ed120..79bca04e0 100644
--- a/core/src/main/java/org/dhus/store/datastore/config/DataStoreManager.java
+++ b/core/src/main/java/org/dhus/store/datastore/config/DataStoreManager.java
@@ -31,6 +31,7 @@ import org.apache.logging.log4j.Logger;
 import fr.gael.dhus.spring.context.ApplicationContextProvider;
 import fr.gael.dhus.system.config.ConfigurationException;
 import fr.gael.dhus.system.config.ConfigurationManager;
+import fr.gael.dhus.DHuS;
 
 /**
  * Manages DataStores defined in configuration file (dhus.xml).
@@ -67,13 +68,21 @@ public class DataStoreManager extends DataStores
     */
    public NamedDataStoreConf getNamed(String name)
    {
-      for (DataStoreConf dataStoreConf: getDataStore())
+      for (DataStoreConf dataStoreConf : getDataStore())
       {
-         if (dataStoreConf != null
-               && dataStoreConf instanceof NamedDataStoreConf
-               && ((NamedDataStoreConf) dataStoreConf).getName().equals(name))
+         if (dataStoreConf != null)
          {
-            return (NamedDataStoreConf) dataStoreConf;
+            if (dataStoreConf instanceof AsyncDataStoreConf
+                  && ((NamedDataStoreConf) ((AsyncDataStoreConf) dataStoreConf).getDataStore())
+                        .getName().equals(name))
+            {
+               return (NamedDataStoreConf) ((AsyncDataStoreConf) dataStoreConf).getDataStore();
+            }
+            else if (dataStoreConf instanceof NamedDataStoreConf
+                  && ((NamedDataStoreConf) dataStoreConf).getName().equals(name))
+            {
+               return (NamedDataStoreConf) dataStoreConf;
+            }
          }
       }
       return null;
@@ -187,7 +196,22 @@ public class DataStoreManager extends DataStores
             }
             else
             {
-               LOGGER.warn("Found duplicate DataStoreConfiguration of name: {}", namedDsc.getName());
+               LOGGER.error("Found duplicate DataStoreConfiguration of name: {}", namedDsc.getName());
+               DHuS.stop(4);
+            }
+         }
+         if (dataStoreConf instanceof AsyncDataStoreConf)
+         {
+            AsyncDataStoreConf async = (AsyncDataStoreConf) dataStoreConf;
+            NamedDataStoreConf namedDsc = (NamedDataStoreConf)async.getDataStore();
+            if (!dataStoreNames.contains(namedDsc.getName()))
+            {
+               dataStoreNames.add(namedDsc.getName());
+            }
+            else
+            {
+               LOGGER.error("Found duplicate DataStoreConfiguration of name: {}", namedDsc.getName());
+               DHuS.stop(4);
             }
          }
       }
@@ -212,7 +236,8 @@ public class DataStoreManager extends DataStores
 
    public synchronized long varyCurrentSize(String dataStoreName, long amount)
    {
-      NamedDataStoreConf dataStoreConf = getNamed(dataStoreName);
+      NamedDataStoreConf dataStoreConf;
+      dataStoreConf = getNamed(dataStoreName);
       if (dataStoreConf != null)
       {
          dataStoreConf.setCurrentSize(dataStoreConf.getCurrentSize() + amount);
diff --git a/core/src/main/java/org/dhus/store/datastore/hfs/HfsDataStore.java b/core/src/main/java/org/dhus/store/datastore/hfs/HfsDataStore.java
index b92bd28a0..f050a504b 100644
--- a/core/src/main/java/org/dhus/store/datastore/hfs/HfsDataStore.java
+++ b/core/src/main/java/org/dhus/store/datastore/hfs/HfsDataStore.java
@@ -76,6 +76,7 @@ public class HfsDataStore extends AbstractDataStore
    {
       if (product.hasImpl(File.class))
       {
+         LOGGER.debug("Copying '{}' from file.",product.getName());
          Path productPath = product.getImpl(File.class).toPath();
          try
          {
@@ -89,6 +90,7 @@ public class HfsDataStore extends AbstractDataStore
       }
       else if (product.hasImpl(InputStream.class))
       {
+         LOGGER.debug("Copying '{}' from stream.",product.getName());
          copyProduct(product, destination);
       }
       else
@@ -100,6 +102,7 @@ public class HfsDataStore extends AbstractDataStore
       // handle size and eviction
       long dataSize = Files.size(destination);
       product.setProperty(ProductConstants.DATA_SIZE, dataSize);
+      LOGGER.debug("Size received for '{}' : {}",product.getName(), dataSize);
 
       // TODO increase current size of datastore BEFORE calling
       // on insert eviction, and change the way onInsertEviction
@@ -136,7 +139,7 @@ public class HfsDataStore extends AbstractDataStore
       {
          Path path = getNextLocation(product);
          String destination = HfsDataStoreUtils.generateResource(hfs.getPath(), path.toString());
-
+         LOGGER.debug("Put product '{}' / {} into {}",product.getName(), uuid, destination);
          putResource(uuid, tag, destination);
          put(product, path);
       }
diff --git a/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackDataStore.java b/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackDataStore.java
index 610da4377..dc821df2b 100644
--- a/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackDataStore.java
+++ b/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackDataStore.java
@@ -69,7 +69,7 @@ public class OpenStackDataStore extends AbstractDataStore
    private final String container;
    private final String region;
 
-   private volatile DrbSwiftObject ostack = null;
+   private OpenStackObject ostack;
 
    /**
     * Build an open-stack storage API for DHuS data store. Currently only swift is supported.
@@ -100,60 +100,8 @@ public class OpenStackDataStore extends AbstractDataStore
       this.container = container;
       this.region = region;
       this.hashAlgorithms = hashAlgorithms;
-   }
-
-   /**
-    * Retrieve the OpenStack storage object from the construction parameters.
-    *
-    * @return the object to manipulate OpenStack
-    */
-   private DrbSwiftObject getOpenStackObject()
-   {
-      // Double-checked locking using a local variable for better performances
-      DrbSwiftObject res = this.ostack;
-      if (res == null)
-      {
-         synchronized (this)
-         {
-            res = this.ostack;
-            if (res == null)
-            {
-               res = createOpenStackObject();
-               if (res != null)
-               {
-                  this.ostack = res;
-               }
-            }
-         }
-      }
-      return res;
-   }
 
-   /**
-    * Always create a new DrbSwiftObject, use {@link #getOpenStackObject()} instead (lazy loading).
-    * @return a new instance or null of the configuration is invalid (error logged)
-    */
-   private DrbSwiftObject createOpenStackObject()
-   {
-      // Keystone v3 API
-      if (url.contains("/v3"))
-      {
-         String[] splitIdentity = this.identity.split(":");
-         if (splitIdentity.length != 3)
-         {
-            LOGGER.error("Invalid identity format, must be: <domain>:<project>:<username>");
-            return null;
-         }
-         else
-         {
-            String domain   = splitIdentity[0];
-            String project  = splitIdentity[1];
-            String username = splitIdentity[2];
-            return new DrbSwiftObject(this.url, this.provider, username, project, this.credential, domain);
-         }
-      }
-      // Keystone v3 API
-      return new DrbSwiftObject(this.url, this.provider, this.identity, this.credential);
+      ostack = new OpenStackObject(provider, identity, credential, url);
    }
 
    /**
@@ -216,7 +164,7 @@ public class OpenStackDataStore extends AbstractDataStore
 
          try (InputStream source = src)
          {
-            getOpenStackObject().putObject(source, product.getName(), container, region, product_size, user_data);
+            ostack.getOpenStackObject().putObject(source, product.getName(), container, region, product_size, user_data);
          }
 
          if (MultipleDigestInputStream.class.isAssignableFrom(src.getClass()))
@@ -253,7 +201,7 @@ public class OpenStackDataStore extends AbstractDataStore
                String.format("Invalid resource location for product: %s (%s)", uuid, tag), e);
       }
 
-      return new OpenStackProduct(getOpenStackObject(), location);
+      return new OpenStackProduct(ostack.getOpenStackObject(), location);
    }
 
    @Override
@@ -264,7 +212,7 @@ public class OpenStackDataStore extends AbstractDataStore
          throw new ProductAlreadyExist();
       }
 
-      DrbSwiftObject open_stack = getOpenStackObject();
+      DrbSwiftObject open_stack = ostack.getOpenStackObject();
       String object_name = product.getName();
 
       boolean duplicate = open_stack.exists(object_name, container, region);
@@ -308,7 +256,7 @@ public class OpenStackDataStore extends AbstractDataStore
    protected final void internalDeleteProduct(String resourceLocation)
          throws ProductNotFoundException, ReadOnlyDataStoreException
    {
-      DrbSwiftObject open_stack = getOpenStackObject();
+      DrbSwiftObject open_stack = ostack.getOpenStackObject();
 
       OpenStackLocation object_location = new OpenStackLocation(resourceLocation);
       String object_name = object_location.getObjectName();
@@ -318,7 +266,7 @@ public class OpenStackDataStore extends AbstractDataStore
          BlobMetadata blobMetadata = open_stack.getMetadata(container, region, object_name);
          long dataSize = blobMetadata.getSize();
 
-         getOpenStackObject().deleteObject(object_name, this.container, this.region);
+         ostack.getOpenStackObject().deleteObject(object_name, this.container, this.region);
 
          // report DataStore size decrease
          decreaseCurrentSize(dataSize);
@@ -334,7 +282,7 @@ public class OpenStackDataStore extends AbstractDataStore
          if (location.getRegion ().equals (this.getRegion ()) && 
                   location.getContainer ().equals (this.getContainer ()))
          {
-            return getOpenStackObject().exists(location.getObjectName(), container, region);
+            return ostack.getOpenStackObject().exists(location.getObjectName(), container, region);
          }
          return false;
       }
diff --git a/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackLocation.java b/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackLocation.java
index cf17c5a4d..12a10b9d3 100644
--- a/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackLocation.java
+++ b/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackLocation.java
@@ -25,7 +25,7 @@ import java.util.regex.Pattern;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-final class OpenStackLocation
+public final class OpenStackLocation
 {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final String STR_PATTERN = "%s;%s;%s";
diff --git a/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackObject.java b/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackObject.java
new file mode 100644
index 000000000..f5e6d4afc
--- /dev/null
+++ b/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackObject.java
@@ -0,0 +1,105 @@
+/*
+ * Data Hub Service (DHuS) - For Space data distribution.
+ * Copyright (C) 2020 GAEL Systems
+ *
+ * This file is part of DHuS software sources.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+
+
+
+package org.dhus.store.datastore.openstack;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import fr.gael.drb.impl.swift.DrbSwiftObject;
+
+public class OpenStackObject
+{
+
+   private final String provider;
+   private final String identity;
+   private final String credential;
+   private final String url;
+
+   private volatile DrbSwiftObject ostack = null;
+   
+   private static final Logger LOGGER = LogManager.getLogger();
+   
+   
+   public OpenStackObject(String provider, String identity, String credential, String url)
+   {
+      this.provider = provider;
+      this.identity = identity;
+      this.credential = credential;
+      this.url = url;
+   }
+
+   /**
+    * Retrieve the OpenStack storage object from the construction parameters.
+    *
+    * @return the object to manipulate OpenStack
+    */
+   public DrbSwiftObject getOpenStackObject()
+   {
+      // Double-checked locking using a local variable for better performances
+      DrbSwiftObject res = this.ostack;
+      if (res == null)
+      {
+         synchronized (this)
+         {
+            res = this.ostack;
+            if (res == null)
+            {
+               res = createOpenStackObject();
+               if (res != null)
+               {
+                  this.ostack = res;
+               }
+            }
+         }
+      }
+      return res;
+   }
+
+   /**
+    * Always create a new DrbSwiftObject, use {@link #getOpenStackObject()} instead (lazy loading).
+    * @return a new instance or null of the configuration is invalid (error logged)
+    */
+   private DrbSwiftObject createOpenStackObject()
+   {
+      // Keystone v3 API
+      if (url.contains("/v3"))
+      {
+         String[] splitIdentity = this.identity.split(":");
+         if (splitIdentity.length != 3)
+         {
+            LOGGER.error("Invalid identity format, must be: <domain>:<project>:<username>");
+            return null;
+         }
+         else
+         {
+            String domain   = splitIdentity[0];
+            String project  = splitIdentity[1];
+            String username = splitIdentity[2];
+            return new DrbSwiftObject(this.url, this.provider, username, project, this.credential, domain);
+         }
+      }
+      // Keystone v3 API
+      return new DrbSwiftObject(this.url, this.provider, this.identity, this.credential);
+   }  
+}
diff --git a/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackProduct.java b/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackProduct.java
index 30a0c95df..efc89b974 100644
--- a/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackProduct.java
+++ b/core/src/main/java/org/dhus/store/datastore/openstack/OpenStackProduct.java
@@ -24,14 +24,17 @@ import java.io.InputStream;
 import java.net.URL;
 import java.util.Objects;
 
+import org.dhus.AbstractProduct;
+import org.dhus.ProductConstants;
+import org.dhus.store.datastore.DataStoreProduct;
+import org.jclouds.openstack.swift.v1.domain.SwiftObject;
+
 import fr.gael.drb.DrbNode;
 import fr.gael.drb.impl.DrbNodeImpl;
 import fr.gael.drb.impl.swift.DrbSwiftObject;
 import fr.gael.drb.impl.swift.SwiftFactory;
 import fr.gael.drb.impl.swift.SwiftObjectURL;
-import org.dhus.AbstractProduct;
-import org.dhus.store.datastore.DataStoreProduct;
-import org.jclouds.openstack.swift.v1.domain.SwiftObject;
+
 
 public class OpenStackProduct extends AbstractProduct implements DataStoreProduct
 {
@@ -44,6 +47,7 @@ public class OpenStackProduct extends AbstractProduct implements DataStoreProduc
    private final OpenStackLocation location;
 
    private SwiftObjectURL url;
+   private final String uuid;
 
    /**
     *
@@ -62,12 +66,29 @@ public class OpenStackProduct extends AbstractProduct implements DataStoreProduc
     * @param swiftServer
     * @param location
     */
-   OpenStackProduct(DrbSwiftObject swiftServer, OpenStackLocation location)
+   public OpenStackProduct(DrbSwiftObject swiftServer, OpenStackLocation location)
+   {    
+      this(swiftServer, location, null);
+   }
+   
+   /**
+   *
+   * @param swiftServer
+   * @param location
+   * @param uuid
+   */
+   public OpenStackProduct(DrbSwiftObject swiftServer, OpenStackLocation location, String uuid)
    {
       this.swift = Objects.requireNonNull(swiftServer);
       this.location = Objects.requireNonNull(location);
+      this.uuid = uuid;
       setName(location.getObjectName());
    }
+  
+   public String getUUID()
+   {
+      return uuid;
+   }
 
    @Override
    protected Class<?>[] implsTypes()
@@ -82,7 +103,14 @@ public class OpenStackProduct extends AbstractProduct implements DataStoreProduc
       {
          try
          {
-            return cl.cast(getURL().getUrl().openStream());
+            if (uuid != null)
+            {
+               return cl.cast(getObjectStorageURL().getUrl().openStream());
+            }
+            else
+            {
+               return cl.cast(getURL().getUrl().openStream());
+            }
          }
          catch (IOException e)
          {
@@ -97,8 +125,14 @@ public class OpenStackProduct extends AbstractProduct implements DataStoreProduc
 
       if (cl.isAssignableFrom(DrbNodeImpl.class))
       {
-         return cl.cast(SwiftFactory.node(swift, location.getRegion(),
-               location.getContainer(), location.getObjectName()));
+         if (uuid != null)
+         {
+            return cl.cast(swiftFactory(uuid.concat(".zip")));
+         }
+         else
+         {
+            return cl.cast(swiftFactory(location.getObjectName()));
+         }
       }
 
       if (cl.isAssignableFrom(DataStoreProduct.class))
@@ -137,4 +171,41 @@ public class OpenStackProduct extends AbstractProduct implements DataStoreProduc
       }
       return url;
    }
-}
+   
+   private SwiftObjectURL getObjectStorageURL()
+   {
+      if (this.url == null)
+      {
+         this.url = new SwiftObjectURL(swift.getUrl(uuid.concat(".zip"),
+               location.getContainer(), location.getRegion(), 0));
+      }
+      return url;
+   }
+
+   private DrbNode swiftFactory(String objectName)
+   {
+      return SwiftFactory.node(swift, location.getRegion(), location.getContainer(), objectName);
+   }
+
+   public String getRemoteName()
+   {
+      if (uuid != null)
+      {
+         return uuid.concat(".zip");
+      }
+      else
+      {
+         return getName();
+      }
+   }
+   
+   public void prepareDownloadInformation()
+   {
+      if (uuid != null)
+      {
+         DrbNode node = swiftFactory(uuid.concat(".zip"));
+         setProperty(ProductConstants.CHECKSUM_MD5, node.getAttribute("contentMD5").getValue().toString());
+         setProperty(ProductConstants.DATA_SIZE, Long.parseLong(node.getAttribute("contentLength").getValue().toString()));
+      }
+   }
+}
\ No newline at end of file
diff --git a/core/src/main/java/org/dhus/store/datastore/remotedhus/RemoteDhusDataStore.java b/core/src/main/java/org/dhus/store/datastore/remotedhus/RemoteDhusDataStore.java
index f1911d4c1..a35829470 100644
--- a/core/src/main/java/org/dhus/store/datastore/remotedhus/RemoteDhusDataStore.java
+++ b/core/src/main/java/org/dhus/store/datastore/remotedhus/RemoteDhusDataStore.java
@@ -22,6 +22,7 @@ package org.dhus.store.datastore.remotedhus;
 import java.io.IOException;
 import java.net.URISyntaxException;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -358,4 +359,10 @@ public class RemoteDhusDataStore implements DataStore, DerivedProductStore
          }
       }
    }
+
+   @Override
+   public Iterator<String> getScrollableProductResults()
+   {
+      return null;
+   }
 }
diff --git a/core/src/main/java/org/dhus/store/filter/FilteredAsyncDataStore.java b/core/src/main/java/org/dhus/store/filter/FilteredAsyncDataStore.java
index 9bde59f58..adc611149 100644
--- a/core/src/main/java/org/dhus/store/filter/FilteredAsyncDataStore.java
+++ b/core/src/main/java/org/dhus/store/filter/FilteredAsyncDataStore.java
@@ -24,6 +24,7 @@ import fr.gael.dhus.olingo.v1.visitor.ProductSQLVisitor;
 
 import java.util.List;
 
+import org.dhus.store.datastore.DataStore;
 import org.dhus.store.datastore.DataStoreException;
 import org.dhus.store.datastore.DataStoreFactory.InvalidConfigurationException;
 import org.dhus.store.datastore.async.AsyncDataStore;
@@ -70,4 +71,10 @@ public final class FilteredAsyncDataStore extends FilteredDataStore<AsyncDataSto
    {
       return decorated.getAndLogExistingOrder(uuid, localIdentifier, size);
    }
+
+   @Override
+   public DataStore getCache()
+   {
+      return decorated.getCache();
+   }
 }
diff --git a/core/src/main/java/org/dhus/store/filter/FilteredDataStore.java b/core/src/main/java/org/dhus/store/filter/FilteredDataStore.java
index 212ff0065..88968ca21 100644
--- a/core/src/main/java/org/dhus/store/filter/FilteredDataStore.java
+++ b/core/src/main/java/org/dhus/store/filter/FilteredDataStore.java
@@ -28,11 +28,9 @@ import java.util.Objects;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
 import org.apache.olingo.odata2.api.exception.ODataApplicationException;
 import org.apache.olingo.odata2.api.exception.ODataMessageException;
 import org.apache.olingo.odata2.api.uri.expression.FilterExpression;
-
 import org.dhus.Product;
 import org.dhus.store.datastore.DataStore;
 import org.dhus.store.datastore.DataStoreException;
@@ -120,9 +118,12 @@ public class FilteredDataStore<DST extends DataStore> extends AbstractDataStoreD
          extends FilteredDataStore<DPDST>
          implements AbstractDataStoreDecorator.DataStoreDecoratorHelper
    {
+      private final ProductSQLVisitor visitor;
+      
       public FileteredDerivedDataStore(DPDST decorated, ProductSQLVisitor visitor)
       {
          super(decorated, visitor);
+         this.visitor = visitor;
       }
 
       @Override
@@ -131,5 +132,21 @@ public class FilteredDataStore<DST extends DataStore> extends AbstractDataStoreD
          return this.decorated;
       }
 
+      @Override
+      public boolean hasDerivedProduct(String uuid, String tag)
+      {
+         fr.gael.dhus.database.object.Product product = PRODUCT_SERVICE.getFilteredProduct(uuid, visitor);
+         if (product != null)
+         {
+            return this.decorated.hasDerivedProduct(uuid, tag);
+         }
+         else
+         {
+            // means the product doesn't match the filter
+            LOGGER.debug("Filtered DataStore (hasDerivedProduct): Product {} does not match filter for {}", uuid, getName());
+            return false;
+         }
+      }
+
    }
 }
diff --git a/core/src/main/java/org/dhus/store/ingestion/IngestibleODataProduct.java b/core/src/main/java/org/dhus/store/ingestion/IngestibleODataProduct.java
index 62aca8ca7..de4438df9 100644
--- a/core/src/main/java/org/dhus/store/ingestion/IngestibleODataProduct.java
+++ b/core/src/main/java/org/dhus/store/ingestion/IngestibleODataProduct.java
@@ -49,6 +49,7 @@ public class IngestibleODataProduct implements IngestibleProduct
    private final Date ingestionDate;
    private final Date creationDate;
    private final Boolean onDemand;
+   private final Boolean online;
 
    // public metadata
    private final String itemClass;
@@ -72,7 +73,7 @@ public class IngestibleODataProduct implements IngestibleProduct
 
    private IngestibleODataProduct(String uuid, String origin, Date ingestionDate, Date creationDate,
          String itemClass, String identifier, Date contentStart, Date contentEnd, String footprint,
-         List<MetadataIndex> metadataIndexes, Product physicalProduct, Product quicklook, Product thumbnail, Boolean onDemand)
+         List<MetadataIndex> metadataIndexes, Product physicalProduct, Product quicklook, Product thumbnail, Boolean onDemand, Boolean online)
    {
       this.uuid = uuid;
       this.origin = origin;
@@ -90,6 +91,7 @@ public class IngestibleODataProduct implements IngestibleProduct
       this.product = physicalProduct;
       this.quicklook = quicklook;
       this.thumbnail = thumbnail;
+      this.online = online;
 
       this.properties = new HashMap<>();
 
@@ -119,6 +121,12 @@ public class IngestibleODataProduct implements IngestibleProduct
       {
          onDemand = false;
       }
+      
+      Boolean online = (Boolean)odataProductProperties.get("Online");
+      if (online == null)
+      {
+         online = false;
+      }
 
       // extract ContentDate complex property
       @SuppressWarnings("unchecked")
@@ -133,7 +141,7 @@ public class IngestibleODataProduct implements IngestibleProduct
       if (physicalProduct != null)
       {
          return new IngestibleODataProduct(uuid, origin, ingestionDate, creationDate, itemClass, identifier,
-               contentStart, contentEnd, footprint, metadataIndexList, physicalProduct, quicklook, thumbnail, onDemand);
+               contentStart, contentEnd, footprint, metadataIndexList, physicalProduct, quicklook, thumbnail, onDemand, online);
       }
       throw new MissingProductsException("Cannot instantiate without product, quicklook and thumbnail reference or downloadable");
    }
@@ -312,4 +320,10 @@ public class IngestibleODataProduct implements IngestibleProduct
    {
       return timerStopMillis - timerStartMillis;
    }
+
+   @Override
+   public Boolean isOnline()
+   {
+      return online;
+   }
 }
diff --git a/core/src/main/java/org/dhus/store/ingestion/IngestibleProduct.java b/core/src/main/java/org/dhus/store/ingestion/IngestibleProduct.java
index 43fccf19e..234fceb71 100644
--- a/core/src/main/java/org/dhus/store/ingestion/IngestibleProduct.java
+++ b/core/src/main/java/org/dhus/store/ingestion/IngestibleProduct.java
@@ -79,5 +79,7 @@ public interface IngestibleProduct extends Product, Closeable
    public Product getThumbnail();
 
    public boolean removeSource();
+   
+   public Boolean isOnline();
 }
 
diff --git a/core/src/main/java/org/dhus/store/ingestion/IngestibleRawProduct.java b/core/src/main/java/org/dhus/store/ingestion/IngestibleRawProduct.java
index 6c5db71a1..301aa3e65 100644
--- a/core/src/main/java/org/dhus/store/ingestion/IngestibleRawProduct.java
+++ b/core/src/main/java/org/dhus/store/ingestion/IngestibleRawProduct.java
@@ -19,29 +19,6 @@
  */
 package org.dhus.store.ingestion;
 
-import fr.gael.dhus.database.object.MetadataIndex;
-import fr.gael.dhus.database.object.config.product.ProductConfiguration;
-import fr.gael.dhus.datastore.processing.InconsistentImageScale;
-import fr.gael.dhus.datastore.processing.ProcessingUtils;
-import fr.gael.dhus.factory.MetadataFactory;
-import fr.gael.dhus.spring.context.ApplicationContextProvider;
-import fr.gael.dhus.system.config.ConfigurationManager;
-import fr.gael.dhus.system.init.WorkingDirectory;
-import fr.gael.dhus.util.DrbChildren;
-import fr.gael.dhus.util.WKTFootprintParser;
-
-import fr.gael.drb.DrbAttribute;
-import fr.gael.drb.DrbNode;
-import fr.gael.drb.DrbSequence;
-import fr.gael.drb.impl.DrbNodeImpl;
-import fr.gael.drb.impl.xml.XmlWriter;
-import fr.gael.drb.query.Query;
-import fr.gael.drb.value.Value;
-import fr.gael.drbx.cortex.DrbCortexItemClass;
-import fr.gael.drbx.image.ImageFactory;
-import fr.gael.drbx.image.impl.sdi.SdiImageFactory;
-import fr.gael.drbx.image.jai.RenderingFactory;
-
 import java.awt.image.RenderedImage;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -60,11 +37,11 @@ import java.time.format.DateTimeFormatterBuilder;
 import java.time.temporal.ChronoField;
 import java.time.temporal.TemporalAccessor;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -78,19 +55,38 @@ import javax.xml.parsers.ParserConfigurationException;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
 import org.dhus.Product;
 import org.dhus.ProductFactory;
 import org.dhus.store.datastore.DataStoreProduct;
 import org.dhus.store.datastore.hfs.HfsProduct;
-
 import org.geotools.gml2.GMLConfiguration;
 import org.geotools.xml.Configuration;
 import org.geotools.xml.Parser;
-
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 
+import fr.gael.dhus.database.object.MetadataIndex;
+import fr.gael.dhus.database.object.config.product.ProductConfiguration;
+import fr.gael.dhus.datastore.processing.InconsistentImageScale;
+import fr.gael.dhus.datastore.processing.ProcessingUtils;
+import fr.gael.dhus.factory.MetadataFactory;
+import fr.gael.dhus.spring.context.ApplicationContextProvider;
+import fr.gael.dhus.system.config.ConfigurationManager;
+import fr.gael.dhus.system.init.WorkingDirectory;
+import fr.gael.dhus.util.DrbChildren;
+import fr.gael.dhus.util.WKTFootprintParser;
+import fr.gael.drb.DrbAttribute;
+import fr.gael.drb.DrbNode;
+import fr.gael.drb.DrbSequence;
+import fr.gael.drb.impl.DrbNodeImpl;
+import fr.gael.drb.impl.xml.XmlWriter;
+import fr.gael.drb.query.Query;
+import fr.gael.drb.value.Value;
+import fr.gael.drbx.cortex.DrbCortexItemClass;
+import fr.gael.drbx.image.ImageFactory;
+import fr.gael.drbx.image.impl.sdi.SdiImageFactory;
+import fr.gael.drbx.image.jai.RenderingFactory;
+
 /**
  * Lazy raw product used during the ingestion process, it is identified by a UUID.
  * <p>
@@ -103,8 +99,13 @@ public class IngestibleRawProduct implements IngestibleProduct
    private static final String METADATA_NAMESPACE = "http://www.gael.fr/dhus#";
    private static final String PROPERTY_IDENTIFIER = "identifier";
    private static final String PROPERTY_METADATA_EXTRACTOR = "metadataExtractor";
+   private static final String PROPERTY_BEGIN_POSITION = "beginposition";
+   private static final String PROPERTY_END_POSITION = "endposition";
    private static final String MIME_PLAIN_TEXT = "plain/text";
    private static final String MIME_APPLICATION_GML = "application/gml+xml";
+   private static final String MIME_APPLICATION_JTS = "application/jts";
+   private static final String MIME_APPLICATION_WKT = "application/wkt";
+
 
    private static final DateTimeFormatter DATETIME_FORMAT =
       new DateTimeFormatterBuilder ().appendPattern ("yyyy-MM-dd'T'HH:mm:ss")
@@ -116,6 +117,8 @@ public class IngestibleRawProduct implements IngestibleProduct
    private final DrbNode productNode;
    private final Product physicalProduct;
    private Boolean onDemand;
+   
+   private Boolean online;
 
    // set when called
    private Date ingestionDate = null;
@@ -147,6 +150,12 @@ public class IngestibleRawProduct implements IngestibleProduct
    private long timerStartMillis;
    private long timerStopMillis;
 
+   // collected metadata while main loop (indexed by type and queryable)
+   final List<String> collectedTypes = Arrays.asList(MIME_APPLICATION_GML, MIME_APPLICATION_JTS, MIME_APPLICATION_WKT);
+   final List<String> collectedQueryables = Arrays.asList(PROPERTY_BEGIN_POSITION, PROPERTY_END_POSITION);
+   HashMap<String, MetadataIndex> collectedMetadataIndexesByType = new HashMap<String, MetadataIndex>();
+   HashMap<String, MetadataIndex> collectedMetadataIndexesByQueryable = new HashMap<String, MetadataIndex>();
+
    public static IngestibleRawProduct fromURL(URL productUrl)
    {
       return fromURL(productUrl, false);
@@ -272,20 +281,17 @@ public class IngestibleRawProduct implements IngestibleProduct
    {
       if (contentStart == null)
       {
-         for (MetadataIndex index: getMetadataIndexes())
+         MetadataIndex mdi = collectedMetadataIndexesByQueryable.get(PROPERTY_BEGIN_POSITION);
+         if(mdi != null)
          {
-            if (index.getQueryable() != null && index.getQueryable().equalsIgnoreCase("beginposition"))
-            {
-               TemporalAccessor parsedDate = DATETIME_FORMAT.parse (index.getValue ());
+            TemporalAccessor parsedDate = DATETIME_FORMAT.parse (mdi.getValue ());
 
-               LocalDateTime localDateTime = LocalDateTime.from (parsedDate);
-               ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, ZoneId.systemDefault());
-               Instant instant = Instant.from(zonedDateTime);
-               contentStart = java.util.Date.from (instant);
-            }
+            LocalDateTime localDateTime = LocalDateTime.from (parsedDate);
+            ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, ZoneId.systemDefault());
+            Instant instant = Instant.from(zonedDateTime);
+            contentStart = java.util.Date.from (instant);
          }
       }
-
       // mandatory metadataindex
       if (contentStart == null)
       {
@@ -300,21 +306,17 @@ public class IngestibleRawProduct implements IngestibleProduct
    {
       if (contentEnd == null)
       {
-         for (MetadataIndex index: getMetadataIndexes())
+         MetadataIndex mdi = collectedMetadataIndexesByQueryable.get(PROPERTY_END_POSITION);
+         if(mdi != null)
          {
-            if (index.getQueryable() != null
-                  && index.getQueryable().equalsIgnoreCase("endposition"))
-            {
-               TemporalAccessor parsedDate = DATETIME_FORMAT.parse (index.getValue ());
+            TemporalAccessor parsedDate = DATETIME_FORMAT.parse (mdi.getValue ());
 
-               LocalDateTime localDateTime = LocalDateTime.from (parsedDate);
-               ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, ZoneId.systemDefault());
-               Instant instant = Instant.from(zonedDateTime);
-               contentEnd = java.util.Date.from (instant);
-            }
+            LocalDateTime localDateTime = LocalDateTime.from (parsedDate);
+            ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, ZoneId.systemDefault());
+            Instant instant = Instant.from(zonedDateTime);
+            contentEnd = java.util.Date.from (instant);
          }
       }
-
       // mandatory metadataindex
       if (contentEnd == null)
       {
@@ -329,20 +331,18 @@ public class IngestibleRawProduct implements IngestibleProduct
    {
       if (footprint == null)
       {
-         for (MetadataIndex index: getMetadataIndexes())
+         MetadataIndex mdi = collectedMetadataIndexesByType.get(MIME_APPLICATION_GML);
+         if(mdi != null)
          {
-            if (index.getType() != null && index.getType().equalsIgnoreCase(MIME_APPLICATION_GML))
+            String gmlFootprint = mdi.getValue();
+            if ((gmlFootprint != null) && checkGMLFootprint(gmlFootprint))
             {
-               String gmlFootprint = index.getValue();
-               if ((gmlFootprint != null) && checkGMLFootprint(gmlFootprint))
-               {
-                  footprint = gmlFootprint;
-                  return footprint;
-               }
-               else
-               {
-                  LOGGER.error("Incorrect or empty footprint for product {}", productUrl);
-               }
+               footprint = gmlFootprint;
+               return footprint;
+            }
+            else
+            {
+               LOGGER.error("Incorrect or empty footprint for product {}", productUrl);
             }
          }
       }
@@ -811,6 +811,24 @@ public class IngestibleRawProduct implements IngestibleProduct
                }
                MetadataIndex index = MetadataFactory.createMetadataIndex(name, metadateType, category, queryable, value);
                indexes.add(index);
+               // index by type
+               if(metadateType != null)
+               {
+                  final String lowerMetadataType = metadateType.toLowerCase();
+                  if (collectedTypes.contains(lowerMetadataType))
+                  {
+                     collectedMetadataIndexesByType.put(lowerMetadataType, index);
+                  }
+               }
+               // index by queryable
+               if(queryable != null)
+               {
+                  final String lowerQueryable = queryable.toLowerCase();
+                  if(collectedQueryables.contains(lowerQueryable))
+                  {
+                     collectedMetadataIndexesByQueryable.put(lowerQueryable, index);
+                  }
+               }
             }
             else
             {
@@ -841,46 +859,34 @@ public class IngestibleRawProduct implements IngestibleProduct
    private void finalizeIndexes(List<MetadataIndex> indexes)
    {
       boolean invalidWkt = false;
-      Iterator<MetadataIndex> iterator = indexes.iterator();
-      while (iterator.hasNext())
+      MetadataIndex mdi = collectedMetadataIndexesByType.get(MIME_APPLICATION_JTS);
+      if(mdi == null)
+      {
+         mdi = collectedMetadataIndexesByType.get(MIME_APPLICATION_WKT);
+      }
+      if(mdi != null)
       {
-         MetadataIndex index = iterator.next();
-         // Extract the footprints according to its types (GML or WKT)
-         if (index.getType() != null)
+         String wktFootprint = mdi.getValue();
+         String parsedWktFootprint = WKTFootprintParser.reformatWKTFootprint(wktFootprint);
+         if (parsedWktFootprint != null)
          {
-            // Should not have been application/wkt ?
-            if (index.getType().equalsIgnoreCase("application/jts")
-                  || index.getType().equalsIgnoreCase("application/wkt"))
-            {
-               String wktFootprint = index.getValue();
-               String parsedWktFootprint = WKTFootprintParser.reformatWKTFootprint(wktFootprint);
-               if (parsedWktFootprint != null)
-               {
-                  index.setValue(parsedWktFootprint);
-               }
-               else if (wktFootprint != null)
-               {
-                  // Invalid WKT footprint; remove the corrupted footprint
-                  invalidWkt = true;
-                  LOGGER.error("Incorrect or empty footprint for product {}", productUrl);
-                  iterator.remove();
-               }
-            }
+            mdi.setValue(parsedWktFootprint);
+         }
+         else if (wktFootprint != null)
+         {
+            // Invalid WKT footprint; remove the corrupted footprint
+            invalidWkt = true;
+            LOGGER.error("Incorrect or empty footprint for product {}", productUrl);
+            indexes.remove(mdi);
          }
       }
-
-      // remove GML footprint as well if WKT is invalid
-      if (invalidWkt)
+      if(invalidWkt)
       {
          LOGGER.error("WKT footprint not existing or not valid, removing GML footprint on {}", productUrl);
-         iterator = indexes.iterator();
-         while (iterator.hasNext())
+         mdi = collectedMetadataIndexesByType.get(MIME_APPLICATION_GML);
+         if(mdi != null)
          {
-            MetadataIndex index = iterator.next();
-            if (index.getType().equalsIgnoreCase(MIME_APPLICATION_GML))
-            {
-               iterator.remove();
-            }
+            indexes.remove(mdi);
          }
       }
 
@@ -967,4 +973,15 @@ public class IngestibleRawProduct implements IngestibleProduct
    {
       return timerStopMillis - timerStartMillis;
    }
+
+   @Override
+   public Boolean isOnline()
+   {
+      return online;
+   }
+   
+   public void setOnline(Boolean online)
+   {
+      this.online = online;
+   }
 }
diff --git a/core/src/main/java/org/dhus/store/keystore/KeyStore.java b/core/src/main/java/org/dhus/store/keystore/KeyStore.java
index 0b6445304..7a6c8856a 100644
--- a/core/src/main/java/org/dhus/store/keystore/KeyStore.java
+++ b/core/src/main/java/org/dhus/store/keystore/KeyStore.java
@@ -87,6 +87,13 @@ public interface KeyStore
     */
    public List<KeyStoreEntry> getEntriesByUuid(String uuid);
 
+   /**
+    * Returns a non-null list of KeyStore Entries referencing unaltered products.
+    *
+    * @return an Iterator of KeyStoreEntriy
+    */
+   public Iterator<KeyStoreEntry> getUnalteredScrollableProductEntries();
+
    /**
     * Returns a non-null list of KeyStore Entries referencing unaltered products.
     *
diff --git a/core/src/main/java/org/dhus/store/keystore/PersistentKeyStore.java b/core/src/main/java/org/dhus/store/keystore/PersistentKeyStore.java
index 1f154b902..3e88c3b6a 100644
--- a/core/src/main/java/org/dhus/store/keystore/PersistentKeyStore.java
+++ b/core/src/main/java/org/dhus/store/keystore/PersistentKeyStore.java
@@ -117,6 +117,12 @@ public class PersistentKeyStore implements KeyStore
       return keyStoreService.getByUuid(uuid);
    }
 
+   @Override
+   public Iterator<KeyStoreEntry> getUnalteredScrollableProductEntries()
+   {
+      return keyStoreService.getUnalteredScrollableProductEntries(name);
+   }
+
    @Override
    public List<KeyStoreEntry> getUnalteredProductEntries()
    {
diff --git a/core/src/main/java/org/dhus/store/keystore/VolatileKeyStore.java b/core/src/main/java/org/dhus/store/keystore/VolatileKeyStore.java
index 37f112fbc..30a0e1238 100644
--- a/core/src/main/java/org/dhus/store/keystore/VolatileKeyStore.java
+++ b/core/src/main/java/org/dhus/store/keystore/VolatileKeyStore.java
@@ -163,4 +163,10 @@ public class VolatileKeyStore implements KeyStore
          return key.concat(tag).hashCode();
       }
    }
+
+   @Override
+   public Iterator<KeyStoreEntry> getUnalteredScrollableProductEntries()
+   {
+      return null;
+   }
 }
diff --git a/core/src/main/java/org/dhus/store/metadatastore/MetadataStoreService.java b/core/src/main/java/org/dhus/store/metadatastore/MetadataStoreService.java
index 17eec1236..2d8a00b3a 100644
--- a/core/src/main/java/org/dhus/store/metadatastore/MetadataStoreService.java
+++ b/core/src/main/java/org/dhus/store/metadatastore/MetadataStoreService.java
@@ -127,22 +127,22 @@ public class MetadataStoreService implements MetadataStore
       return relationalMetadataStore.getDatabaseProduct(uuid);
    }
 
-   public List<LoggableProduct> getProductUUIDs(String filter, String orderBy, String collectionName, int skip, int top)
+   public List<LoggableProduct> getProductUUIDs(String filter, String orderBy, String collectionName, boolean safe, int skip, int top)
          throws StoreException
    {
-      return relationalMetadataStore.getProductUUIDs(filter, orderBy, collectionName, skip, top);
+      return relationalMetadataStore.getProductUUIDs(filter, orderBy, collectionName, safe, skip, top);
    }
 
-   public List<LoggableProduct> getOnlineProductUUIDs(String filter, String orderBy, String collectionName, int skip, int top)
+   public List<LoggableProduct> getOnlineProductUUIDs(String filter, String orderBy, String collectionName, boolean safe, int skip, int top)
          throws StoreException
    {
-      return relationalMetadataStore.getOnlineProductUUIDs(filter, orderBy, collectionName, skip, top);
+      return relationalMetadataStore.getOnlineProductUUIDs(filter, orderBy, collectionName, safe, skip, top);
    }
 
    public List<LoggableProduct> getProductUUIDsWithin(String filter, String orderBy,
-         String collectionName, List<String> productUUIDs) throws StoreException
+         String collectionName, boolean safe, List<String> productUUIDs) throws StoreException
    {
-      return relationalMetadataStore.getProductUUIDsWithin(filter, orderBy, collectionName, productUUIDs);
+      return relationalMetadataStore.getProductUUIDsWithin(filter, orderBy, collectionName, safe, productUUIDs);
    }
 
    public void restoreProduct(String uuid, Long size, Map<String, String> checksums)
diff --git a/core/src/main/java/org/dhus/store/metadatastore/RelationalMetadataStore.java b/core/src/main/java/org/dhus/store/metadatastore/RelationalMetadataStore.java
index ab5e9b088..4500f3785 100644
--- a/core/src/main/java/org/dhus/store/metadatastore/RelationalMetadataStore.java
+++ b/core/src/main/java/org/dhus/store/metadatastore/RelationalMetadataStore.java
@@ -20,6 +20,7 @@
 package org.dhus.store.metadatastore;
 
 import fr.gael.dhus.database.object.Collection;
+import fr.gael.dhus.database.object.MetadataIndex;
 import fr.gael.dhus.database.object.Product;
 import fr.gael.dhus.olingo.v1.ODataExpressionParser;
 import fr.gael.dhus.olingo.v1.visitor.ProductSQLVisitor;
@@ -109,7 +110,7 @@ public class RelationalMetadataStore implements MetadataStore
 
       // TODO add a condition here when offline product
       // synchronization becomes possible
-      product.setOnline(true);
+      product.setOnline(inProduct.isOnline());
 
       Product finalProduct = productService.addProduct(product);
 
@@ -138,10 +139,12 @@ public class RelationalMetadataStore implements MetadataStore
    {
       LOGGER.debug("Repairing database entry for product {}", inProduct.getUuid());
 
+		List<MetadataIndex> mdi = inProduct.getMetadataIndexes();
+
       Product product = productService.repairProduct(
             inProduct.getUuid(),
             inProduct.getItemClass(),
-            inProduct.getMetadataIndexes(),
+            mdi,
             inProduct.getFootprint());
 
       List<String> collectionNames = collectionService.getCollections(product)
@@ -184,13 +187,13 @@ public class RelationalMetadataStore implements MetadataStore
       productService.deleteByUuid(uuid, storeAsDeleted, cause);
    }
 
-   public List<LoggableProduct> getProductUUIDs(String filter, String orderBy, String collectionName, int skip, int top)
+   public List<LoggableProduct> getProductUUIDs(String filter, String orderBy, String collectionName, boolean safe, int skip, int top)
          throws StoreException
    {
-      return internalGetProductUUIDs(filter, orderBy, collectionName, skip, top);
+      return internalGetProductUUIDs(filter, orderBy, collectionName, safe, skip, top);
    }
 
-   public List<LoggableProduct> getOnlineProductUUIDs(String filter, String orderBy, String collectionName, int skip, int top)
+   public List<LoggableProduct> getOnlineProductUUIDs(String filter, String orderBy, String collectionName, boolean safe, int skip, int top)
          throws StoreException
    {
       String newFilter;
@@ -202,11 +205,11 @@ public class RelationalMetadataStore implements MetadataStore
       {
          newFilter = filter + " and Online eq true";
       }
-      return internalGetProductUUIDs(newFilter, orderBy, collectionName, skip, top);
+      return internalGetProductUUIDs(newFilter, orderBy, collectionName, safe, skip, top);
    }
 
    public List<LoggableProduct> getProductUUIDsWithin(String filter, String orderBy,
-         String collectionName, List<String> dataStoreProductUUIDs) throws StoreException
+         String collectionName, boolean safe, List<String> dataStoreProductUUIDs) throws StoreException
    {
       if (dataStoreProductUUIDs.isEmpty())
       {
@@ -231,16 +234,16 @@ public class RelationalMetadataStore implements MetadataStore
       // add list to the filter
       filter += "(" + quotedUuidsWithCommas + ")";
 
-      return internalGetProductUUIDs(filter, orderBy, collectionName, 0, Integer.MAX_VALUE);
+      return internalGetProductUUIDs(filter, orderBy, collectionName, safe, 0, Integer.MAX_VALUE);
    }
 
-   private List<LoggableProduct> internalGetProductUUIDs(String filter, String orderBy, String collectionName, int skip, int top)
+   private List<LoggableProduct> internalGetProductUUIDs(String filter, String orderBy, String collectionName, boolean safe, int skip, int top)
          throws StoreException
    {
       try
       {
          ODataExpressionParser productExpressionParser = ODataExpressionParser.getProductExpressionParser();
-
+         
          FilterExpression filterExpression = null;
          if (filter != null)
          {
@@ -254,7 +257,7 @@ public class RelationalMetadataStore implements MetadataStore
          }
 
          ProductSQLVisitor visitor = new ProductSQLVisitor(filterExpression, orderByExpression);
-         return productService.getProductUUIDs(visitor, collectionName, skip, top);
+         return productService.getProductUUIDs(visitor, collectionName, safe, skip, top);
       }
       catch (ODataApplicationException | ODataMessageException e)
       {
diff --git a/core/src/main/java/org/dhus/store/quota/AbstractDataStoreDecorator.java b/core/src/main/java/org/dhus/store/quota/AbstractDataStoreDecorator.java
index 2a871e34a..86eeb9890 100644
--- a/core/src/main/java/org/dhus/store/quota/AbstractDataStoreDecorator.java
+++ b/core/src/main/java/org/dhus/store/quota/AbstractDataStoreDecorator.java
@@ -19,6 +19,7 @@
  */
 package org.dhus.store.quota;
 
+import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 
@@ -111,6 +112,12 @@ public abstract class AbstractDataStoreDecorator<DST extends DataStore> implemen
       return this.decorated.addProductReference(uuid, product);
    }
 
+   @Override
+   public Iterator<String> getScrollableProductResults()
+   {
+      return this.decorated.getScrollableProductResults();
+   }
+
    @Override
    public List<String> getProductList()
    {
diff --git a/core/src/main/java/org/dhus/store/quota/FetchLimiterAsyncDataStore.java b/core/src/main/java/org/dhus/store/quota/FetchLimiterAsyncDataStore.java
index ecdfdde2e..709094a39 100644
--- a/core/src/main/java/org/dhus/store/quota/FetchLimiterAsyncDataStore.java
+++ b/core/src/main/java/org/dhus/store/quota/FetchLimiterAsyncDataStore.java
@@ -39,6 +39,7 @@ import org.dhus.Product;
 import org.dhus.ProductConstants;
 import org.dhus.api.JobStatus;
 import org.dhus.store.StoreException;
+import org.dhus.store.datastore.DataStore;
 import org.dhus.store.datastore.DataStoreException;
 import org.dhus.store.datastore.async.AsyncDataStore;
 import org.dhus.store.datastore.async.AsyncProduct;
@@ -297,4 +298,10 @@ public final class FetchLimiterAsyncDataStore extends AbstractDataStoreDecorator
    {
       return decorated.getAndLogExistingOrder(uuid, localIdentifier, size);
    }
+
+   @Override
+   public DataStore getCache()
+   {
+      return decorated.getCache();
+   }
 }
diff --git a/core/src/main/resources/dhus_ehcache.xml b/core/src/main/resources/dhus_ehcache.xml
index 0417d58c1..4be351f12 100644
--- a/core/src/main/resources/dhus_ehcache.xml
+++ b/core/src/main/resources/dhus_ehcache.xml
@@ -114,4 +114,14 @@
       <persistence strategy="none" />
    </cache>
 
+   <cache name="saml_saved_requests"
+          eternal="false"
+          maxEntriesLocalHeap="30000"
+          timeToIdleSeconds="0"
+          timeToLiveSeconds="3600"
+          memoryStoreEvictionPolicy="LFU">
+      <cacheEventListenerFactory class="fr.gael.dhus.util.LoggingCacheListenerFactory" />
+      <persistence strategy="none" />
+   </cache>
+
 </ehcache>
diff --git a/core/src/main/resources/fr/gael/dhus/server/http/webapp/api/WEB-INF/dhus-api-context.xml b/core/src/main/resources/fr/gael/dhus/server/http/webapp/api/WEB-INF/dhus-api-context.xml
index cbad2d91f..4f16a1779 100644
--- a/core/src/main/resources/fr/gael/dhus/server/http/webapp/api/WEB-INF/dhus-api-context.xml
+++ b/core/src/main/resources/fr/gael/dhus/server/http/webapp/api/WEB-INF/dhus-api-context.xml
@@ -46,6 +46,7 @@
 
    <security:http entry-point-ref="apiAuthEntryPoint" use-expressions="true" disable-url-rewriting="true" create-session="never">
       <security:custom-filter position="PRE_AUTH_FILTER" ref="preAuthFilter" />
+      <security:custom-filter before="BASIC_AUTH_FILTER" ref="gdprAuthFilter" />
       <security:custom-filter position="BASIC_AUTH_FILTER" ref="basicAuthFilter" />
       <security:intercept-url pattern="/**" access="isAuthenticated()" />
       <security:session-management session-fixation-protection="none" />
diff --git a/core/src/main/resources/fr/gael/dhus/server/http/webapp/olingo/WEB-INF/dhus-olingo-context.xml b/core/src/main/resources/fr/gael/dhus/server/http/webapp/olingo/WEB-INF/dhus-olingo-context.xml
index a10cbd1c4..0f7f7121d 100644
--- a/core/src/main/resources/fr/gael/dhus/server/http/webapp/olingo/WEB-INF/dhus-olingo-context.xml
+++ b/core/src/main/resources/fr/gael/dhus/server/http/webapp/olingo/WEB-INF/dhus-olingo-context.xml
@@ -46,6 +46,7 @@
 
    <security:http entry-point-ref="odataAuthEntryPoint" use-expressions="true" disable-url-rewriting="true" create-session="never">
       <security:custom-filter position="PRE_AUTH_FILTER" ref="preAuthFilter" />
+      <security:custom-filter before="BASIC_AUTH_FILTER" ref="gdprAuthFilter" />
       <security:custom-filter position="BASIC_AUTH_FILTER" ref="basicAuthFilter" />
       <security:intercept-url pattern="/**" access="isAuthenticated()" />
       <security:session-management session-fixation-protection="none" />
diff --git a/core/src/main/resources/fr/gael/dhus/server/http/webapp/saml/WEB-INF/dhus-saml-context.xml b/core/src/main/resources/fr/gael/dhus/server/http/webapp/saml/WEB-INF/dhus-saml-context.xml
index 48390268e..ee17b6cb6 100644
--- a/core/src/main/resources/fr/gael/dhus/server/http/webapp/saml/WEB-INF/dhus-saml-context.xml
+++ b/core/src/main/resources/fr/gael/dhus/server/http/webapp/saml/WEB-INF/dhus-saml-context.xml
@@ -28,7 +28,15 @@
    <bean class="fr.gael.dhus.spring.context.DHuSContextLoader" />
    <context:annotation-config/>
    <context:component-scan base-package="org.springframework.security.saml"/>
-   <bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl"/>
+
+   <!-- this bean (SAMLContextProviderLB) is used to make keycloak saml auth working with external path and reverse proxy -->
+   <bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderLB">
+      <property name="scheme" value="#{ configurationManager.getServerConfiguration().getExternalProtocol() }"/>
+      <property name="serverName" value="#{ configurationManager.getServerConfiguration().getExternalHostname() }"/>
+      <property name="serverPort" value="#{ configurationManager.getServerConfiguration().getExternalPort() }"/>
+      <property name="includeServerPortInRequestURL" value="true"/>
+      <property name="contextPath" value="#{ configurationManager.getServerConfiguration().getExternalPath() }saml"/>
+   </bean>
 
    <!-- Initialization of OpenSAML library-->
    <bean class="org.springframework.security.saml.SAMLBootstrap"/>
@@ -66,6 +74,7 @@
          <security:filter-chain pattern="/saml/SSOHoK/**" filters="samlWebSSOHoKProcessingFilter"/>
          <security:filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter"/>
          <security:filter-chain pattern="/saml/discovery/**" filters="samlIDPDiscovery"/>
+         <security:filter-chain pattern="/saml/k_logout" filters="keycloakLogoutAll"/>
       </security:filter-chain-map>
    </bean>
 
@@ -84,6 +93,10 @@
       <constructor-arg index="1" ref="logoutHandler"/>
       <constructor-arg index="2" ref="logoutHandler"/>
    </bean>
+   
+   <bean id="keycloakLogoutAll" class="fr.gael.dhus.spring.security.keycloak.KeycloakLogoutAll">
+   	<constructor-arg index="0" ref="idpMetadata"/>
+   </bean>
 
    <!-- Filter automatically generates default SP metadata -->
    <bean id="metadataDisplayFilter" class="org.springframework.security.saml.metadata.MetadataDisplayFilter"/>
@@ -104,7 +117,7 @@
 
    <!-- Filter processing incoming logout messages -->
    <!-- First argument determines URL user will be redirected to after successful global logout -->
-   <bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
+   <bean id="samlLogoutProcessingFilter" class="fr.gael.dhus.spring.security.saml.SAMLLogoutProcessingFilter">
       <constructor-arg index="0" ref="logoutSuccessHandler"/>
       <constructor-arg index="1" ref="logoutHandler"/>
    </bean>
@@ -113,7 +126,7 @@
    <bean id="samlIDPDiscovery" class="org.springframework.security.saml.SAMLDiscovery" />
 
    <!-- Logger for SAML messages and events -->
-   <bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger"/>
+   <bean id="samlLogger" class="fr.gael.dhus.spring.security.saml.SAMLLogger"/>
 
    <!-- SAML Authentication Provider responsible for validating of received SAML messages -->
    <bean id="samlAuthenticationProvider" class="fr.gael.dhus.spring.security.saml.SAMLAuthProvider" />
diff --git a/core/src/main/resources/fr/gael/dhus/server/http/webapp/saml/WEB-INF/dhus-saml-servlet.xml b/core/src/main/resources/fr/gael/dhus/server/http/webapp/saml/WEB-INF/dhus-saml-servlet.xml
index c5da8ae07..c6710bf2d 100644
--- a/core/src/main/resources/fr/gael/dhus/server/http/webapp/saml/WEB-INF/dhus-saml-servlet.xml
+++ b/core/src/main/resources/fr/gael/dhus/server/http/webapp/saml/WEB-INF/dhus-saml-servlet.xml
@@ -30,13 +30,4 @@
    <context:component-scan base-package="fr.gael.dhus.server.http.webapp.saml.controller" />
    <security:global-method-security pre-post-annotations="enabled" />
    <mvc:annotation-driven />
-
-   <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-      <property name="prefix">
-         <value>/WEB-INF/pages/</value>
-      </property>
-      <property name="suffix">
-         <value>.jsp</value>
-      </property>
-   </bean>
 </beans>
diff --git a/core/src/main/resources/fr/gael/dhus/server/http/webapp/search/WEB-INF/dhus-search-context.xml b/core/src/main/resources/fr/gael/dhus/server/http/webapp/search/WEB-INF/dhus-search-context.xml
index ade29d8c9..e0311ef6c 100644
--- a/core/src/main/resources/fr/gael/dhus/server/http/webapp/search/WEB-INF/dhus-search-context.xml
+++ b/core/src/main/resources/fr/gael/dhus/server/http/webapp/search/WEB-INF/dhus-search-context.xml
@@ -46,6 +46,7 @@
 
    <security:http entry-point-ref="searchAuthEntryPoint" use-expressions="true" disable-url-rewriting="true" create-session="never">
       <security:custom-filter position="PRE_AUTH_FILTER" ref="preAuthFilter" />
+      <security:custom-filter before="BASIC_AUTH_FILTER" ref="gdprAuthFilter" />
       <security:custom-filter position="BASIC_AUTH_FILTER" ref="basicAuthFilter" />
       <security:intercept-url pattern="/**" access="isAuthenticated()" />
       <security:session-management session-fixation-protection="none" />
diff --git a/core/src/main/resources/fr/gael/dhus/server/http/webapp/solr/web/WEB-INF/dhus-solr-context.xml b/core/src/main/resources/fr/gael/dhus/server/http/webapp/solr/web/WEB-INF/dhus-solr-context.xml
index 6d24673eb..b53d0cf1a 100644
--- a/core/src/main/resources/fr/gael/dhus/server/http/webapp/solr/web/WEB-INF/dhus-solr-context.xml
+++ b/core/src/main/resources/fr/gael/dhus/server/http/webapp/solr/web/WEB-INF/dhus-solr-context.xml
@@ -35,9 +35,9 @@
 	
 	<security:http entry-point-ref="solrAuthEntryPoint" use-expressions="true"
 		disable-url-rewriting="true" create-session="never">
-
 		<security:custom-filter position="PRE_AUTH_FILTER"
 			ref="preAuthFilter" />
+        <security:custom-filter before="BASIC_AUTH_FILTER" ref="gdprAuthFilter" />
 		<security:custom-filter position="BASIC_AUTH_FILTER"
 			ref="basicAuthFilter" />
 		<security:intercept-url pattern="/**"
diff --git a/core/src/main/resources/fr/gael/dhus/server/http/webapp/validation/WEB-INF/dhus-validation-context.xml b/core/src/main/resources/fr/gael/dhus/server/http/webapp/validation/WEB-INF/dhus-validation-context.xml
index a97ce770c..59de7d70b 100644
--- a/core/src/main/resources/fr/gael/dhus/server/http/webapp/validation/WEB-INF/dhus-validation-context.xml
+++ b/core/src/main/resources/fr/gael/dhus/server/http/webapp/validation/WEB-INF/dhus-validation-context.xml
@@ -46,7 +46,6 @@
 
    <security:http entry-point-ref="validationAuthEntryPoint" use-expressions="true" disable-url-rewriting="true" create-session="never">
       <security:custom-filter position="PRE_AUTH_FILTER" ref="preAuthFilter" />
-      <security:custom-filter position="BASIC_AUTH_FILTER" ref="basicAuthFilter" />
       <security:intercept-url pattern="/*" access="permitAll"/>
       <security:session-management session-fixation-protection="none" />
       <security:csrf disabled="true" />
diff --git a/core/src/main/resources/fr/gael/dhus/spring/dhus-core-commons.xml b/core/src/main/resources/fr/gael/dhus/spring/dhus-core-commons.xml
index 8264fa35a..f4e5db299 100644
--- a/core/src/main/resources/fr/gael/dhus/spring/dhus-core-commons.xml
+++ b/core/src/main/resources/fr/gael/dhus/spring/dhus-core-commons.xml
@@ -46,6 +46,7 @@
    <context:component-scan base-package="fr.gael.dhus.spring.context" />
 
    <context:component-scan base-package="org.dhus.scanner" />
+   <context:component-scan base-package="org.dhus.store.datastore" />
 
    <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
       <property name="beans">
diff --git a/core/src/main/resources/fr/gael/dhus/spring/dhus-core-gdpr-users-migration.xml b/core/src/main/resources/fr/gael/dhus/spring/dhus-core-gdpr-users-migration.xml
new file mode 100644
index 000000000..a3cb36297
--- /dev/null
+++ b/core/src/main/resources/fr/gael/dhus/spring/dhus-core-gdpr-users-migration.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<!--
+   Data Hub Service (DHuS) - For Space data distribution.
+   Copyright (C) 2017,2021 GAEL Systems
+
+   This file is part of DHuS software sources.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU Affero General Public License as
+   published by the Free Software Foundation, either version 3 of the
+   License, or (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+   GNU Affero General Public License for more details.
+
+   You should have received a copy of the GNU Affero General Public License
+   along with this program. If not, see <http://www.gnu.org/licenses/>.
+-->
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns:context="http://www.springframework.org/schema/context"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
+
+   <bean id="datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
+      <property name="driverClassName" value="#{ T(org.dhus.migration.GDPRUsersMigration).getJDBCDriver() }" />
+      <property name="url" value="#{ T(org.dhus.migration.GDPRUsersMigration).getJDBCUrl() }" />
+      <property name="username" value="#{ T(org.dhus.migration.GDPRUsersMigration).getUsername() }" />
+      <property name="password" value="#{ T(org.dhus.migration.GDPRUsersMigration).getPassword() }" />
+   </bean>
+
+   <bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
+      <property name="dataSource" ref="datasource" />
+      <property name="changeLog" value="classpath:liquibase/changelog-clean-users-gdpr.xml" />
+   </bean>
+
+</beans>
\ No newline at end of file
diff --git a/core/src/main/resources/fr/gael/dhus/spring/dhus-core-security.xml b/core/src/main/resources/fr/gael/dhus/spring/dhus-core-security.xml
index e677b98a4..00a9c8da5 100644
--- a/core/src/main/resources/fr/gael/dhus/spring/dhus-core-security.xml
+++ b/core/src/main/resources/fr/gael/dhus/spring/dhus-core-security.xml
@@ -31,6 +31,7 @@
       <security:authentication-provider ref="defaultAuthenticationProvider" />
    </security:authentication-manager>
 
+   <bean id="gdprAuthFilter" class="fr.gael.dhus.spring.security.filter.GDPRAuthFilter" />
    <bean id="preAuthFilter" class="fr.gael.dhus.spring.security.filter.PreAuthFilter" />
 
    <bean id="proxyWebAuthenticationDetailsSource" class="fr.gael.dhus.spring.security.authentication.ProxyWebAuthenticationDetailsSource" />
@@ -50,6 +51,7 @@
    <bean id="firewall" class="org.springframework.security.web.firewall.StrictHttpFirewall">
       <property name="allowUrlEncodedDoubleSlash" value="true" />
       <property name="allowUrlEncodedSlash" value="true" />
+      <property name="allowUrlEncodedPercent" value="true" />
    </bean>
    <security:http-firewall ref="firewall" />
 </beans>
diff --git a/core/src/main/resources/fr/gael/dhus/system/config/bindings.xml b/core/src/main/resources/fr/gael/dhus/system/config/bindings.xml
index a76276d6b..d4aca366c 100644
--- a/core/src/main/resources/fr/gael/dhus/system/config/bindings.xml
+++ b/core/src/main/resources/fr/gael/dhus/system/config/bindings.xml
@@ -60,22 +60,37 @@
 
    <jxb:bindings schemaLocation="dhus-datastore.xsd">
       <namespace:prefix name="ds" />
+      <jxb:bindings node="//xs:complexType[@name='dataStores']/xs:sequence">
+         <jxb:property collectionType="java.util.Vector"/>
+      </jxb:bindings>
    </jxb:bindings>
 
    <jxb:bindings schemaLocation="dhus-scanner.xsd">
       <namespace:prefix name="scanner" />
+      <jxb:bindings node="//xs:complexType[@name='scanners']/xs:sequence">
+         <jxb:property collectionType="java.util.Vector"/>
+      </jxb:bindings>
    </jxb:bindings>
 
    <jxb:bindings schemaLocation="dhus-synchronizer.xsd">
       <namespace:prefix name="sync" />
+      <jxb:bindings node="//xs:complexType[@name='synchronizers']/xs:sequence">
+         <jxb:property collectionType="java.util.Vector"/>
+      </jxb:bindings>
    </jxb:bindings>
 
    <jxb:bindings schemaLocation="dhus-eviction.xsd">
       <namespace:prefix name="evict" />
+      <jxb:bindings node="//xs:complexType[@name='evictions']/xs:sequence">
+         <jxb:property collectionType="java.util.Vector"/>
+      </jxb:bindings>
    </jxb:bindings>
 
    <jxb:bindings schemaLocation="dhus-source.xsd">
       <namespace:prefix name="source" />
+      <jxb:bindings node="//xs:complexType[@name='sources']/xs:sequence">
+         <jxb:property collectionType="java.util.Vector"/>
+      </jxb:bindings>
    </jxb:bindings>
 
 </jxb:bindings>
diff --git a/core/src/main/resources/fr/gael/dhus/system/config/dhus-datastore.xsd b/core/src/main/resources/fr/gael/dhus/system/config/dhus-datastore.xsd
index 2758963cb..e703d4c31 100644
--- a/core/src/main/resources/fr/gael/dhus/system/config/dhus-datastore.xsd
+++ b/core/src/main/resources/fr/gael/dhus/system/config/dhus-datastore.xsd
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
 <!--
    Data Hub Service (DHuS) - For Space data distribution.
-   Copyright (C) 2016-2019 GAEL Systems
+   Copyright (C) 2016-2020 GAEL Systems
 
    This file is part of DHuS software sources.
 
@@ -25,8 +25,11 @@
            jxb:version="2.1"
            jxb:extensionBindingPrefixes="inheritance"
            xmlns:dhusDataStore="org.dhus.store.datastore.config"
+           xmlns:dhusCron="fr.gael.dhus.database.object.config.cron"
            targetNamespace="org.dhus.store.datastore.config">
 
+	<xs:import namespace="fr.gael.dhus.database.object.config.cron" schemaLocation="dhus-cron.xsd" />
+
    <xs:annotation>
       <xs:appinfo>
          <jxb:schemaBindings>
@@ -75,8 +78,8 @@
       <xs:complexContent>
          <xs:extension base="dhusDataStore:namedDataStoreConf">
             <xs:sequence>
-               <xs:element name="isMaster" type="xs:boolean" default="false"/>
-               <xs:element name="hfsLocation" type="xs:string" minOccurs="1" maxOccurs="1" />
+               <xs:element name="dataStore" type="dhusDataStore:dataStoreConf" minOccurs="1" maxOccurs="1" />
+               <xs:element name="isMaster" type="xs:boolean" default="false" minOccurs="0" maxOccurs="1"/>
                <xs:element name="patternReplaceIn" type="dhusDataStore:patternReplace" minOccurs="0" maxOccurs="1" />
                <xs:element name="patternReplaceOut" type="dhusDataStore:patternReplace" minOccurs="0" maxOccurs="1" />
                <xs:element name="maxPendingRequests" type="xs:int" minOccurs="0" maxOccurs="1" />
@@ -159,14 +162,14 @@
       </xs:complexContent>
    </xs:complexType>
 
-   <xs:complexType name="pdgsDataStoreConf">
+   <xs:complexType name="httpAsyncDataStoreConf" abstract="true">
       <xs:complexContent>
          <xs:extension base="dhusDataStore:asyncDataStoreConf">
             <xs:sequence>
                <xs:element name="serviceUrl" type="xs:string" minOccurs="1" maxOccurs="1" />
                <xs:element name="login" type="xs:string" minOccurs="0" maxOccurs="1" />
                <xs:element name="password" type="xs:string" minOccurs="0" maxOccurs="1" />
-               <xs:element name="interval" default="600000">
+               <xs:element name="interval" default="600000" minOccurs="0" maxOccurs="1" >
                   <xs:simpleType>
                      <xs:restriction base="xs:long">
                         <xs:minExclusive value="0" />
@@ -179,6 +182,49 @@
       </xs:complexContent>
    </xs:complexType>
 
+	<xs:complexType name="optionalHttpAsyncDataStoreConf" abstract="true">
+      <xs:complexContent>
+         <xs:extension base="dhusDataStore:httpAsyncDataStoreConf">
+            <xs:sequence>
+               <xs:element name="order" type="xs:boolean" default="false"/>
+            </xs:sequence>
+          </xs:extension>
+       </xs:complexContent>
+   </xs:complexType>
+
+   <xs:complexType name="pdgsDataStoreConf">
+      <xs:complexContent>
+         <xs:extension base="dhusDataStore:httpAsyncDataStoreConf"></xs:extension>
+      </xs:complexContent>
+   </xs:complexType>
+
+   <xs:complexType name="ltaDataStoreConf">
+      <xs:complexContent>
+         <xs:extension base="dhusDataStore:optionalHttpAsyncDataStoreConf"></xs:extension>
+      </xs:complexContent>
+   </xs:complexType>
+
+	<xs:complexType name="ondaDataStoreConf">
+		<xs:complexContent>
+			<xs:extension base="dhusDataStore:optionalHttpAsyncDataStoreConf">
+				<xs:sequence>
+					<xs:element name="objectStorageCredential" type="dhusDataStore:objectStorageCredentialConf" minOccurs="0" maxOccurs="1" />
+					<xs:element name="ondaScanner" minOccurs="0" maxOccurs="1" type="dhusDataStore:ondaScannerConf" />
+				</xs:sequence>
+			</xs:extension>
+		</xs:complexContent>
+	</xs:complexType>
+
+   <xs:complexType name="objectStorageCredentialConf">
+      <xs:sequence>
+         <xs:element name="provider" type="xs:string" minOccurs="1" maxOccurs="1" />
+         <xs:element name="identity" type="xs:string" minOccurs="1" maxOccurs="1" />
+         <xs:element name="credential" type="xs:string" minOccurs="1" maxOccurs="1" />
+         <xs:element name="url" type="xs:string" minOccurs="1" maxOccurs="1" />
+         <xs:element name="region" type="xs:string" minOccurs="1" maxOccurs="1" />
+      </xs:sequence>
+   </xs:complexType>
+
    <xs:complexType name="paramPdgsDataStoreConf">
       <xs:complexContent>
          <xs:extension base="dhusDataStore:pdgsDataStoreConf">
@@ -215,4 +261,15 @@
          </xs:extension>
       </xs:complexContent>
    </xs:complexType>
+
+	<xs:complexType name="ondaScannerConf">
+		<xs:sequence>
+            <xs:element name="opensearchUrl" type="xs:string" minOccurs="1" maxOccurs="1" />
+			<xs:element name="lastCreationDate" type="xs:dateTime" minOccurs="0" maxOccurs="1" />
+			<xs:element name="pageSize" type="xs:int" minOccurs="1" maxOccurs="1" default="25" />
+			<xs:element name="filter" type="xs:string" minOccurs="0" maxOccurs="1" />
+			<xs:element name="cron" minOccurs="1" maxOccurs="1" type="dhusCron:cron" />
+		</xs:sequence>
+	</xs:complexType>
+
 </xs:schema>
\ No newline at end of file
diff --git a/core/src/main/resources/fr/gael/dhus/system/config/dhus-eviction.xsd b/core/src/main/resources/fr/gael/dhus/system/config/dhus-eviction.xsd
index 811606366..644c2a9b2 100644
--- a/core/src/main/resources/fr/gael/dhus/system/config/dhus-eviction.xsd
+++ b/core/src/main/resources/fr/gael/dhus/system/config/dhus-eviction.xsd
@@ -67,8 +67,11 @@
       <xs:attribute name="targetCollection" type="xs:string" />
       <xs:attribute name="softEviction" type="xs:boolean" default="false" />
       <xs:attribute name="status" type="dhusEviction:evictionStatusEnum" default="STOPPED" />
+      <xs:attribute name="safeMode" type="xs:boolean" default="false"/>
+      <xs:attribute name="targetDataStore" type="xs:string"/>
+      <xs:attribute name="baseDate" type="dhusEviction:evictionBaseDate" default="modificationDate" />
    </xs:complexType>
-
+   
    <xs:simpleType name="evictionStatusEnum">
       <xs:restriction base="xs:string">
          <xs:enumeration value="STARTED" />
@@ -77,5 +80,12 @@
          <xs:enumeration value="CANCELED" />
       </xs:restriction>
    </xs:simpleType>
+   
+   <xs:simpleType name="evictionBaseDate">
+      <xs:restriction base="xs:string">
+         <xs:enumeration value="modificationDate" />
+         <xs:enumeration value="creationDate" />
+      </xs:restriction>
+   </xs:simpleType>
 
 </xs:schema>
diff --git a/core/src/main/resources/fr/gael/dhus/system/config/dhus-network.xsd b/core/src/main/resources/fr/gael/dhus/system/config/dhus-network.xsd
index a027228cc..834b92a19 100644
--- a/core/src/main/resources/fr/gael/dhus/system/config/dhus-network.xsd
+++ b/core/src/main/resources/fr/gael/dhus/system/config/dhus-network.xsd
@@ -84,13 +84,13 @@
    <xs:complexType name="classifierCriteriaType">
       <xs:all minOccurs="0">
          <xs:element type="xs:string" name="userEmailPattern" minOccurs="0" />
-         <xs:element type="xs:string" name="service" minOccurs="0" />
+         <xs:element type="xs:string" name="service" minOccurs="0" />        
+         <xs:element type="xs:string"  name="rolePattern" minOccurs="0" />
       </xs:all>
    </xs:complexType>
 
    <xs:complexType name="userQuotasType">
       <xs:sequence>
-
          <xs:element name="maxConcurrent" type="dhusNetwork:positiveInt" minOccurs="0" />
          <xs:element name="maxCount" type="dhusNetwork:periodicalPositiveInt" minOccurs="0" />
          <xs:element name="maxSize" type="dhusNetwork:positiveLong" minOccurs="0" />
diff --git a/core/src/main/resources/fr/gael/dhus/system/config/dhus-synchronizer.xsd b/core/src/main/resources/fr/gael/dhus/system/config/dhus-synchronizer.xsd
index d01d77920..86158e6c4 100644
--- a/core/src/main/resources/fr/gael/dhus/system/config/dhus-synchronizer.xsd
+++ b/core/src/main/resources/fr/gael/dhus/system/config/dhus-synchronizer.xsd
@@ -78,7 +78,12 @@
                <xs:element name="geofilterShape" type="xs:string" minOccurs="0" maxOccurs="1" />
                <xs:element name="lastCreated" type="xs:dateTime" minOccurs="0" maxOccurs="1" />
                <xs:element name="skipOnError" type="xs:boolean" minOccurs="0" maxOccurs="1" default="true"/>
+               <xs:element name="syncOfflineProducts" type="xs:boolean" minOccurs="0" maxOccurs="1" default="false"/>
             </xs:sequence>
+            <!-- number of retries for each skipped product -->
+            <xs:attribute name="retriesForSkippedProducts" type="xs:int" default="3"/>
+   			<!-- timeout in milliseconds of each request of synchronization for skipped products-->
+   			<xs:attribute name="timeoutSkippedProducts" type="xs:long" default="60000"/>
          </xs:extension>
       </xs:complexContent>
    </xs:complexType>
diff --git a/core/src/main/resources/fr/gael/dhus/system/config/dhus-system.xsd b/core/src/main/resources/fr/gael/dhus/system/config/dhus-system.xsd
index 20e8267b4..639572b7c 100644
--- a/core/src/main/resources/fr/gael/dhus/system/config/dhus-system.xsd
+++ b/core/src/main/resources/fr/gael/dhus/system/config/dhus-system.xsd
@@ -35,6 +35,13 @@
 
    <xs:complexType name="systemConfiguration">
       <xs:all>
+         <xs:element minOccurs="0" name="gdpr" type="dhusSystem:gdprConfiguration">
+            <xs:annotation>
+               <xs:appinfo>
+                  <jxb:property name="gdprConfiguration" />
+               </xs:appinfo>
+            </xs:annotation>
+         </xs:element>
          <xs:element minOccurs="0" name="administrator" type="dhusSystem:administratorConfiguration">
             <xs:annotation>
                <xs:appinfo>
@@ -108,6 +115,12 @@
       </xs:all>
    </xs:complexType>
 
+   <xs:complexType name="gdprConfiguration">
+      <xs:all />
+      <xs:attribute name="active" type="xs:boolean" default="false" />
+      <xs:attribute name="SAMLUserId" type="xs:string" default="samlId"/>
+   </xs:complexType>
+
    <xs:complexType name="administratorConfiguration">
       <xs:all />
       <xs:attribute name="name" type="xs:string" default="root" />
diff --git a/core/src/main/resources/liquibase/changelog-clean-users-gdpr.xml b/core/src/main/resources/liquibase/changelog-clean-users-gdpr.xml
new file mode 100644
index 000000000..c04e3b01b
--- /dev/null
+++ b/core/src/main/resources/liquibase/changelog-clean-users-gdpr.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+   Data Hub Service (DHuS) - For Space data distribution.
+   Copyright (C) 2017,2018 GAEL Systems
+
+   This file is part of DHuS software sources.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU Affero General Public License as
+   published by the Free Software Foundation, either version 3 of the
+   License, or (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+   GNU Affero General Public License for more details.
+
+   You should have received a copy of the GNU Affero General Public License
+   along with this program. If not, see <http://www.gnu.org/licenses/>.
+-->
+<databaseChangeLog
+   xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
+   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
+         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">
+
+   <changeSet  author="sami" id="cleanUsersForGDPR" runAlways="true">
+      <validCheckSum>any</validCheckSum>
+      <customChange class="fr.gael.dhus.database.liquibase.CleanUsersForGDPR"/>
+   </changeSet>
+</databaseChangeLog>
\ No newline at end of file
diff --git a/core/src/test/java/fr/gael/dhus/database/dao/CollectionDaoIT.java b/core/src/test/java/fr/gael/dhus/database/dao/CollectionDaoIT.java
index 6d1abe61d..d9299986a 100644
--- a/core/src/test/java/fr/gael/dhus/database/dao/CollectionDaoIT.java
+++ b/core/src/test/java/fr/gael/dhus/database/dao/CollectionDaoIT.java
@@ -234,7 +234,7 @@ public class CollectionDaoIT extends AbstractHibernateDaoIT<Collection, String>
       cid = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1";
       collection = dao.read (cid);
       Assert.assertTrue (dao.contains (cid, pid));
-      dao.removeProduct (cid, pid, user);
+      dao.removeProduct (cid, pid);
       Assert.assertFalse (dao.contains (cid, pid));
    }
 
@@ -255,7 +255,7 @@ public class CollectionDaoIT extends AbstractHibernateDaoIT<Collection, String>
       {
          Assert.assertTrue (dao.contains (cid, pid));
       }
-      dao.removeProducts (cid, pids, user);
+      dao.removeProducts (cid, pids);
       for (Long pid : pids)
       {
          Assert.assertFalse (dao.contains (cid, pid));
diff --git a/core/src/test/java/fr/gael/dhus/database/dao/OrderDaoIT.java b/core/src/test/java/fr/gael/dhus/database/dao/OrderDaoIT.java
index a81fdbafe..ce7fe0461 100644
--- a/core/src/test/java/fr/gael/dhus/database/dao/OrderDaoIT.java
+++ b/core/src/test/java/fr/gael/dhus/database/dao/OrderDaoIT.java
@@ -1,6 +1,6 @@
 /*
  * Data Hub Service (DHuS) - For Space data distribution.
- * Copyright (C) 2019 GAEL Systems
+ * Copyright (C) 2019,2020 GAEL Systems
  *
  * This file is part of DHuS software sources.
  *
@@ -156,4 +156,15 @@ public class OrderDaoIT extends AbstractTransactionalTestNGSpringContextTests
       assertEquals(dao.countOrdersByDataStore(STORE_NAME, JobStatus.PENDING, JobStatus.FAILED, JobStatus.PAUSED, JobStatus.RUNNING, JobStatus.UNKNOWN), 1);
    }
 
+   @Test
+   public void testGetOrderByJobId()
+   {
+      assertNull(dao.getOrderByJobId("invalid"));
+
+      Order order = dao.getOrderByJobId("foo");
+      assertNotNull(order);
+      assertEquals(order.getJobId(), "foo");
+      assertEquals(order.getOrderId().getProductUuid(), UUID0);
+   }
+
 }
diff --git a/core/src/test/java/fr/gael/dhus/database/dao/TestPagedIterator.java b/core/src/test/java/fr/gael/dhus/database/dao/TestPagedIterator.java
index 31728961a..a360b2b2c 100644
--- a/core/src/test/java/fr/gael/dhus/database/dao/TestPagedIterator.java
+++ b/core/src/test/java/fr/gael/dhus/database/dao/TestPagedIterator.java
@@ -30,6 +30,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.NoSuchElementException;
 
+import org.dhus.olingo.v2.visitor.SQLVisitorParameter;
+
 public class TestPagedIterator
 {
    private final String query = "*";
@@ -151,7 +153,7 @@ public class TestPagedIterator
       }
 
       @Override
-      public List<Integer> getPage (String query, int skip, int top)
+      public List<Integer> getPage (String query, List<SQLVisitorParameter> parameters, int skip, int top)
       {
          if (skip < list.size ())
          {
diff --git a/core/src/test/java/fr/gael/dhus/service/CacheUserServiceIT.java b/core/src/test/java/fr/gael/dhus/service/CacheUserServiceIT.java
index a8e5fe94b..434f03b45 100644
--- a/core/src/test/java/fr/gael/dhus/service/CacheUserServiceIT.java
+++ b/core/src/test/java/fr/gael/dhus/service/CacheUserServiceIT.java
@@ -23,10 +23,12 @@ import fr.gael.dhus.database.dao.UserDao;
 import fr.gael.dhus.database.object.Role;
 import fr.gael.dhus.database.object.User;
 import fr.gael.dhus.service.exception.EmailNotSentException;
+import fr.gael.dhus.service.exception.GDPREnabledException;
 import fr.gael.dhus.service.exception.MalformedEmailException;
 import fr.gael.dhus.service.exception.RequiredFieldMissingException;
 import fr.gael.dhus.service.exception.RootNotModifiableException;
 import fr.gael.dhus.service.exception.UsernameBadCharacterException;
+import fr.gael.dhus.service.exception.GDPREnabledException;
 import fr.gael.dhus.spring.context.ApplicationContextProvider;
 import fr.gael.dhus.util.TestContextLoader;
 import org.springframework.cache.Cache;
@@ -83,7 +85,7 @@ public class CacheUserServiceIT extends AbstractTransactionalTestNGSpringContext
 
    @Test
    public void testUserCache () throws RootNotModifiableException,
-         RequiredFieldMissingException
+         RequiredFieldMissingException, GDPREnabledException
    {
       String cache_name = "user";
       String cache2_name = "userByName";
@@ -142,7 +144,7 @@ public class CacheUserServiceIT extends AbstractTransactionalTestNGSpringContext
 
    @Test
    public void MalformedUserCreateTest() throws EmailNotSentException,
-      RequiredFieldMissingException, RootNotModifiableException
+      RequiredFieldMissingException, RootNotModifiableException, GDPREnabledException
    {
       // Case of well formed...
       User u = new User();
@@ -196,7 +198,7 @@ public class CacheUserServiceIT extends AbstractTransactionalTestNGSpringContext
    
    @Test (dependsOnMethods="MalformedUserCreateTest")
    public void MalformedUserUpdateTest() throws EmailNotSentException,
-      RequiredFieldMissingException, RootNotModifiableException
+      RequiredFieldMissingException, RootNotModifiableException, GDPREnabledException
    {
       UserDao udao = ApplicationContextProvider.getBean (UserDao.class);
       // Normal update
@@ -231,7 +233,7 @@ public class CacheUserServiceIT extends AbstractTransactionalTestNGSpringContext
    
    @Test
    public void ExtendedMalformedUserTest() throws EmailNotSentException,
-      RequiredFieldMissingException, RootNotModifiableException
+      RequiredFieldMissingException, RootNotModifiableException, GDPREnabledException
    {
       UserDao udao = ApplicationContextProvider.getBean (UserDao.class);
       // Normal update
diff --git a/core/src/test/java/org/dhus/store/RelationalMetadataStoreFilterIT.java b/core/src/test/java/org/dhus/store/RelationalMetadataStoreFilterIT.java
index b544bf21a..32500ae47 100644
--- a/core/src/test/java/org/dhus/store/RelationalMetadataStoreFilterIT.java
+++ b/core/src/test/java/org/dhus/store/RelationalMetadataStoreFilterIT.java
@@ -43,7 +43,7 @@ public class RelationalMetadataStoreFilterIT extends AbstractTransactionalTestNG
    @Test
    public void testFilter() throws StoreException
    {
-      List<LoggableProduct> productUUIDs = relationalMDS.getProductUUIDs("Name eq 'prod0'", null, null, 0, 3);
+      List<LoggableProduct> productUUIDs = relationalMDS.getProductUUIDs("Name eq 'prod0'", null, null, false, 0, 3);
       Assert.assertEquals(productUUIDs.size(), 1);
       Assert.assertEquals(productUUIDs.get(0).getUuid(), "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0");
    }
@@ -51,7 +51,7 @@ public class RelationalMetadataStoreFilterIT extends AbstractTransactionalTestNG
    @Test
    public void testOrderBy() throws StoreException
    {
-      List<LoggableProduct> productUUIDs = relationalMDS.getProductUUIDs(null, "Name desc", null, 0, 3);
+      List<LoggableProduct> productUUIDs = relationalMDS.getProductUUIDs(null, "Name desc", null, false, 0, 3);
       Assert.assertEquals(productUUIDs.size(), 3);
       Assert.assertEquals(productUUIDs.get(0).getUuid(), "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa7");
       Assert.assertEquals(productUUIDs.get(2).getUuid(), "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa5");
diff --git a/core/src/test/java/org/dhus/store/datastore/config/DataStoreManagerIT.java b/core/src/test/java/org/dhus/store/datastore/config/DataStoreManagerIT.java
index d19653613..622981d06 100644
--- a/core/src/test/java/org/dhus/store/datastore/config/DataStoreManagerIT.java
+++ b/core/src/test/java/org/dhus/store/datastore/config/DataStoreManagerIT.java
@@ -75,13 +75,12 @@ public class DataStoreManagerIT extends AbstractTestNGSpringContextTests
       Assert.assertTrue(dataStores.get(2) instanceof GmpDataStoreConf);
       Assert.assertEquals(dataStores.get(2).getPriority(), 75);
       Assert.assertEquals(((GmpDataStoreConf) dataStores.get(2)).getName(), "gmp");
-      Assert.assertEquals(((GmpDataStoreConf) dataStores.get(2)).isIsMaster(), true);
+      Assert.assertEquals((Boolean)((GmpDataStoreConf) dataStores.get(2)).isIsMaster(), Boolean.TRUE);
       Assert.assertNotNull(((GmpDataStoreConf) dataStores.get(2)).getMysqlConnectionInfo());
       Assert.assertEquals(((GmpDataStoreConf) dataStores.get(2)).getMysqlConnectionInfo().getValue(), "url");
       Assert.assertEquals(((GmpDataStoreConf) dataStores.get(2)).getMysqlConnectionInfo().getUser(), "user");
       Assert.assertEquals(((GmpDataStoreConf) dataStores.get(2)).getMysqlConnectionInfo().getPassword(), "sa");
       Assert.assertEquals(((GmpDataStoreConf) dataStores.get(2)).getRepoLocation(), "gmpRepo");
-      Assert.assertEquals(((GmpDataStoreConf) dataStores.get(2)).getHfsLocation(), "hfsLoc");
       Assert.assertEquals(((GmpDataStoreConf) dataStores.get(2)).getMaxPendingRequests(), Integer.valueOf(5));
       Assert.assertEquals(((GmpDataStoreConf) dataStores.get(2)).getMaxRunningRequests(), Integer.valueOf(5));
    }
diff --git a/core/src/test/resources/dhus-config-it.xml b/core/src/test/resources/dhus-config-it.xml
index a44963106..ccc0e269f 100644
--- a/core/src/test/resources/dhus-config-it.xml
+++ b/core/src/test/resources/dhus-config-it.xml
@@ -262,8 +262,11 @@
          <ds:region>region</ds:region>
       </ds:dataStore>
       <ds:dataStore xsi:type="ds:gmpDataStoreConf" priority="75" name="gmp">
+         <ds:dataStore xsi:type="ds:hfsDataStoreConf" name="gmp-cache">
+            <ds:path>/gmp-cache</ds:path>
+            <ds:maxFileNo>5</ds:maxFileNo>
+         </ds:dataStore>
          <ds:isMaster>true</ds:isMaster>
-         <ds:hfsLocation>hfsLoc</ds:hfsLocation>
          <ds:maxPendingRequests>5</ds:maxPendingRequests>
          <ds:maxRunningRequests>5</ds:maxRunningRequests>
          <ds:repoLocation>gmpRepo</ds:repoLocation>
diff --git a/pom.xml b/pom.xml
index d9c4a27d4..414ff00d2 100644
--- a/pom.xml
+++ b/pom.xml
@@ -25,7 +25,7 @@
 
    <groupId>fr.gael.dhus</groupId>
    <artifactId>dhus-core-suite</artifactId>
-   <version>1.11.2-osf</version>
+   <version>2.0.8</version>
    <packaging>pom</packaging>
 
    <name>DHuS - Core Suite</name>
@@ -83,38 +83,99 @@
 
    <repositories>
       <repository>
-         <id>external dependencies</id>
-<!-- repository https://copernicus.serco.eu/repository/nexus/content/repositories/releases
-     used to proxy gael's resources requires credentials
-     Using alternative source repository. -->
-         <url>https://repository.gael-systems.com/repository/public</url>
+         <releases>
+            <enabled>true</enabled>
+            <updatePolicy>always</updatePolicy>
+            <checksumPolicy>warn</checksumPolicy>
+         </releases>
+         <snapshots>
+            <enabled>false</enabled>
+            <updatePolicy>never</updatePolicy>
+            <checksumPolicy>fail</checksumPolicy>
+         </snapshots>
+         <id>osf-public</id>
+         <name>OSF Public Repository</name>
+         <url>https://nexus-repository.onda-dias.eu/repository/Releases/</url>
+         <layout>default</layout>
+      </repository>
+
+      <repository>
+         <releases>
+            <enabled>false</enabled>
+            <updatePolicy>always</updatePolicy>
+            <checksumPolicy>warn</checksumPolicy>
+         </releases>
+         <snapshots>
+            <enabled>true</enabled>
+            <updatePolicy>never</updatePolicy>
+            <checksumPolicy>fail</checksumPolicy>
+         </snapshots>
+         <id>dhus-SNAPSHOT</id>
+         <name>DHuS SNAPSHOTS repository</name>
+         <url>https://nexus-repository.onda-dias.eu/repository/Snapshots/</url>
+         <layout>default</layout>
+      </repository>
+      
+      <repository>
+         <id>gael-public</id>
+         <name>GAEL Public Repository</name>
+         <url>https://repository.gael-systems.com/repository/public/</url>
+         <releases><enabled>true</enabled></releases>
+         <snapshots><enabled>false</enabled></snapshots>
+         <layout>default</layout>
+      </repository>
+      <repository>
+         <id>gael-releases</id>
+         <name>GAEL Main Repository</name>
+         <url>https://repository.gael-systems.com/repository/releases/</url>
+         <releases><enabled>true</enabled></releases>
+         <snapshots><enabled>false</enabled></snapshots>
+         <layout>default</layout>
+      </repository>
+      <repository>
+         <id>gael-thirdparty</id>
+         <name>GAEL Third Party Repository</name>
+         <url>https://repository.gael-systems.com/repository/thirdparty/</url>
+         <releases><enabled>true</enabled></releases>
+         <snapshots><enabled>false</enabled></snapshots>
+         <layout>default</layout>
       </repository>
    </repositories>
 
    <distributionManagement>
       <repository>
          <uniqueVersion>true</uniqueVersion>
-         <id>osf-delivery</id>
+         <id>osf-releases</id>
          <name>OSF Releases Repository</name>
-         <url>
-            https://copernicus.serco.eu/repository/nexus/content/repositories/OSF_releases
-         </url>
+         <url>https://nexus-repository.onda-dias.eu/repository/Releases/</url>
          <layout>default</layout>
       </repository>
-   </distributionManagement>
+      <snapshotRepository>
+         <uniqueVersion>true</uniqueVersion>
+         <id>dhus-SNAPSHOT</id>
+         <name>Data Hub Snapshots</name>
+         <url>https://nexus-repository.onda-dias.eu/repository/Snapshots/</url>
+         <layout>default</layout>
+      </snapshotRepository>
 
-   <scm>
-      <connection>scm:git:https://github.com/SentinelDataHub/dhus-core</connection>
-      <developerConnection>scm:git:https://github.com/SentinelDataHub/dhus-core</developerConnection>
-      <tag>HEAD</tag>
-      <url>https://github.com/SentinelDataHub/dhus-core</url>
-   </scm>
+      <site>
+         <id>gael-site</id>
+         <url>${site.baseUrl}/</url>
+      </site>
+   </distributionManagement>
 
    <issueManagement>
       <system>Jira</system>
       <url>https://copernicus.serco.eu/jira-osf</url>
    </issueManagement>
 
+   <scm>
+      <connection>scm:git:https://github.com/SercoSPA/dhus-core</connection>
+      <developerConnection>scm:git:https://github.com/SercoSPA/dhus-core</developerConnection>
+      <tag>HEAD</tag>
+      <url>https://github.com/SercoSPA/dhus-core</url>
+   </scm>
+
    <profiles>
       <profile>
          <id>validation</id>
diff --git a/validation/distribution/pom.xml b/validation/distribution/pom.xml
index f0d056a4a..213cb76de 100644
--- a/validation/distribution/pom.xml
+++ b/validation/distribution/pom.xml
@@ -24,7 +24,7 @@
    <parent>
       <groupId>fr.gael.dhus</groupId>
       <artifactId>dhus-core-suite</artifactId>
-      <version>1.11.2-osf</version>
+      <version>2.0.8</version>
       <relativePath>../../pom.xml</relativePath>
    </parent>
 
@@ -125,27 +125,39 @@
 
    <repositories>
       <repository>
-         <id>external dependencies</id>
-<!-- repository https://copernicus.serco.eu/repository/nexus/content/repositories/releases
-     used to proxy gael's resources requires credentials
-     Using alternative source repository. -->
-         <url>https://repository.gael-systems.com/repository/public</url>
+        <id>osf-releases</id>
+        <name>Releases Repository</name>
+        <url>
+          https://copernicus.serco.eu/repository/nexus/content/repositories/releases/
+        </url>
+      </repository>
+      <repository>
+         <id>osf-public</id>
+         <name>OSF Public Repository</name>
+         <url>
+            https://copernicus.serco.eu/repository/nexus/content/groups/public
+         </url>
+         <layout>default</layout>
       </repository>
    </repositories>
 
    <distributionManagement>
       <repository>
          <uniqueVersion>true</uniqueVersion>
-         <id>osf-delivery</id>
+         <id>osf-releases</id>
          <name>OSF Releases Repository</name>
          <url>
-            https://copernicus.serco.eu/repository/nexus/content/repositories/OSF_releases
+            https://copernicus.serco.eu/repository/nexus/content/repositories/releases/
+
          </url>
          <layout>default</layout>
       </repository>
+      <site>
+         <id>gael-site</id>
+         <url>${site.baseUrl}/</url>
+      </site>
    </distributionManagement>
-	
-	<profiles> 
+   <profiles> 
       <profile>
          <id>native-libraries-so</id>
          <activation>
diff --git a/validation/distribution/pom.xml.versionsBackup b/validation/distribution/pom.xml.versionsBackup
deleted file mode 100644
index e38f093ec..000000000
--- a/validation/distribution/pom.xml.versionsBackup
+++ /dev/null
@@ -1,175 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
-<!--
-   Data Hub Service (DHuS) - For Space data distribution.
-   Copyright (C) 2017 GAEL Systems
-   This file is part of DHuS software sources.
-   This program is free software: you can redistribute it and/or modify
-   it under the terms of the GNU Affero General Public License as
-   published by the Free Software Foundation, either version 3 of the
-   License, or (at your option) any later version.
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-   GNU Affero General Public License for more details.
-   You should have received a copy of the GNU Affero General Public License
-   along with this program. If not, see <http://www.gnu.org/licenses />.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
-            http://maven.apache.org/xsd/maven-4.0.0.xsd">
-
-   <modelVersion>4.0.0</modelVersion>
-
-   <parent>
-      <groupId>fr.gael.dhus</groupId>
-      <artifactId>dhus-core-suite</artifactId>
-      <version>1.11.0-RC11</version>
-      <relativePath>../../pom.xml</relativePath>
-   </parent>
-
-   <properties>
-      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-      <openjpeg.version>2.4.0</openjpeg.version>
-      <openjpeg.classifier>${os.name}-${os.arch}</openjpeg.classifier>
-   </properties>
-
-   <groupId>fr.gael.dhus</groupId>
-   <artifactId>dhus-software</artifactId>
-   <packaging>pom</packaging>
-
-   <name>DHuS - Software Distribution</name>
-
-   <dependencies>    
-      <!-- DHuS core (required) -->
-      <dependency>
-         <groupId>fr.gael.dhus</groupId>
-         <artifactId>dhus-api</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-      <dependency>
-         <groupId>fr.gael.dhus</groupId>
-         <artifactId>dhus-core</artifactId>
-         <version>${project.version}</version>
-      </dependency>
-
-      <dependency>
-         <groupId>fr.gael.dhus</groupId>
-         <artifactId>dhus-addon-sentinel-1</artifactId>
-         <version>1.0.7</version>
-      </dependency>
-      <dependency>
-         <groupId>eu.serco.xmf.drb</groupId>
-         <artifactId>dhus-addon-sentinel-2</artifactId>
-         <version>1.1.10</version>
-      </dependency>
-      <dependency>
-         <groupId>eu.serco.xmf.drb</groupId>
-         <artifactId>dhus-addon-sentinel-3</artifactId>
-         <version>1.0.8</version>
-      </dependency>
-   </dependencies>
-
-   <build>
-      <plugins>
-         <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-dependency-plugin</artifactId>
-            <version>2.10</version>
-            <executions>
-               <execution>
-                  <id>copy-native-libraries</id>
-                  <phase>initialize</phase>
-                  <goals>
-                     <goal>copy</goal>
-                  </goals>
-                  <configuration>
-                     <artifactItems>
-                        <artifactItem>
-                           <groupId>fr.gael.openjpeg</groupId>
-                           <artifactId>openjpeg-native</artifactId>
-                           <version>${openjpeg.version}</version>
-                           <classifier>${openjpeg.classifier}</classifier>
-                           <type>${library.type}</type>
-                           <overWrite>true</overWrite>
-                           <outputDirectory>${project.build.directory}/native/Linux-x86_64</outputDirectory>
-                           <destFileName>libopenjp2.${library.type}</destFileName>
-                        </artifactItem>
-                     </artifactItems>
-                     <failOnMissingClassifierArtifact>true</failOnMissingClassifierArtifact>
-                  </configuration>
-               </execution>
-            </executions>
-         </plugin>
-
-         <plugin>
-            <artifactId>maven-assembly-plugin</artifactId>
-            <version>2.2-beta-5</version>
-            <configuration>
-               <descriptors>
-                  <descriptor>assembly/assembly.xml</descriptor>
-               </descriptors>
-            </configuration>
-            <executions>
-               <execution>
-                  <id>make-assembly</id>
-                  <phase>package</phase>
-                  <goals>
-                     <goal>single</goal>
-                  </goals>
-               </execution>
-            </executions>
-         </plugin>
-      </plugins>
-   </build>
-
-   <repositories>
-      <repository>
-        <id>osf-releases</id>
-        <name>Releases Repository</name>
-        <url>
-          https://copernicus.serco.eu/repository/nexus/content/repositories/releases/
-        </url>
-      </repository>
-      <repository>
-         <id>osf-public</id>
-         <name>OSF Public Repository</name>
-         <url>
-            https://copernicus.serco.eu/repository/nexus/content/groups/public
-         </url>
-         <layout>default</layout>
-      </repository>
-   </repositories>
-
-   <distributionManagement>
-      <repository>
-         <uniqueVersion>true</uniqueVersion>
-         <id>osf-releases</id>
-         <name>OSF Releases Repository</name>
-         <url>
-            https://copernicus.serco.eu/repository/nexus/content/repositories/releases/
-
-         </url>
-         <layout>default</layout>
-      </repository>
-      <site>
-         <id>gael-site</id>
-         <url>${site.baseUrl}/</url>
-      </site>
-   </distributionManagement>
-   <profiles> 
-      <profile>
-         <id>native-libraries-so</id>
-         <activation>
-            <property>
-               <name>os.name</name>
-               <value>Linux</value>
-            </property>
-         </activation>
-         <properties>
-            <library.type>so</library.type>
-         </properties>
-      </profile>
-   </profiles>
-
-</project>
